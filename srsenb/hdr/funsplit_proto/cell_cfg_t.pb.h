// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cell_cfg_t.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cell_5fcfg_5ft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cell_5fcfg_5ft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cell_5fcfg_5ft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cell_5fcfg_5ft_2eproto;
namespace fs {
namespace mac_rrc {
class cell_cfg_sib_t;
class cell_cfg_sib_tDefaultTypeInternal;
extern cell_cfg_sib_tDefaultTypeInternal _cell_cfg_sib_t_default_instance_;
class cell_cfg_t;
class cell_cfg_tDefaultTypeInternal;
extern cell_cfg_tDefaultTypeInternal _cell_cfg_t_default_instance_;
class scell_cfg_t;
class scell_cfg_tDefaultTypeInternal;
extern scell_cfg_tDefaultTypeInternal _scell_cfg_t_default_instance_;
class srsran_cell_t;
class srsran_cell_tDefaultTypeInternal;
extern srsran_cell_tDefaultTypeInternal _srsran_cell_t_default_instance_;
class srsran_pusch_hopping_cfg_t;
class srsran_pusch_hopping_cfg_tDefaultTypeInternal;
extern srsran_pusch_hopping_cfg_tDefaultTypeInternal _srsran_pusch_hopping_cfg_t_default_instance_;
class vect_cell_cfg_t;
class vect_cell_cfg_tDefaultTypeInternal;
extern vect_cell_cfg_tDefaultTypeInternal _vect_cell_cfg_t_default_instance_;
}  // namespace mac_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::mac_rrc::cell_cfg_sib_t* Arena::CreateMaybeMessage<::fs::mac_rrc::cell_cfg_sib_t>(Arena*);
template<> ::fs::mac_rrc::cell_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::cell_cfg_t>(Arena*);
template<> ::fs::mac_rrc::scell_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::scell_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_cell_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_cell_t>(Arena*);
template<> ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_pusch_hopping_cfg_t>(Arena*);
template<> ::fs::mac_rrc::vect_cell_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::vect_cell_cfg_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {
namespace mac_rrc {

enum SRSRAN_CP : int {
  SRSRAN_CP_NORM = 0,
  SRSRAN_CP_EXT = 1,
  SRSRAN_CP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SRSRAN_CP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SRSRAN_CP_IsValid(int value);
constexpr SRSRAN_CP SRSRAN_CP_MIN = SRSRAN_CP_NORM;
constexpr SRSRAN_CP SRSRAN_CP_MAX = SRSRAN_CP_EXT;
constexpr int SRSRAN_CP_ARRAYSIZE = SRSRAN_CP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_CP_descriptor();
template<typename T>
inline const std::string& SRSRAN_CP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SRSRAN_CP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SRSRAN_CP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SRSRAN_CP_descriptor(), enum_t_value);
}
inline bool SRSRAN_CP_Parse(
    const std::string& name, SRSRAN_CP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SRSRAN_CP>(
    SRSRAN_CP_descriptor(), name, value);
}
enum SRSRAN_PHICH_LENGTH : int {
  SRSRAN_PHICH_NORM = 0,
  SRSRAN_PHICH_EXT = 1,
  SRSRAN_PHICH_LENGTH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SRSRAN_PHICH_LENGTH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SRSRAN_PHICH_LENGTH_IsValid(int value);
constexpr SRSRAN_PHICH_LENGTH SRSRAN_PHICH_LENGTH_MIN = SRSRAN_PHICH_NORM;
constexpr SRSRAN_PHICH_LENGTH SRSRAN_PHICH_LENGTH_MAX = SRSRAN_PHICH_EXT;
constexpr int SRSRAN_PHICH_LENGTH_ARRAYSIZE = SRSRAN_PHICH_LENGTH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_PHICH_LENGTH_descriptor();
template<typename T>
inline const std::string& SRSRAN_PHICH_LENGTH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SRSRAN_PHICH_LENGTH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SRSRAN_PHICH_LENGTH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SRSRAN_PHICH_LENGTH_descriptor(), enum_t_value);
}
inline bool SRSRAN_PHICH_LENGTH_Parse(
    const std::string& name, SRSRAN_PHICH_LENGTH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SRSRAN_PHICH_LENGTH>(
    SRSRAN_PHICH_LENGTH_descriptor(), name, value);
}
enum SRSRAN_PHICH_R : int {
  SRSRAN_PHICH_R_1_6 = 0,
  SRSRAN_PHICH_R_1_2 = 1,
  SRSRAN_PHICH_R_1 = 2,
  SRSRAN_PHICH_R_2 = 3,
  SRSRAN_PHICH_R_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SRSRAN_PHICH_R_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SRSRAN_PHICH_R_IsValid(int value);
constexpr SRSRAN_PHICH_R SRSRAN_PHICH_R_MIN = SRSRAN_PHICH_R_1_6;
constexpr SRSRAN_PHICH_R SRSRAN_PHICH_R_MAX = SRSRAN_PHICH_R_2;
constexpr int SRSRAN_PHICH_R_ARRAYSIZE = SRSRAN_PHICH_R_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_PHICH_R_descriptor();
template<typename T>
inline const std::string& SRSRAN_PHICH_R_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SRSRAN_PHICH_R>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SRSRAN_PHICH_R_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SRSRAN_PHICH_R_descriptor(), enum_t_value);
}
inline bool SRSRAN_PHICH_R_Parse(
    const std::string& name, SRSRAN_PHICH_R* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SRSRAN_PHICH_R>(
    SRSRAN_PHICH_R_descriptor(), name, value);
}
enum SRSRAN_FRAME_TYPE : int {
  SRSRAN_FDD = 0,
  SRSRAN_TDD = 1,
  SRSRAN_FRAME_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SRSRAN_FRAME_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SRSRAN_FRAME_TYPE_IsValid(int value);
constexpr SRSRAN_FRAME_TYPE SRSRAN_FRAME_TYPE_MIN = SRSRAN_FDD;
constexpr SRSRAN_FRAME_TYPE SRSRAN_FRAME_TYPE_MAX = SRSRAN_TDD;
constexpr int SRSRAN_FRAME_TYPE_ARRAYSIZE = SRSRAN_FRAME_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_FRAME_TYPE_descriptor();
template<typename T>
inline const std::string& SRSRAN_FRAME_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SRSRAN_FRAME_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SRSRAN_FRAME_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SRSRAN_FRAME_TYPE_descriptor(), enum_t_value);
}
inline bool SRSRAN_FRAME_TYPE_Parse(
    const std::string& name, SRSRAN_FRAME_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SRSRAN_FRAME_TYPE>(
    SRSRAN_FRAME_TYPE_descriptor(), name, value);
}
enum HOP_MODE : int {
  SRSRAN_PUSCH_HOP_MODE_INTRA_SF = 0,
  SRSRAN_PUSCH_HOP_MODE_INTER_SF = 1,
  HOP_MODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HOP_MODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HOP_MODE_IsValid(int value);
constexpr HOP_MODE HOP_MODE_MIN = SRSRAN_PUSCH_HOP_MODE_INTRA_SF;
constexpr HOP_MODE HOP_MODE_MAX = SRSRAN_PUSCH_HOP_MODE_INTER_SF;
constexpr int HOP_MODE_ARRAYSIZE = HOP_MODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HOP_MODE_descriptor();
template<typename T>
inline const std::string& HOP_MODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HOP_MODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HOP_MODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HOP_MODE_descriptor(), enum_t_value);
}
inline bool HOP_MODE_Parse(
    const std::string& name, HOP_MODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HOP_MODE>(
    HOP_MODE_descriptor(), name, value);
}
// ===================================================================

class srsran_pusch_hopping_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_pusch_hopping_cfg_t) */ {
 public:
  inline srsran_pusch_hopping_cfg_t() : srsran_pusch_hopping_cfg_t(nullptr) {};
  virtual ~srsran_pusch_hopping_cfg_t();

  srsran_pusch_hopping_cfg_t(const srsran_pusch_hopping_cfg_t& from);
  srsran_pusch_hopping_cfg_t(srsran_pusch_hopping_cfg_t&& from) noexcept
    : srsran_pusch_hopping_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_pusch_hopping_cfg_t& operator=(const srsran_pusch_hopping_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_pusch_hopping_cfg_t& operator=(srsran_pusch_hopping_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_pusch_hopping_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_pusch_hopping_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_pusch_hopping_cfg_t*>(
               &_srsran_pusch_hopping_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(srsran_pusch_hopping_cfg_t& a, srsran_pusch_hopping_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_pusch_hopping_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_pusch_hopping_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_pusch_hopping_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_pusch_hopping_cfg_t>(nullptr);
  }

  srsran_pusch_hopping_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_pusch_hopping_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_pusch_hopping_cfg_t& from);
  void MergeFrom(const srsran_pusch_hopping_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_pusch_hopping_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_pusch_hopping_cfg_t";
  }
  protected:
  explicit srsran_pusch_hopping_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cell_5fcfg_5ft_2eproto);
    return ::descriptor_table_cell_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopModeFieldNumber = 1,
    kHoppingOffsetFieldNumber = 2,
    kNSbFieldNumber = 3,
    kNRbHoFieldNumber = 4,
    kCurrentTxNbFieldNumber = 5,
    kHoppingEnabledFieldNumber = 6,
  };
  // .fs.mac_rrc.HOP_MODE hop_mode = 1;
  void clear_hop_mode();
  ::fs::mac_rrc::HOP_MODE hop_mode() const;
  void set_hop_mode(::fs::mac_rrc::HOP_MODE value);
  private:
  ::fs::mac_rrc::HOP_MODE _internal_hop_mode() const;
  void _internal_set_hop_mode(::fs::mac_rrc::HOP_MODE value);
  public:

  // uint32 hopping_offset = 2;
  void clear_hopping_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 hopping_offset() const;
  void set_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hopping_offset() const;
  void _internal_set_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_sb = 3;
  void clear_n_sb();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_sb() const;
  void set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_sb() const;
  void _internal_set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_rb_ho = 4;
  void clear_n_rb_ho();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_rb_ho() const;
  void set_n_rb_ho(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_rb_ho() const;
  void _internal_set_n_rb_ho(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 current_tx_nb = 5;
  void clear_current_tx_nb();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_tx_nb() const;
  void set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_tx_nb() const;
  void _internal_set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool hopping_enabled = 6;
  void clear_hopping_enabled();
  bool hopping_enabled() const;
  void set_hopping_enabled(bool value);
  private:
  bool _internal_hopping_enabled() const;
  void _internal_set_hopping_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int hop_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hopping_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_sb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_rb_ho_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_tx_nb_;
  bool hopping_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cell_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class cell_cfg_sib_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.cell_cfg_sib_t) */ {
 public:
  inline cell_cfg_sib_t() : cell_cfg_sib_t(nullptr) {};
  virtual ~cell_cfg_sib_t();

  cell_cfg_sib_t(const cell_cfg_sib_t& from);
  cell_cfg_sib_t(cell_cfg_sib_t&& from) noexcept
    : cell_cfg_sib_t() {
    *this = ::std::move(from);
  }

  inline cell_cfg_sib_t& operator=(const cell_cfg_sib_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline cell_cfg_sib_t& operator=(cell_cfg_sib_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cell_cfg_sib_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cell_cfg_sib_t* internal_default_instance() {
    return reinterpret_cast<const cell_cfg_sib_t*>(
               &_cell_cfg_sib_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(cell_cfg_sib_t& a, cell_cfg_sib_t& b) {
    a.Swap(&b);
  }
  inline void Swap(cell_cfg_sib_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cell_cfg_sib_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cell_cfg_sib_t* New() const final {
    return CreateMaybeMessage<cell_cfg_sib_t>(nullptr);
  }

  cell_cfg_sib_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cell_cfg_sib_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cell_cfg_sib_t& from);
  void MergeFrom(const cell_cfg_sib_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cell_cfg_sib_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.cell_cfg_sib_t";
  }
  protected:
  explicit cell_cfg_sib_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cell_5fcfg_5ft_2eproto);
    return ::descriptor_table_cell_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLenFieldNumber = 1,
    kPeriodRfFieldNumber = 2,
  };
  // uint32 len = 1;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 period_rf = 2;
  void clear_period_rf();
  ::PROTOBUF_NAMESPACE_ID::uint32 period_rf() const;
  void set_period_rf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period_rf() const;
  void _internal_set_period_rf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.cell_cfg_sib_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_rf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cell_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_cell_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_cell_t) */ {
 public:
  inline srsran_cell_t() : srsran_cell_t(nullptr) {};
  virtual ~srsran_cell_t();

  srsran_cell_t(const srsran_cell_t& from);
  srsran_cell_t(srsran_cell_t&& from) noexcept
    : srsran_cell_t() {
    *this = ::std::move(from);
  }

  inline srsran_cell_t& operator=(const srsran_cell_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_cell_t& operator=(srsran_cell_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_cell_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_cell_t* internal_default_instance() {
    return reinterpret_cast<const srsran_cell_t*>(
               &_srsran_cell_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(srsran_cell_t& a, srsran_cell_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_cell_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_cell_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_cell_t* New() const final {
    return CreateMaybeMessage<srsran_cell_t>(nullptr);
  }

  srsran_cell_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_cell_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_cell_t& from);
  void MergeFrom(const srsran_cell_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_cell_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_cell_t";
  }
  protected:
  explicit srsran_cell_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cell_5fcfg_5ft_2eproto);
    return ::descriptor_table_cell_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNofPrbFieldNumber = 1,
    kNofPortsFieldNumber = 2,
    kIdFieldNumber = 3,
    kCpFieldNumber = 4,
    kPhichLengthFieldNumber = 5,
    kPhichResourcesFieldNumber = 6,
    kFrameTypeFieldNumber = 7,
  };
  // uint32 nof_prb = 1;
  void clear_nof_prb();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_prb() const;
  void set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_prb() const;
  void _internal_set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_ports = 2;
  void clear_nof_ports();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_ports() const;
  void set_nof_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_ports() const;
  void _internal_set_nof_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.SRSRAN_CP cp = 4;
  void clear_cp();
  ::fs::mac_rrc::SRSRAN_CP cp() const;
  void set_cp(::fs::mac_rrc::SRSRAN_CP value);
  private:
  ::fs::mac_rrc::SRSRAN_CP _internal_cp() const;
  void _internal_set_cp(::fs::mac_rrc::SRSRAN_CP value);
  public:

  // .fs.mac_rrc.SRSRAN_PHICH_LENGTH phich_length = 5;
  void clear_phich_length();
  ::fs::mac_rrc::SRSRAN_PHICH_LENGTH phich_length() const;
  void set_phich_length(::fs::mac_rrc::SRSRAN_PHICH_LENGTH value);
  private:
  ::fs::mac_rrc::SRSRAN_PHICH_LENGTH _internal_phich_length() const;
  void _internal_set_phich_length(::fs::mac_rrc::SRSRAN_PHICH_LENGTH value);
  public:

  // .fs.mac_rrc.SRSRAN_PHICH_R phich_resources = 6;
  void clear_phich_resources();
  ::fs::mac_rrc::SRSRAN_PHICH_R phich_resources() const;
  void set_phich_resources(::fs::mac_rrc::SRSRAN_PHICH_R value);
  private:
  ::fs::mac_rrc::SRSRAN_PHICH_R _internal_phich_resources() const;
  void _internal_set_phich_resources(::fs::mac_rrc::SRSRAN_PHICH_R value);
  public:

  // .fs.mac_rrc.SRSRAN_FRAME_TYPE frame_type = 7;
  void clear_frame_type();
  ::fs::mac_rrc::SRSRAN_FRAME_TYPE frame_type() const;
  void set_frame_type(::fs::mac_rrc::SRSRAN_FRAME_TYPE value);
  private:
  ::fs::mac_rrc::SRSRAN_FRAME_TYPE _internal_frame_type() const;
  void _internal_set_frame_type(::fs::mac_rrc::SRSRAN_FRAME_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_cell_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_prb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_ports_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int cp_;
  int phich_length_;
  int phich_resources_;
  int frame_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cell_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class scell_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.scell_cfg_t) */ {
 public:
  inline scell_cfg_t() : scell_cfg_t(nullptr) {};
  virtual ~scell_cfg_t();

  scell_cfg_t(const scell_cfg_t& from);
  scell_cfg_t(scell_cfg_t&& from) noexcept
    : scell_cfg_t() {
    *this = ::std::move(from);
  }

  inline scell_cfg_t& operator=(const scell_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scell_cfg_t& operator=(scell_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scell_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scell_cfg_t* internal_default_instance() {
    return reinterpret_cast<const scell_cfg_t*>(
               &_scell_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(scell_cfg_t& a, scell_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scell_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scell_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scell_cfg_t* New() const final {
    return CreateMaybeMessage<scell_cfg_t>(nullptr);
  }

  scell_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scell_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scell_cfg_t& from);
  void MergeFrom(const scell_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scell_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.scell_cfg_t";
  }
  protected:
  explicit scell_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cell_5fcfg_5ft_2eproto);
    return ::descriptor_table_cell_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnbCcIdxFieldNumber = 1,
    kCrossCarrierSchedulingFieldNumber = 2,
    kUlAllowedFieldNumber = 3,
  };
  // uint32 enb_cc_idx = 1;
  void clear_enb_cc_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 enb_cc_idx() const;
  void set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enb_cc_idx() const;
  void _internal_set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool cross_carrier_scheduling = 2;
  void clear_cross_carrier_scheduling();
  bool cross_carrier_scheduling() const;
  void set_cross_carrier_scheduling(bool value);
  private:
  bool _internal_cross_carrier_scheduling() const;
  void _internal_set_cross_carrier_scheduling(bool value);
  public:

  // bool ul_allowed = 3;
  void clear_ul_allowed();
  bool ul_allowed() const;
  void set_ul_allowed(bool value);
  private:
  bool _internal_ul_allowed() const;
  void _internal_set_ul_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.scell_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enb_cc_idx_;
  bool cross_carrier_scheduling_;
  bool ul_allowed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cell_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class cell_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.cell_cfg_t) */ {
 public:
  inline cell_cfg_t() : cell_cfg_t(nullptr) {};
  virtual ~cell_cfg_t();

  cell_cfg_t(const cell_cfg_t& from);
  cell_cfg_t(cell_cfg_t&& from) noexcept
    : cell_cfg_t() {
    *this = ::std::move(from);
  }

  inline cell_cfg_t& operator=(const cell_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline cell_cfg_t& operator=(cell_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cell_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cell_cfg_t* internal_default_instance() {
    return reinterpret_cast<const cell_cfg_t*>(
               &_cell_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(cell_cfg_t& a, cell_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(cell_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cell_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cell_cfg_t* New() const final {
    return CreateMaybeMessage<cell_cfg_t>(nullptr);
  }

  cell_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cell_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cell_cfg_t& from);
  void MergeFrom(const cell_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cell_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.cell_cfg_t";
  }
  protected:
  explicit cell_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cell_5fcfg_5ft_2eproto);
    return ::descriptor_table_cell_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSibsFieldNumber = 2,
    kScellListFieldNumber = 24,
    kCellFieldNumber = 1,
    kPuschHoppingCfgFieldNumber = 5,
    kSiWindowMsFieldNumber = 3,
    kTargetPucchUlSinrFieldNumber = 4,
    kTargetPuschUlSinrFieldNumber = 6,
    kEnablePhrHandlingFieldNumber = 7,
    kEnable64QamFieldNumber = 8,
    kPrachConfigFieldNumber = 9,
    kPrachNofPreamblesFieldNumber = 10,
    kPrachFreqOffsetFieldNumber = 11,
    kPrachRarWindowFieldNumber = 12,
    kPrachContentionResolutionTimerFieldNumber = 13,
    kMaxharqMsg3TxFieldNumber = 14,
    kN1PucchAnFieldNumber = 15,
    kDeltaPucchShiftFieldNumber = 16,
    kNrbPucchFieldNumber = 17,
    kNrbCqiFieldNumber = 18,
    kNcsAnFieldNumber = 19,
    kInitialDlCqiFieldNumber = 20,
    kSrsSubframeConfigFieldNumber = 21,
    kSrsSubframeOffsetFieldNumber = 22,
    kSrsBwConfigFieldNumber = 23,
  };
  // repeated .fs.mac_rrc.cell_cfg_sib_t sibs = 2;
  int sibs_size() const;
  private:
  int _internal_sibs_size() const;
  public:
  void clear_sibs();
  ::fs::mac_rrc::cell_cfg_sib_t* mutable_sibs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_sib_t >*
      mutable_sibs();
  private:
  const ::fs::mac_rrc::cell_cfg_sib_t& _internal_sibs(int index) const;
  ::fs::mac_rrc::cell_cfg_sib_t* _internal_add_sibs();
  public:
  const ::fs::mac_rrc::cell_cfg_sib_t& sibs(int index) const;
  ::fs::mac_rrc::cell_cfg_sib_t* add_sibs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_sib_t >&
      sibs() const;

  // repeated .fs.mac_rrc.scell_cfg_t scell_list = 24;
  int scell_list_size() const;
  private:
  int _internal_scell_list_size() const;
  public:
  void clear_scell_list();
  ::fs::mac_rrc::scell_cfg_t* mutable_scell_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::scell_cfg_t >*
      mutable_scell_list();
  private:
  const ::fs::mac_rrc::scell_cfg_t& _internal_scell_list(int index) const;
  ::fs::mac_rrc::scell_cfg_t* _internal_add_scell_list();
  public:
  const ::fs::mac_rrc::scell_cfg_t& scell_list(int index) const;
  ::fs::mac_rrc::scell_cfg_t* add_scell_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::scell_cfg_t >&
      scell_list() const;

  // .fs.mac_rrc.srsran_cell_t cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::fs::mac_rrc::srsran_cell_t& cell() const;
  ::fs::mac_rrc::srsran_cell_t* release_cell();
  ::fs::mac_rrc::srsran_cell_t* mutable_cell();
  void set_allocated_cell(::fs::mac_rrc::srsran_cell_t* cell);
  private:
  const ::fs::mac_rrc::srsran_cell_t& _internal_cell() const;
  ::fs::mac_rrc::srsran_cell_t* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::fs::mac_rrc::srsran_cell_t* cell);
  ::fs::mac_rrc::srsran_cell_t* unsafe_arena_release_cell();

  // .fs.mac_rrc.srsran_pusch_hopping_cfg_t pusch_hopping_cfg = 5;
  bool has_pusch_hopping_cfg() const;
  private:
  bool _internal_has_pusch_hopping_cfg() const;
  public:
  void clear_pusch_hopping_cfg();
  const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t& pusch_hopping_cfg() const;
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* release_pusch_hopping_cfg();
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* mutable_pusch_hopping_cfg();
  void set_allocated_pusch_hopping_cfg(::fs::mac_rrc::srsran_pusch_hopping_cfg_t* pusch_hopping_cfg);
  private:
  const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t& _internal_pusch_hopping_cfg() const;
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* _internal_mutable_pusch_hopping_cfg();
  public:
  void unsafe_arena_set_allocated_pusch_hopping_cfg(
      ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* pusch_hopping_cfg);
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* unsafe_arena_release_pusch_hopping_cfg();

  // uint32 si_window_ms = 3;
  void clear_si_window_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 si_window_ms() const;
  void set_si_window_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_si_window_ms() const;
  void _internal_set_si_window_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float target_pucch_ul_sinr = 4;
  void clear_target_pucch_ul_sinr();
  float target_pucch_ul_sinr() const;
  void set_target_pucch_ul_sinr(float value);
  private:
  float _internal_target_pucch_ul_sinr() const;
  void _internal_set_target_pucch_ul_sinr(float value);
  public:

  // float target_pusch_ul_sinr = 6;
  void clear_target_pusch_ul_sinr();
  float target_pusch_ul_sinr() const;
  void set_target_pusch_ul_sinr(float value);
  private:
  float _internal_target_pusch_ul_sinr() const;
  void _internal_set_target_pusch_ul_sinr(float value);
  public:

  // bool enable_phr_handling = 7;
  void clear_enable_phr_handling();
  bool enable_phr_handling() const;
  void set_enable_phr_handling(bool value);
  private:
  bool _internal_enable_phr_handling() const;
  void _internal_set_enable_phr_handling(bool value);
  public:

  // bool enable_64qam = 8;
  void clear_enable_64qam();
  bool enable_64qam() const;
  void set_enable_64qam(bool value);
  private:
  bool _internal_enable_64qam() const;
  void _internal_set_enable_64qam(bool value);
  public:

  // uint32 prach_config = 9;
  void clear_prach_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_config() const;
  void set_prach_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_config() const;
  void _internal_set_prach_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prach_nof_preambles = 10;
  void clear_prach_nof_preambles();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_nof_preambles() const;
  void set_prach_nof_preambles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_nof_preambles() const;
  void _internal_set_prach_nof_preambles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prach_freq_offset = 11;
  void clear_prach_freq_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_freq_offset() const;
  void set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_freq_offset() const;
  void _internal_set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prach_rar_window = 12;
  void clear_prach_rar_window();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_rar_window() const;
  void set_prach_rar_window(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_rar_window() const;
  void _internal_set_prach_rar_window(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prach_contention_resolution_timer = 13;
  void clear_prach_contention_resolution_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_contention_resolution_timer() const;
  void set_prach_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_contention_resolution_timer() const;
  void _internal_set_prach_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxharq_msg3tx = 14;
  void clear_maxharq_msg3tx();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxharq_msg3tx() const;
  void set_maxharq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxharq_msg3tx() const;
  void _internal_set_maxharq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n1pucch_an = 15;
  void clear_n1pucch_an();
  ::PROTOBUF_NAMESPACE_ID::uint32 n1pucch_an() const;
  void set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n1pucch_an() const;
  void _internal_set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 delta_pucch_shift = 16;
  void clear_delta_pucch_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 delta_pucch_shift() const;
  void set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delta_pucch_shift() const;
  void _internal_set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 nrb_pucch = 17;
  void clear_nrb_pucch();
  ::PROTOBUF_NAMESPACE_ID::int32 nrb_pucch() const;
  void set_nrb_pucch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nrb_pucch() const;
  void _internal_set_nrb_pucch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 nrb_cqi = 18;
  void clear_nrb_cqi();
  ::PROTOBUF_NAMESPACE_ID::uint32 nrb_cqi() const;
  void set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nrb_cqi() const;
  void _internal_set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ncs_an = 19;
  void clear_ncs_an();
  ::PROTOBUF_NAMESPACE_ID::uint32 ncs_an() const;
  void set_ncs_an(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncs_an() const;
  void _internal_set_ncs_an(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 initial_dl_cqi = 20;
  void clear_initial_dl_cqi();
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_dl_cqi() const;
  void set_initial_dl_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_dl_cqi() const;
  void _internal_set_initial_dl_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 srs_subframe_config = 21;
  void clear_srs_subframe_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_subframe_config() const;
  void set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srs_subframe_config() const;
  void _internal_set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 srs_subframe_offset = 22;
  void clear_srs_subframe_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_subframe_offset() const;
  void set_srs_subframe_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srs_subframe_offset() const;
  void _internal_set_srs_subframe_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 srs_bw_config = 23;
  void clear_srs_bw_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_bw_config() const;
  void set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srs_bw_config() const;
  void _internal_set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.cell_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_sib_t > sibs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::scell_cfg_t > scell_list_;
  ::fs::mac_rrc::srsran_cell_t* cell_;
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* pusch_hopping_cfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 si_window_ms_;
  float target_pucch_ul_sinr_;
  float target_pusch_ul_sinr_;
  bool enable_phr_handling_;
  bool enable_64qam_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_nof_preambles_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_freq_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_rar_window_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_contention_resolution_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxharq_msg3tx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n1pucch_an_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delta_pucch_shift_;
  ::PROTOBUF_NAMESPACE_ID::int32 nrb_pucch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nrb_cqi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ncs_an_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_dl_cqi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_subframe_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_subframe_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_bw_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cell_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class vect_cell_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.vect_cell_cfg_t) */ {
 public:
  inline vect_cell_cfg_t() : vect_cell_cfg_t(nullptr) {};
  virtual ~vect_cell_cfg_t();

  vect_cell_cfg_t(const vect_cell_cfg_t& from);
  vect_cell_cfg_t(vect_cell_cfg_t&& from) noexcept
    : vect_cell_cfg_t() {
    *this = ::std::move(from);
  }

  inline vect_cell_cfg_t& operator=(const vect_cell_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline vect_cell_cfg_t& operator=(vect_cell_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const vect_cell_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const vect_cell_cfg_t* internal_default_instance() {
    return reinterpret_cast<const vect_cell_cfg_t*>(
               &_vect_cell_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(vect_cell_cfg_t& a, vect_cell_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(vect_cell_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vect_cell_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vect_cell_cfg_t* New() const final {
    return CreateMaybeMessage<vect_cell_cfg_t>(nullptr);
  }

  vect_cell_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vect_cell_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const vect_cell_cfg_t& from);
  void MergeFrom(const vect_cell_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vect_cell_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.vect_cell_cfg_t";
  }
  protected:
  explicit vect_cell_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cell_5fcfg_5ft_2eproto);
    return ::descriptor_table_cell_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectFieldNumber = 1,
  };
  // repeated .fs.mac_rrc.cell_cfg_t vect = 1;
  int vect_size() const;
  private:
  int _internal_vect_size() const;
  public:
  void clear_vect();
  ::fs::mac_rrc::cell_cfg_t* mutable_vect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_t >*
      mutable_vect();
  private:
  const ::fs::mac_rrc::cell_cfg_t& _internal_vect(int index) const;
  ::fs::mac_rrc::cell_cfg_t* _internal_add_vect();
  public:
  const ::fs::mac_rrc::cell_cfg_t& vect(int index) const;
  ::fs::mac_rrc::cell_cfg_t* add_vect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_t >&
      vect() const;

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.vect_cell_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_t > vect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cell_5fcfg_5ft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// srsran_pusch_hopping_cfg_t

// .fs.mac_rrc.HOP_MODE hop_mode = 1;
inline void srsran_pusch_hopping_cfg_t::clear_hop_mode() {
  hop_mode_ = 0;
}
inline ::fs::mac_rrc::HOP_MODE srsran_pusch_hopping_cfg_t::_internal_hop_mode() const {
  return static_cast< ::fs::mac_rrc::HOP_MODE >(hop_mode_);
}
inline ::fs::mac_rrc::HOP_MODE srsran_pusch_hopping_cfg_t::hop_mode() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pusch_hopping_cfg_t.hop_mode)
  return _internal_hop_mode();
}
inline void srsran_pusch_hopping_cfg_t::_internal_set_hop_mode(::fs::mac_rrc::HOP_MODE value) {
  
  hop_mode_ = value;
}
inline void srsran_pusch_hopping_cfg_t::set_hop_mode(::fs::mac_rrc::HOP_MODE value) {
  _internal_set_hop_mode(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pusch_hopping_cfg_t.hop_mode)
}

// uint32 hopping_offset = 2;
inline void srsran_pusch_hopping_cfg_t::clear_hopping_offset() {
  hopping_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::_internal_hopping_offset() const {
  return hopping_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::hopping_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pusch_hopping_cfg_t.hopping_offset)
  return _internal_hopping_offset();
}
inline void srsran_pusch_hopping_cfg_t::_internal_set_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hopping_offset_ = value;
}
inline void srsran_pusch_hopping_cfg_t::set_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hopping_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pusch_hopping_cfg_t.hopping_offset)
}

// uint32 n_sb = 3;
inline void srsran_pusch_hopping_cfg_t::clear_n_sb() {
  n_sb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::_internal_n_sb() const {
  return n_sb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::n_sb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pusch_hopping_cfg_t.n_sb)
  return _internal_n_sb();
}
inline void srsran_pusch_hopping_cfg_t::_internal_set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_sb_ = value;
}
inline void srsran_pusch_hopping_cfg_t::set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_sb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pusch_hopping_cfg_t.n_sb)
}

// uint32 n_rb_ho = 4;
inline void srsran_pusch_hopping_cfg_t::clear_n_rb_ho() {
  n_rb_ho_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::_internal_n_rb_ho() const {
  return n_rb_ho_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::n_rb_ho() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pusch_hopping_cfg_t.n_rb_ho)
  return _internal_n_rb_ho();
}
inline void srsran_pusch_hopping_cfg_t::_internal_set_n_rb_ho(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_rb_ho_ = value;
}
inline void srsran_pusch_hopping_cfg_t::set_n_rb_ho(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_rb_ho(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pusch_hopping_cfg_t.n_rb_ho)
}

// uint32 current_tx_nb = 5;
inline void srsran_pusch_hopping_cfg_t::clear_current_tx_nb() {
  current_tx_nb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::_internal_current_tx_nb() const {
  return current_tx_nb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pusch_hopping_cfg_t::current_tx_nb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pusch_hopping_cfg_t.current_tx_nb)
  return _internal_current_tx_nb();
}
inline void srsran_pusch_hopping_cfg_t::_internal_set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_tx_nb_ = value;
}
inline void srsran_pusch_hopping_cfg_t::set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_tx_nb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pusch_hopping_cfg_t.current_tx_nb)
}

// bool hopping_enabled = 6;
inline void srsran_pusch_hopping_cfg_t::clear_hopping_enabled() {
  hopping_enabled_ = false;
}
inline bool srsran_pusch_hopping_cfg_t::_internal_hopping_enabled() const {
  return hopping_enabled_;
}
inline bool srsran_pusch_hopping_cfg_t::hopping_enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pusch_hopping_cfg_t.hopping_enabled)
  return _internal_hopping_enabled();
}
inline void srsran_pusch_hopping_cfg_t::_internal_set_hopping_enabled(bool value) {
  
  hopping_enabled_ = value;
}
inline void srsran_pusch_hopping_cfg_t::set_hopping_enabled(bool value) {
  _internal_set_hopping_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pusch_hopping_cfg_t.hopping_enabled)
}

// -------------------------------------------------------------------

// cell_cfg_sib_t

// uint32 len = 1;
inline void cell_cfg_sib_t::clear_len() {
  len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_sib_t::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_sib_t::len() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_sib_t.len)
  return _internal_len();
}
inline void cell_cfg_sib_t::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  len_ = value;
}
inline void cell_cfg_sib_t::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_sib_t.len)
}

// uint32 period_rf = 2;
inline void cell_cfg_sib_t::clear_period_rf() {
  period_rf_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_sib_t::_internal_period_rf() const {
  return period_rf_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_sib_t::period_rf() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_sib_t.period_rf)
  return _internal_period_rf();
}
inline void cell_cfg_sib_t::_internal_set_period_rf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_rf_ = value;
}
inline void cell_cfg_sib_t::set_period_rf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period_rf(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_sib_t.period_rf)
}

// -------------------------------------------------------------------

// srsran_cell_t

// uint32 nof_prb = 1;
inline void srsran_cell_t::clear_nof_prb() {
  nof_prb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cell_t::_internal_nof_prb() const {
  return nof_prb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cell_t::nof_prb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.nof_prb)
  return _internal_nof_prb();
}
inline void srsran_cell_t::_internal_set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_prb_ = value;
}
inline void srsran_cell_t::set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_prb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.nof_prb)
}

// uint32 nof_ports = 2;
inline void srsran_cell_t::clear_nof_ports() {
  nof_ports_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cell_t::_internal_nof_ports() const {
  return nof_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cell_t::nof_ports() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.nof_ports)
  return _internal_nof_ports();
}
inline void srsran_cell_t::_internal_set_nof_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_ports_ = value;
}
inline void srsran_cell_t::set_nof_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_ports(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.nof_ports)
}

// uint32 id = 3;
inline void srsran_cell_t::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cell_t::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cell_t::id() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.id)
  return _internal_id();
}
inline void srsran_cell_t::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void srsran_cell_t::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.id)
}

// .fs.mac_rrc.SRSRAN_CP cp = 4;
inline void srsran_cell_t::clear_cp() {
  cp_ = 0;
}
inline ::fs::mac_rrc::SRSRAN_CP srsran_cell_t::_internal_cp() const {
  return static_cast< ::fs::mac_rrc::SRSRAN_CP >(cp_);
}
inline ::fs::mac_rrc::SRSRAN_CP srsran_cell_t::cp() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.cp)
  return _internal_cp();
}
inline void srsran_cell_t::_internal_set_cp(::fs::mac_rrc::SRSRAN_CP value) {
  
  cp_ = value;
}
inline void srsran_cell_t::set_cp(::fs::mac_rrc::SRSRAN_CP value) {
  _internal_set_cp(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.cp)
}

// .fs.mac_rrc.SRSRAN_PHICH_LENGTH phich_length = 5;
inline void srsran_cell_t::clear_phich_length() {
  phich_length_ = 0;
}
inline ::fs::mac_rrc::SRSRAN_PHICH_LENGTH srsran_cell_t::_internal_phich_length() const {
  return static_cast< ::fs::mac_rrc::SRSRAN_PHICH_LENGTH >(phich_length_);
}
inline ::fs::mac_rrc::SRSRAN_PHICH_LENGTH srsran_cell_t::phich_length() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.phich_length)
  return _internal_phich_length();
}
inline void srsran_cell_t::_internal_set_phich_length(::fs::mac_rrc::SRSRAN_PHICH_LENGTH value) {
  
  phich_length_ = value;
}
inline void srsran_cell_t::set_phich_length(::fs::mac_rrc::SRSRAN_PHICH_LENGTH value) {
  _internal_set_phich_length(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.phich_length)
}

// .fs.mac_rrc.SRSRAN_PHICH_R phich_resources = 6;
inline void srsran_cell_t::clear_phich_resources() {
  phich_resources_ = 0;
}
inline ::fs::mac_rrc::SRSRAN_PHICH_R srsran_cell_t::_internal_phich_resources() const {
  return static_cast< ::fs::mac_rrc::SRSRAN_PHICH_R >(phich_resources_);
}
inline ::fs::mac_rrc::SRSRAN_PHICH_R srsran_cell_t::phich_resources() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.phich_resources)
  return _internal_phich_resources();
}
inline void srsran_cell_t::_internal_set_phich_resources(::fs::mac_rrc::SRSRAN_PHICH_R value) {
  
  phich_resources_ = value;
}
inline void srsran_cell_t::set_phich_resources(::fs::mac_rrc::SRSRAN_PHICH_R value) {
  _internal_set_phich_resources(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.phich_resources)
}

// .fs.mac_rrc.SRSRAN_FRAME_TYPE frame_type = 7;
inline void srsran_cell_t::clear_frame_type() {
  frame_type_ = 0;
}
inline ::fs::mac_rrc::SRSRAN_FRAME_TYPE srsran_cell_t::_internal_frame_type() const {
  return static_cast< ::fs::mac_rrc::SRSRAN_FRAME_TYPE >(frame_type_);
}
inline ::fs::mac_rrc::SRSRAN_FRAME_TYPE srsran_cell_t::frame_type() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cell_t.frame_type)
  return _internal_frame_type();
}
inline void srsran_cell_t::_internal_set_frame_type(::fs::mac_rrc::SRSRAN_FRAME_TYPE value) {
  
  frame_type_ = value;
}
inline void srsran_cell_t::set_frame_type(::fs::mac_rrc::SRSRAN_FRAME_TYPE value) {
  _internal_set_frame_type(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cell_t.frame_type)
}

// -------------------------------------------------------------------

// scell_cfg_t

// uint32 enb_cc_idx = 1;
inline void scell_cfg_t::clear_enb_cc_idx() {
  enb_cc_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 scell_cfg_t::_internal_enb_cc_idx() const {
  return enb_cc_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 scell_cfg_t::enb_cc_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.scell_cfg_t.enb_cc_idx)
  return _internal_enb_cc_idx();
}
inline void scell_cfg_t::_internal_set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enb_cc_idx_ = value;
}
inline void scell_cfg_t::set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enb_cc_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.scell_cfg_t.enb_cc_idx)
}

// bool cross_carrier_scheduling = 2;
inline void scell_cfg_t::clear_cross_carrier_scheduling() {
  cross_carrier_scheduling_ = false;
}
inline bool scell_cfg_t::_internal_cross_carrier_scheduling() const {
  return cross_carrier_scheduling_;
}
inline bool scell_cfg_t::cross_carrier_scheduling() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.scell_cfg_t.cross_carrier_scheduling)
  return _internal_cross_carrier_scheduling();
}
inline void scell_cfg_t::_internal_set_cross_carrier_scheduling(bool value) {
  
  cross_carrier_scheduling_ = value;
}
inline void scell_cfg_t::set_cross_carrier_scheduling(bool value) {
  _internal_set_cross_carrier_scheduling(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.scell_cfg_t.cross_carrier_scheduling)
}

// bool ul_allowed = 3;
inline void scell_cfg_t::clear_ul_allowed() {
  ul_allowed_ = false;
}
inline bool scell_cfg_t::_internal_ul_allowed() const {
  return ul_allowed_;
}
inline bool scell_cfg_t::ul_allowed() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.scell_cfg_t.ul_allowed)
  return _internal_ul_allowed();
}
inline void scell_cfg_t::_internal_set_ul_allowed(bool value) {
  
  ul_allowed_ = value;
}
inline void scell_cfg_t::set_ul_allowed(bool value) {
  _internal_set_ul_allowed(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.scell_cfg_t.ul_allowed)
}

// -------------------------------------------------------------------

// cell_cfg_t

// .fs.mac_rrc.srsran_cell_t cell = 1;
inline bool cell_cfg_t::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool cell_cfg_t::has_cell() const {
  return _internal_has_cell();
}
inline void cell_cfg_t::clear_cell() {
  if (GetArena() == nullptr && cell_ != nullptr) {
    delete cell_;
  }
  cell_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_cell_t& cell_cfg_t::_internal_cell() const {
  const ::fs::mac_rrc::srsran_cell_t* p = cell_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_cell_t*>(
      &::fs::mac_rrc::_srsran_cell_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_cell_t& cell_cfg_t::cell() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.cell)
  return _internal_cell();
}
inline void cell_cfg_t::unsafe_arena_set_allocated_cell(
    ::fs::mac_rrc::srsran_cell_t* cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.cell_cfg_t.cell)
}
inline ::fs::mac_rrc::srsran_cell_t* cell_cfg_t::release_cell() {
  auto temp = unsafe_arena_release_cell();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_cell_t* cell_cfg_t::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.cell_cfg_t.cell)
  
  ::fs::mac_rrc::srsran_cell_t* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_cell_t* cell_cfg_t::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_cell_t>(GetArena());
    cell_ = p;
  }
  return cell_;
}
inline ::fs::mac_rrc::srsran_cell_t* cell_cfg_t::mutable_cell() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.cell_cfg_t.cell)
  return _internal_mutable_cell();
}
inline void cell_cfg_t::set_allocated_cell(::fs::mac_rrc::srsran_cell_t* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_;
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell);
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.cell_cfg_t.cell)
}

// repeated .fs.mac_rrc.cell_cfg_sib_t sibs = 2;
inline int cell_cfg_t::_internal_sibs_size() const {
  return sibs_.size();
}
inline int cell_cfg_t::sibs_size() const {
  return _internal_sibs_size();
}
inline void cell_cfg_t::clear_sibs() {
  sibs_.Clear();
}
inline ::fs::mac_rrc::cell_cfg_sib_t* cell_cfg_t::mutable_sibs(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.cell_cfg_t.sibs)
  return sibs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_sib_t >*
cell_cfg_t::mutable_sibs() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.cell_cfg_t.sibs)
  return &sibs_;
}
inline const ::fs::mac_rrc::cell_cfg_sib_t& cell_cfg_t::_internal_sibs(int index) const {
  return sibs_.Get(index);
}
inline const ::fs::mac_rrc::cell_cfg_sib_t& cell_cfg_t::sibs(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.sibs)
  return _internal_sibs(index);
}
inline ::fs::mac_rrc::cell_cfg_sib_t* cell_cfg_t::_internal_add_sibs() {
  return sibs_.Add();
}
inline ::fs::mac_rrc::cell_cfg_sib_t* cell_cfg_t::add_sibs() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.cell_cfg_t.sibs)
  return _internal_add_sibs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_sib_t >&
cell_cfg_t::sibs() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.cell_cfg_t.sibs)
  return sibs_;
}

// uint32 si_window_ms = 3;
inline void cell_cfg_t::clear_si_window_ms() {
  si_window_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_si_window_ms() const {
  return si_window_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::si_window_ms() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.si_window_ms)
  return _internal_si_window_ms();
}
inline void cell_cfg_t::_internal_set_si_window_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  si_window_ms_ = value;
}
inline void cell_cfg_t::set_si_window_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_si_window_ms(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.si_window_ms)
}

// float target_pucch_ul_sinr = 4;
inline void cell_cfg_t::clear_target_pucch_ul_sinr() {
  target_pucch_ul_sinr_ = 0;
}
inline float cell_cfg_t::_internal_target_pucch_ul_sinr() const {
  return target_pucch_ul_sinr_;
}
inline float cell_cfg_t::target_pucch_ul_sinr() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.target_pucch_ul_sinr)
  return _internal_target_pucch_ul_sinr();
}
inline void cell_cfg_t::_internal_set_target_pucch_ul_sinr(float value) {
  
  target_pucch_ul_sinr_ = value;
}
inline void cell_cfg_t::set_target_pucch_ul_sinr(float value) {
  _internal_set_target_pucch_ul_sinr(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.target_pucch_ul_sinr)
}

// .fs.mac_rrc.srsran_pusch_hopping_cfg_t pusch_hopping_cfg = 5;
inline bool cell_cfg_t::_internal_has_pusch_hopping_cfg() const {
  return this != internal_default_instance() && pusch_hopping_cfg_ != nullptr;
}
inline bool cell_cfg_t::has_pusch_hopping_cfg() const {
  return _internal_has_pusch_hopping_cfg();
}
inline void cell_cfg_t::clear_pusch_hopping_cfg() {
  if (GetArena() == nullptr && pusch_hopping_cfg_ != nullptr) {
    delete pusch_hopping_cfg_;
  }
  pusch_hopping_cfg_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t& cell_cfg_t::_internal_pusch_hopping_cfg() const {
  const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* p = pusch_hopping_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t*>(
      &::fs::mac_rrc::_srsran_pusch_hopping_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t& cell_cfg_t::pusch_hopping_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.pusch_hopping_cfg)
  return _internal_pusch_hopping_cfg();
}
inline void cell_cfg_t::unsafe_arena_set_allocated_pusch_hopping_cfg(
    ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* pusch_hopping_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pusch_hopping_cfg_);
  }
  pusch_hopping_cfg_ = pusch_hopping_cfg;
  if (pusch_hopping_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.cell_cfg_t.pusch_hopping_cfg)
}
inline ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* cell_cfg_t::release_pusch_hopping_cfg() {
  auto temp = unsafe_arena_release_pusch_hopping_cfg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* cell_cfg_t::unsafe_arena_release_pusch_hopping_cfg() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.cell_cfg_t.pusch_hopping_cfg)
  
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* temp = pusch_hopping_cfg_;
  pusch_hopping_cfg_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* cell_cfg_t::_internal_mutable_pusch_hopping_cfg() {
  
  if (pusch_hopping_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_pusch_hopping_cfg_t>(GetArena());
    pusch_hopping_cfg_ = p;
  }
  return pusch_hopping_cfg_;
}
inline ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* cell_cfg_t::mutable_pusch_hopping_cfg() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.cell_cfg_t.pusch_hopping_cfg)
  return _internal_mutable_pusch_hopping_cfg();
}
inline void cell_cfg_t::set_allocated_pusch_hopping_cfg(::fs::mac_rrc::srsran_pusch_hopping_cfg_t* pusch_hopping_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pusch_hopping_cfg_;
  }
  if (pusch_hopping_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pusch_hopping_cfg);
    if (message_arena != submessage_arena) {
      pusch_hopping_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pusch_hopping_cfg, submessage_arena);
    }
    
  } else {
    
  }
  pusch_hopping_cfg_ = pusch_hopping_cfg;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.cell_cfg_t.pusch_hopping_cfg)
}

// float target_pusch_ul_sinr = 6;
inline void cell_cfg_t::clear_target_pusch_ul_sinr() {
  target_pusch_ul_sinr_ = 0;
}
inline float cell_cfg_t::_internal_target_pusch_ul_sinr() const {
  return target_pusch_ul_sinr_;
}
inline float cell_cfg_t::target_pusch_ul_sinr() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.target_pusch_ul_sinr)
  return _internal_target_pusch_ul_sinr();
}
inline void cell_cfg_t::_internal_set_target_pusch_ul_sinr(float value) {
  
  target_pusch_ul_sinr_ = value;
}
inline void cell_cfg_t::set_target_pusch_ul_sinr(float value) {
  _internal_set_target_pusch_ul_sinr(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.target_pusch_ul_sinr)
}

// bool enable_phr_handling = 7;
inline void cell_cfg_t::clear_enable_phr_handling() {
  enable_phr_handling_ = false;
}
inline bool cell_cfg_t::_internal_enable_phr_handling() const {
  return enable_phr_handling_;
}
inline bool cell_cfg_t::enable_phr_handling() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.enable_phr_handling)
  return _internal_enable_phr_handling();
}
inline void cell_cfg_t::_internal_set_enable_phr_handling(bool value) {
  
  enable_phr_handling_ = value;
}
inline void cell_cfg_t::set_enable_phr_handling(bool value) {
  _internal_set_enable_phr_handling(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.enable_phr_handling)
}

// bool enable_64qam = 8;
inline void cell_cfg_t::clear_enable_64qam() {
  enable_64qam_ = false;
}
inline bool cell_cfg_t::_internal_enable_64qam() const {
  return enable_64qam_;
}
inline bool cell_cfg_t::enable_64qam() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.enable_64qam)
  return _internal_enable_64qam();
}
inline void cell_cfg_t::_internal_set_enable_64qam(bool value) {
  
  enable_64qam_ = value;
}
inline void cell_cfg_t::set_enable_64qam(bool value) {
  _internal_set_enable_64qam(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.enable_64qam)
}

// uint32 prach_config = 9;
inline void cell_cfg_t::clear_prach_config() {
  prach_config_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_prach_config() const {
  return prach_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::prach_config() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.prach_config)
  return _internal_prach_config();
}
inline void cell_cfg_t::_internal_set_prach_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prach_config_ = value;
}
inline void cell_cfg_t::set_prach_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_config(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.prach_config)
}

// uint32 prach_nof_preambles = 10;
inline void cell_cfg_t::clear_prach_nof_preambles() {
  prach_nof_preambles_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_prach_nof_preambles() const {
  return prach_nof_preambles_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::prach_nof_preambles() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.prach_nof_preambles)
  return _internal_prach_nof_preambles();
}
inline void cell_cfg_t::_internal_set_prach_nof_preambles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prach_nof_preambles_ = value;
}
inline void cell_cfg_t::set_prach_nof_preambles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_nof_preambles(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.prach_nof_preambles)
}

// uint32 prach_freq_offset = 11;
inline void cell_cfg_t::clear_prach_freq_offset() {
  prach_freq_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_prach_freq_offset() const {
  return prach_freq_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::prach_freq_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.prach_freq_offset)
  return _internal_prach_freq_offset();
}
inline void cell_cfg_t::_internal_set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prach_freq_offset_ = value;
}
inline void cell_cfg_t::set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_freq_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.prach_freq_offset)
}

// uint32 prach_rar_window = 12;
inline void cell_cfg_t::clear_prach_rar_window() {
  prach_rar_window_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_prach_rar_window() const {
  return prach_rar_window_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::prach_rar_window() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.prach_rar_window)
  return _internal_prach_rar_window();
}
inline void cell_cfg_t::_internal_set_prach_rar_window(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prach_rar_window_ = value;
}
inline void cell_cfg_t::set_prach_rar_window(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_rar_window(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.prach_rar_window)
}

// uint32 prach_contention_resolution_timer = 13;
inline void cell_cfg_t::clear_prach_contention_resolution_timer() {
  prach_contention_resolution_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_prach_contention_resolution_timer() const {
  return prach_contention_resolution_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::prach_contention_resolution_timer() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.prach_contention_resolution_timer)
  return _internal_prach_contention_resolution_timer();
}
inline void cell_cfg_t::_internal_set_prach_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prach_contention_resolution_timer_ = value;
}
inline void cell_cfg_t::set_prach_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_contention_resolution_timer(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.prach_contention_resolution_timer)
}

// uint32 maxharq_msg3tx = 14;
inline void cell_cfg_t::clear_maxharq_msg3tx() {
  maxharq_msg3tx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_maxharq_msg3tx() const {
  return maxharq_msg3tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::maxharq_msg3tx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.maxharq_msg3tx)
  return _internal_maxharq_msg3tx();
}
inline void cell_cfg_t::_internal_set_maxharq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxharq_msg3tx_ = value;
}
inline void cell_cfg_t::set_maxharq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxharq_msg3tx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.maxharq_msg3tx)
}

// uint32 n1pucch_an = 15;
inline void cell_cfg_t::clear_n1pucch_an() {
  n1pucch_an_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_n1pucch_an() const {
  return n1pucch_an_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::n1pucch_an() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.n1pucch_an)
  return _internal_n1pucch_an();
}
inline void cell_cfg_t::_internal_set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n1pucch_an_ = value;
}
inline void cell_cfg_t::set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n1pucch_an(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.n1pucch_an)
}

// uint32 delta_pucch_shift = 16;
inline void cell_cfg_t::clear_delta_pucch_shift() {
  delta_pucch_shift_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_delta_pucch_shift() const {
  return delta_pucch_shift_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::delta_pucch_shift() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.delta_pucch_shift)
  return _internal_delta_pucch_shift();
}
inline void cell_cfg_t::_internal_set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  delta_pucch_shift_ = value;
}
inline void cell_cfg_t::set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delta_pucch_shift(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.delta_pucch_shift)
}

// int32 nrb_pucch = 17;
inline void cell_cfg_t::clear_nrb_pucch() {
  nrb_pucch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cell_cfg_t::_internal_nrb_pucch() const {
  return nrb_pucch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cell_cfg_t::nrb_pucch() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.nrb_pucch)
  return _internal_nrb_pucch();
}
inline void cell_cfg_t::_internal_set_nrb_pucch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nrb_pucch_ = value;
}
inline void cell_cfg_t::set_nrb_pucch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nrb_pucch(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.nrb_pucch)
}

// uint32 nrb_cqi = 18;
inline void cell_cfg_t::clear_nrb_cqi() {
  nrb_cqi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_nrb_cqi() const {
  return nrb_cqi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::nrb_cqi() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.nrb_cqi)
  return _internal_nrb_cqi();
}
inline void cell_cfg_t::_internal_set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nrb_cqi_ = value;
}
inline void cell_cfg_t::set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nrb_cqi(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.nrb_cqi)
}

// uint32 ncs_an = 19;
inline void cell_cfg_t::clear_ncs_an() {
  ncs_an_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_ncs_an() const {
  return ncs_an_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::ncs_an() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.ncs_an)
  return _internal_ncs_an();
}
inline void cell_cfg_t::_internal_set_ncs_an(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ncs_an_ = value;
}
inline void cell_cfg_t::set_ncs_an(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ncs_an(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.ncs_an)
}

// uint32 initial_dl_cqi = 20;
inline void cell_cfg_t::clear_initial_dl_cqi() {
  initial_dl_cqi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_initial_dl_cqi() const {
  return initial_dl_cqi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::initial_dl_cqi() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.initial_dl_cqi)
  return _internal_initial_dl_cqi();
}
inline void cell_cfg_t::_internal_set_initial_dl_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  initial_dl_cqi_ = value;
}
inline void cell_cfg_t::set_initial_dl_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initial_dl_cqi(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.initial_dl_cqi)
}

// uint32 srs_subframe_config = 21;
inline void cell_cfg_t::clear_srs_subframe_config() {
  srs_subframe_config_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_srs_subframe_config() const {
  return srs_subframe_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::srs_subframe_config() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.srs_subframe_config)
  return _internal_srs_subframe_config();
}
inline void cell_cfg_t::_internal_set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srs_subframe_config_ = value;
}
inline void cell_cfg_t::set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srs_subframe_config(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.srs_subframe_config)
}

// uint32 srs_subframe_offset = 22;
inline void cell_cfg_t::clear_srs_subframe_offset() {
  srs_subframe_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_srs_subframe_offset() const {
  return srs_subframe_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::srs_subframe_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.srs_subframe_offset)
  return _internal_srs_subframe_offset();
}
inline void cell_cfg_t::_internal_set_srs_subframe_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srs_subframe_offset_ = value;
}
inline void cell_cfg_t::set_srs_subframe_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srs_subframe_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.srs_subframe_offset)
}

// uint32 srs_bw_config = 23;
inline void cell_cfg_t::clear_srs_bw_config() {
  srs_bw_config_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::_internal_srs_bw_config() const {
  return srs_bw_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cell_cfg_t::srs_bw_config() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.srs_bw_config)
  return _internal_srs_bw_config();
}
inline void cell_cfg_t::_internal_set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srs_bw_config_ = value;
}
inline void cell_cfg_t::set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srs_bw_config(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cell_cfg_t.srs_bw_config)
}

// repeated .fs.mac_rrc.scell_cfg_t scell_list = 24;
inline int cell_cfg_t::_internal_scell_list_size() const {
  return scell_list_.size();
}
inline int cell_cfg_t::scell_list_size() const {
  return _internal_scell_list_size();
}
inline void cell_cfg_t::clear_scell_list() {
  scell_list_.Clear();
}
inline ::fs::mac_rrc::scell_cfg_t* cell_cfg_t::mutable_scell_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.cell_cfg_t.scell_list)
  return scell_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::scell_cfg_t >*
cell_cfg_t::mutable_scell_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.cell_cfg_t.scell_list)
  return &scell_list_;
}
inline const ::fs::mac_rrc::scell_cfg_t& cell_cfg_t::_internal_scell_list(int index) const {
  return scell_list_.Get(index);
}
inline const ::fs::mac_rrc::scell_cfg_t& cell_cfg_t::scell_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cell_cfg_t.scell_list)
  return _internal_scell_list(index);
}
inline ::fs::mac_rrc::scell_cfg_t* cell_cfg_t::_internal_add_scell_list() {
  return scell_list_.Add();
}
inline ::fs::mac_rrc::scell_cfg_t* cell_cfg_t::add_scell_list() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.cell_cfg_t.scell_list)
  return _internal_add_scell_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::scell_cfg_t >&
cell_cfg_t::scell_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.cell_cfg_t.scell_list)
  return scell_list_;
}

// -------------------------------------------------------------------

// vect_cell_cfg_t

// repeated .fs.mac_rrc.cell_cfg_t vect = 1;
inline int vect_cell_cfg_t::_internal_vect_size() const {
  return vect_.size();
}
inline int vect_cell_cfg_t::vect_size() const {
  return _internal_vect_size();
}
inline void vect_cell_cfg_t::clear_vect() {
  vect_.Clear();
}
inline ::fs::mac_rrc::cell_cfg_t* vect_cell_cfg_t::mutable_vect(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.vect_cell_cfg_t.vect)
  return vect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_t >*
vect_cell_cfg_t::mutable_vect() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.vect_cell_cfg_t.vect)
  return &vect_;
}
inline const ::fs::mac_rrc::cell_cfg_t& vect_cell_cfg_t::_internal_vect(int index) const {
  return vect_.Get(index);
}
inline const ::fs::mac_rrc::cell_cfg_t& vect_cell_cfg_t::vect(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.vect_cell_cfg_t.vect)
  return _internal_vect(index);
}
inline ::fs::mac_rrc::cell_cfg_t* vect_cell_cfg_t::_internal_add_vect() {
  return vect_.Add();
}
inline ::fs::mac_rrc::cell_cfg_t* vect_cell_cfg_t::add_vect() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.vect_cell_cfg_t.vect)
  return _internal_add_vect();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cell_cfg_t >&
vect_cell_cfg_t::vect() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.vect_cell_cfg_t.vect)
  return vect_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mac_rrc
}  // namespace fs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fs::mac_rrc::SRSRAN_CP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::SRSRAN_CP>() {
  return ::fs::mac_rrc::SRSRAN_CP_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::SRSRAN_PHICH_LENGTH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::SRSRAN_PHICH_LENGTH>() {
  return ::fs::mac_rrc::SRSRAN_PHICH_LENGTH_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::SRSRAN_PHICH_R> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::SRSRAN_PHICH_R>() {
  return ::fs::mac_rrc::SRSRAN_PHICH_R_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::SRSRAN_FRAME_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::SRSRAN_FRAME_TYPE>() {
  return ::fs::mac_rrc::SRSRAN_FRAME_TYPE_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::HOP_MODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::HOP_MODE>() {
  return ::fs::mac_rrc::HOP_MODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cell_5fcfg_5ft_2eproto
