// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phy_mac.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_phy_5fmac_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_phy_5fmac_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_phy_5fmac_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phy_5fmac_2eproto;
namespace fs {
namespace phy_mac {
class dl_sched_grant_t;
class dl_sched_grant_tDefaultTypeInternal;
extern dl_sched_grant_tDefaultTypeInternal _dl_sched_grant_t_default_instance_;
class dl_sched_list_t;
class dl_sched_list_tDefaultTypeInternal;
extern dl_sched_list_tDefaultTypeInternal _dl_sched_list_t_default_instance_;
class dl_sched_t;
class dl_sched_tDefaultTypeInternal;
extern dl_sched_tDefaultTypeInternal _dl_sched_t_default_instance_;
class raw_buffer;
class raw_bufferDefaultTypeInternal;
extern raw_bufferDefaultTypeInternal _raw_buffer_default_instance_;
class srsran_dci_dl_t;
class srsran_dci_dl_tDefaultTypeInternal;
extern srsran_dci_dl_tDefaultTypeInternal _srsran_dci_dl_t_default_instance_;
class srsran_dci_location_t;
class srsran_dci_location_tDefaultTypeInternal;
extern srsran_dci_location_tDefaultTypeInternal _srsran_dci_location_t_default_instance_;
class srsran_dci_tb_t;
class srsran_dci_tb_tDefaultTypeInternal;
extern srsran_dci_tb_tDefaultTypeInternal _srsran_dci_tb_t_default_instance_;
class srsran_ra_type0_t;
class srsran_ra_type0_tDefaultTypeInternal;
extern srsran_ra_type0_tDefaultTypeInternal _srsran_ra_type0_t_default_instance_;
class srsran_ra_type1_t;
class srsran_ra_type1_tDefaultTypeInternal;
extern srsran_ra_type1_tDefaultTypeInternal _srsran_ra_type1_t_default_instance_;
class srsran_ra_type2_t;
class srsran_ra_type2_tDefaultTypeInternal;
extern srsran_ra_type2_tDefaultTypeInternal _srsran_ra_type2_t_default_instance_;
class srsran_softbuffer_tx_t;
class srsran_softbuffer_tx_tDefaultTypeInternal;
extern srsran_softbuffer_tx_tDefaultTypeInternal _srsran_softbuffer_tx_t_default_instance_;
}  // namespace phy_mac
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::phy_mac::dl_sched_grant_t* Arena::CreateMaybeMessage<::fs::phy_mac::dl_sched_grant_t>(Arena*);
template<> ::fs::phy_mac::dl_sched_list_t* Arena::CreateMaybeMessage<::fs::phy_mac::dl_sched_list_t>(Arena*);
template<> ::fs::phy_mac::dl_sched_t* Arena::CreateMaybeMessage<::fs::phy_mac::dl_sched_t>(Arena*);
template<> ::fs::phy_mac::raw_buffer* Arena::CreateMaybeMessage<::fs::phy_mac::raw_buffer>(Arena*);
template<> ::fs::phy_mac::srsran_dci_dl_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_dci_dl_t>(Arena*);
template<> ::fs::phy_mac::srsran_dci_location_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_dci_location_t>(Arena*);
template<> ::fs::phy_mac::srsran_dci_tb_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_dci_tb_t>(Arena*);
template<> ::fs::phy_mac::srsran_ra_type0_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_ra_type0_t>(Arena*);
template<> ::fs::phy_mac::srsran_ra_type1_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_ra_type1_t>(Arena*);
template<> ::fs::phy_mac::srsran_ra_type2_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_ra_type2_t>(Arena*);
template<> ::fs::phy_mac::srsran_softbuffer_tx_t* Arena::CreateMaybeMessage<::fs::phy_mac::srsran_softbuffer_tx_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {
namespace phy_mac {

// ===================================================================

class srsran_ra_type2_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_ra_type2_t) */ {
 public:
  inline srsran_ra_type2_t() : srsran_ra_type2_t(nullptr) {};
  virtual ~srsran_ra_type2_t();

  srsran_ra_type2_t(const srsran_ra_type2_t& from);
  srsran_ra_type2_t(srsran_ra_type2_t&& from) noexcept
    : srsran_ra_type2_t() {
    *this = ::std::move(from);
  }

  inline srsran_ra_type2_t& operator=(const srsran_ra_type2_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_ra_type2_t& operator=(srsran_ra_type2_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_ra_type2_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_ra_type2_t* internal_default_instance() {
    return reinterpret_cast<const srsran_ra_type2_t*>(
               &_srsran_ra_type2_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(srsran_ra_type2_t& a, srsran_ra_type2_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_ra_type2_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_ra_type2_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_ra_type2_t* New() const final {
    return CreateMaybeMessage<srsran_ra_type2_t>(nullptr);
  }

  srsran_ra_type2_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_ra_type2_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_ra_type2_t& from);
  void MergeFrom(const srsran_ra_type2_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_ra_type2_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_ra_type2_t";
  }
  protected:
  explicit srsran_ra_type2_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRivFieldNumber = 1,
    kNPrb1AFieldNumber = 2,
    kNGapFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // uint32 riv = 1;
  void clear_riv();
  ::PROTOBUF_NAMESPACE_ID::uint32 riv() const;
  void set_riv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_riv() const;
  void _internal_set_riv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_prb1a = 2;
  void clear_n_prb1a();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_prb1a() const;
  void set_n_prb1a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_prb1a() const;
  void _internal_set_n_prb1a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_gap = 3;
  void clear_n_gap();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_gap() const;
  void set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_gap() const;
  void _internal_set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mode = 4;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_ra_type2_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 riv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_prb1a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_gap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class srsran_ra_type1_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_ra_type1_t) */ {
 public:
  inline srsran_ra_type1_t() : srsran_ra_type1_t(nullptr) {};
  virtual ~srsran_ra_type1_t();

  srsran_ra_type1_t(const srsran_ra_type1_t& from);
  srsran_ra_type1_t(srsran_ra_type1_t&& from) noexcept
    : srsran_ra_type1_t() {
    *this = ::std::move(from);
  }

  inline srsran_ra_type1_t& operator=(const srsran_ra_type1_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_ra_type1_t& operator=(srsran_ra_type1_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_ra_type1_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_ra_type1_t* internal_default_instance() {
    return reinterpret_cast<const srsran_ra_type1_t*>(
               &_srsran_ra_type1_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(srsran_ra_type1_t& a, srsran_ra_type1_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_ra_type1_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_ra_type1_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_ra_type1_t* New() const final {
    return CreateMaybeMessage<srsran_ra_type1_t>(nullptr);
  }

  srsran_ra_type1_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_ra_type1_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_ra_type1_t& from);
  void MergeFrom(const srsran_ra_type1_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_ra_type1_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_ra_type1_t";
  }
  protected:
  explicit srsran_ra_type1_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrbBitmaskFieldNumber = 1,
    kRbgSubsetFieldNumber = 2,
    kShiftFieldNumber = 3,
  };
  // uint32 vrb_bitmask = 1;
  void clear_vrb_bitmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 vrb_bitmask() const;
  void set_vrb_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vrb_bitmask() const;
  void _internal_set_vrb_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rbg_subset = 2;
  void clear_rbg_subset();
  ::PROTOBUF_NAMESPACE_ID::uint32 rbg_subset() const;
  void set_rbg_subset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rbg_subset() const;
  void _internal_set_rbg_subset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool shift = 3;
  void clear_shift();
  bool shift() const;
  void set_shift(bool value);
  private:
  bool _internal_shift() const;
  void _internal_set_shift(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_ra_type1_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vrb_bitmask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rbg_subset_;
  bool shift_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class srsran_ra_type0_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_ra_type0_t) */ {
 public:
  inline srsran_ra_type0_t() : srsran_ra_type0_t(nullptr) {};
  virtual ~srsran_ra_type0_t();

  srsran_ra_type0_t(const srsran_ra_type0_t& from);
  srsran_ra_type0_t(srsran_ra_type0_t&& from) noexcept
    : srsran_ra_type0_t() {
    *this = ::std::move(from);
  }

  inline srsran_ra_type0_t& operator=(const srsran_ra_type0_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_ra_type0_t& operator=(srsran_ra_type0_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_ra_type0_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_ra_type0_t* internal_default_instance() {
    return reinterpret_cast<const srsran_ra_type0_t*>(
               &_srsran_ra_type0_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(srsran_ra_type0_t& a, srsran_ra_type0_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_ra_type0_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_ra_type0_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_ra_type0_t* New() const final {
    return CreateMaybeMessage<srsran_ra_type0_t>(nullptr);
  }

  srsran_ra_type0_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_ra_type0_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_ra_type0_t& from);
  void MergeFrom(const srsran_ra_type0_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_ra_type0_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_ra_type0_t";
  }
  protected:
  explicit srsran_ra_type0_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRbgBitmaskFieldNumber = 1,
  };
  // uint32 rbg_bitmask = 1;
  void clear_rbg_bitmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 rbg_bitmask() const;
  void set_rbg_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rbg_bitmask() const;
  void _internal_set_rbg_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_ra_type0_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rbg_bitmask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class srsran_dci_tb_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_dci_tb_t) */ {
 public:
  inline srsran_dci_tb_t() : srsran_dci_tb_t(nullptr) {};
  virtual ~srsran_dci_tb_t();

  srsran_dci_tb_t(const srsran_dci_tb_t& from);
  srsran_dci_tb_t(srsran_dci_tb_t&& from) noexcept
    : srsran_dci_tb_t() {
    *this = ::std::move(from);
  }

  inline srsran_dci_tb_t& operator=(const srsran_dci_tb_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_dci_tb_t& operator=(srsran_dci_tb_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_dci_tb_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_dci_tb_t* internal_default_instance() {
    return reinterpret_cast<const srsran_dci_tb_t*>(
               &_srsran_dci_tb_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(srsran_dci_tb_t& a, srsran_dci_tb_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_dci_tb_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_dci_tb_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_dci_tb_t* New() const final {
    return CreateMaybeMessage<srsran_dci_tb_t>(nullptr);
  }

  srsran_dci_tb_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_dci_tb_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_dci_tb_t& from);
  void MergeFrom(const srsran_dci_tb_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_dci_tb_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_dci_tb_t";
  }
  protected:
  explicit srsran_dci_tb_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMcsIdxFieldNumber = 1,
    kRvFieldNumber = 2,
    kNdiFieldNumber = 3,
    kCwIdxFieldNumber = 4,
  };
  // uint32 mcs_idx = 1;
  void clear_mcs_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs_idx() const;
  void set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcs_idx() const;
  void _internal_set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 rv = 2;
  void clear_rv();
  ::PROTOBUF_NAMESPACE_ID::int32 rv() const;
  void set_rv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rv() const;
  void _internal_set_rv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool ndi = 3;
  void clear_ndi();
  bool ndi() const;
  void set_ndi(bool value);
  private:
  bool _internal_ndi() const;
  void _internal_set_ndi(bool value);
  public:

  // uint32 cw_idx = 4;
  void clear_cw_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 cw_idx() const;
  void set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cw_idx() const;
  void _internal_set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_dci_tb_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 rv_;
  bool ndi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cw_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class srsran_dci_location_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_dci_location_t) */ {
 public:
  inline srsran_dci_location_t() : srsran_dci_location_t(nullptr) {};
  virtual ~srsran_dci_location_t();

  srsran_dci_location_t(const srsran_dci_location_t& from);
  srsran_dci_location_t(srsran_dci_location_t&& from) noexcept
    : srsran_dci_location_t() {
    *this = ::std::move(from);
  }

  inline srsran_dci_location_t& operator=(const srsran_dci_location_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_dci_location_t& operator=(srsran_dci_location_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_dci_location_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_dci_location_t* internal_default_instance() {
    return reinterpret_cast<const srsran_dci_location_t*>(
               &_srsran_dci_location_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(srsran_dci_location_t& a, srsran_dci_location_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_dci_location_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_dci_location_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_dci_location_t* New() const final {
    return CreateMaybeMessage<srsran_dci_location_t>(nullptr);
  }

  srsran_dci_location_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_dci_location_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_dci_location_t& from);
  void MergeFrom(const srsran_dci_location_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_dci_location_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_dci_location_t";
  }
  protected:
  explicit srsran_dci_location_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kNcceFieldNumber = 2,
  };
  // uint32 L = 1;
  void clear_l();
  ::PROTOBUF_NAMESPACE_ID::uint32 l() const;
  void set_l(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l() const;
  void _internal_set_l(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ncce = 2;
  void clear_ncce();
  ::PROTOBUF_NAMESPACE_ID::uint32 ncce() const;
  void set_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncce() const;
  void _internal_set_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_dci_location_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ncce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class srsran_dci_dl_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_dci_dl_t) */ {
 public:
  inline srsran_dci_dl_t() : srsran_dci_dl_t(nullptr) {};
  virtual ~srsran_dci_dl_t();

  srsran_dci_dl_t(const srsran_dci_dl_t& from);
  srsran_dci_dl_t(srsran_dci_dl_t&& from) noexcept
    : srsran_dci_dl_t() {
    *this = ::std::move(from);
  }

  inline srsran_dci_dl_t& operator=(const srsran_dci_dl_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_dci_dl_t& operator=(srsran_dci_dl_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_dci_dl_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_dci_dl_t* internal_default_instance() {
    return reinterpret_cast<const srsran_dci_dl_t*>(
               &_srsran_dci_dl_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(srsran_dci_dl_t& a, srsran_dci_dl_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_dci_dl_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_dci_dl_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_dci_dl_t* New() const final {
    return CreateMaybeMessage<srsran_dci_dl_t>(nullptr);
  }

  srsran_dci_dl_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_dci_dl_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_dci_dl_t& from);
  void MergeFrom(const srsran_dci_dl_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_dci_dl_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_dci_dl_t";
  }
  protected:
  explicit srsran_dci_dl_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTbFieldNumber = 26,
    kLocationFieldNumber = 21,
    kType0AllocFieldNumber = 23,
    kType1AllocFieldNumber = 24,
    kType2AllocFieldNumber = 25,
    kTbCwSwapFieldNumber = 1,
    kPconfFieldNumber = 2,
    kPowerOffsetFieldNumber = 3,
    kIsRaOrderFieldNumber = 4,
    kCifPresentFieldNumber = 5,
    kSrsRequestFieldNumber = 6,
    kSrsRequestPresentFieldNumber = 7,
    kIsTddFieldNumber = 8,
    kIsDwptsFieldNumber = 9,
    kSramIdFieldNumber = 10,
    kRntiFieldNumber = 11,
    kUeCcIdxFieldNumber = 12,
    kPinfoFieldNumber = 13,
    kTpcPucchFieldNumber = 14,
    kRaPreambleFieldNumber = 15,
    kRaMaskIdxFieldNumber = 16,
    kCifFieldNumber = 17,
    kPidFieldNumber = 18,
    kDaiFieldNumber = 19,
    kFormatFieldNumber = 20,
    kAllocTypeFieldNumber = 22,
  };
  // repeated .fs.phy_mac.srsran_dci_tb_t tb = 26;
  int tb_size() const;
  private:
  int _internal_tb_size() const;
  public:
  void clear_tb();
  ::fs::phy_mac::srsran_dci_tb_t* mutable_tb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_dci_tb_t >*
      mutable_tb();
  private:
  const ::fs::phy_mac::srsran_dci_tb_t& _internal_tb(int index) const;
  ::fs::phy_mac::srsran_dci_tb_t* _internal_add_tb();
  public:
  const ::fs::phy_mac::srsran_dci_tb_t& tb(int index) const;
  ::fs::phy_mac::srsran_dci_tb_t* add_tb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_dci_tb_t >&
      tb() const;

  // .fs.phy_mac.srsran_dci_location_t location = 21;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::fs::phy_mac::srsran_dci_location_t& location() const;
  ::fs::phy_mac::srsran_dci_location_t* release_location();
  ::fs::phy_mac::srsran_dci_location_t* mutable_location();
  void set_allocated_location(::fs::phy_mac::srsran_dci_location_t* location);
  private:
  const ::fs::phy_mac::srsran_dci_location_t& _internal_location() const;
  ::fs::phy_mac::srsran_dci_location_t* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::fs::phy_mac::srsran_dci_location_t* location);
  ::fs::phy_mac::srsran_dci_location_t* unsafe_arena_release_location();

  // .fs.phy_mac.srsran_ra_type0_t type0_alloc = 23;
  bool has_type0_alloc() const;
  private:
  bool _internal_has_type0_alloc() const;
  public:
  void clear_type0_alloc();
  const ::fs::phy_mac::srsran_ra_type0_t& type0_alloc() const;
  ::fs::phy_mac::srsran_ra_type0_t* release_type0_alloc();
  ::fs::phy_mac::srsran_ra_type0_t* mutable_type0_alloc();
  void set_allocated_type0_alloc(::fs::phy_mac::srsran_ra_type0_t* type0_alloc);
  private:
  const ::fs::phy_mac::srsran_ra_type0_t& _internal_type0_alloc() const;
  ::fs::phy_mac::srsran_ra_type0_t* _internal_mutable_type0_alloc();
  public:
  void unsafe_arena_set_allocated_type0_alloc(
      ::fs::phy_mac::srsran_ra_type0_t* type0_alloc);
  ::fs::phy_mac::srsran_ra_type0_t* unsafe_arena_release_type0_alloc();

  // .fs.phy_mac.srsran_ra_type1_t type1_alloc = 24;
  bool has_type1_alloc() const;
  private:
  bool _internal_has_type1_alloc() const;
  public:
  void clear_type1_alloc();
  const ::fs::phy_mac::srsran_ra_type1_t& type1_alloc() const;
  ::fs::phy_mac::srsran_ra_type1_t* release_type1_alloc();
  ::fs::phy_mac::srsran_ra_type1_t* mutable_type1_alloc();
  void set_allocated_type1_alloc(::fs::phy_mac::srsran_ra_type1_t* type1_alloc);
  private:
  const ::fs::phy_mac::srsran_ra_type1_t& _internal_type1_alloc() const;
  ::fs::phy_mac::srsran_ra_type1_t* _internal_mutable_type1_alloc();
  public:
  void unsafe_arena_set_allocated_type1_alloc(
      ::fs::phy_mac::srsran_ra_type1_t* type1_alloc);
  ::fs::phy_mac::srsran_ra_type1_t* unsafe_arena_release_type1_alloc();

  // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 25;
  bool has_type2_alloc() const;
  private:
  bool _internal_has_type2_alloc() const;
  public:
  void clear_type2_alloc();
  const ::fs::phy_mac::srsran_ra_type2_t& type2_alloc() const;
  ::fs::phy_mac::srsran_ra_type2_t* release_type2_alloc();
  ::fs::phy_mac::srsran_ra_type2_t* mutable_type2_alloc();
  void set_allocated_type2_alloc(::fs::phy_mac::srsran_ra_type2_t* type2_alloc);
  private:
  const ::fs::phy_mac::srsran_ra_type2_t& _internal_type2_alloc() const;
  ::fs::phy_mac::srsran_ra_type2_t* _internal_mutable_type2_alloc();
  public:
  void unsafe_arena_set_allocated_type2_alloc(
      ::fs::phy_mac::srsran_ra_type2_t* type2_alloc);
  ::fs::phy_mac::srsran_ra_type2_t* unsafe_arena_release_type2_alloc();

  // bool tb_cw_swap = 1;
  void clear_tb_cw_swap();
  bool tb_cw_swap() const;
  void set_tb_cw_swap(bool value);
  private:
  bool _internal_tb_cw_swap() const;
  void _internal_set_tb_cw_swap(bool value);
  public:

  // bool pconf = 2;
  void clear_pconf();
  bool pconf() const;
  void set_pconf(bool value);
  private:
  bool _internal_pconf() const;
  void _internal_set_pconf(bool value);
  public:

  // bool power_offset = 3;
  void clear_power_offset();
  bool power_offset() const;
  void set_power_offset(bool value);
  private:
  bool _internal_power_offset() const;
  void _internal_set_power_offset(bool value);
  public:

  // bool is_ra_order = 4;
  void clear_is_ra_order();
  bool is_ra_order() const;
  void set_is_ra_order(bool value);
  private:
  bool _internal_is_ra_order() const;
  void _internal_set_is_ra_order(bool value);
  public:

  // bool cif_present = 5;
  void clear_cif_present();
  bool cif_present() const;
  void set_cif_present(bool value);
  private:
  bool _internal_cif_present() const;
  void _internal_set_cif_present(bool value);
  public:

  // bool srs_request = 6;
  void clear_srs_request();
  bool srs_request() const;
  void set_srs_request(bool value);
  private:
  bool _internal_srs_request() const;
  void _internal_set_srs_request(bool value);
  public:

  // bool srs_request_present = 7;
  void clear_srs_request_present();
  bool srs_request_present() const;
  void set_srs_request_present(bool value);
  private:
  bool _internal_srs_request_present() const;
  void _internal_set_srs_request_present(bool value);
  public:

  // bool is_tdd = 8;
  void clear_is_tdd();
  bool is_tdd() const;
  void set_is_tdd(bool value);
  private:
  bool _internal_is_tdd() const;
  void _internal_set_is_tdd(bool value);
  public:

  // bool is_dwpts = 9;
  void clear_is_dwpts();
  bool is_dwpts() const;
  void set_is_dwpts(bool value);
  private:
  bool _internal_is_dwpts() const;
  void _internal_set_is_dwpts(bool value);
  public:

  // bool sram_id = 10;
  void clear_sram_id();
  bool sram_id() const;
  void set_sram_id(bool value);
  private:
  bool _internal_sram_id() const;
  void _internal_set_sram_id(bool value);
  public:

  // uint32 rnti = 11;
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ue_cc_idx = 12;
  void clear_ue_cc_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_cc_idx() const;
  void set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_cc_idx() const;
  void _internal_set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pinfo = 13;
  void clear_pinfo();
  ::PROTOBUF_NAMESPACE_ID::uint32 pinfo() const;
  void set_pinfo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pinfo() const;
  void _internal_set_pinfo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tpc_pucch = 14;
  void clear_tpc_pucch();
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_pucch() const;
  void set_tpc_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tpc_pucch() const;
  void _internal_set_tpc_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ra_preamble = 15;
  void clear_ra_preamble();
  ::PROTOBUF_NAMESPACE_ID::uint32 ra_preamble() const;
  void set_ra_preamble(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ra_preamble() const;
  void _internal_set_ra_preamble(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ra_mask_idx = 16;
  void clear_ra_mask_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 ra_mask_idx() const;
  void set_ra_mask_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ra_mask_idx() const;
  void _internal_set_ra_mask_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cif = 17;
  void clear_cif();
  ::PROTOBUF_NAMESPACE_ID::uint32 cif() const;
  void set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cif() const;
  void _internal_set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pid = 18;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dai = 19;
  void clear_dai();
  ::PROTOBUF_NAMESPACE_ID::uint32 dai() const;
  void set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dai() const;
  void _internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 format = 20;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 alloc_type = 22;
  void clear_alloc_type();
  ::PROTOBUF_NAMESPACE_ID::int32 alloc_type() const;
  void set_alloc_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alloc_type() const;
  void _internal_set_alloc_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_dci_dl_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_dci_tb_t > tb_;
  ::fs::phy_mac::srsran_dci_location_t* location_;
  ::fs::phy_mac::srsran_ra_type0_t* type0_alloc_;
  ::fs::phy_mac::srsran_ra_type1_t* type1_alloc_;
  ::fs::phy_mac::srsran_ra_type2_t* type2_alloc_;
  bool tb_cw_swap_;
  bool pconf_;
  bool power_offset_;
  bool is_ra_order_;
  bool cif_present_;
  bool srs_request_;
  bool srs_request_present_;
  bool is_tdd_;
  bool is_dwpts_;
  bool sram_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_cc_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_pucch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ra_preamble_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ra_mask_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cif_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dai_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 alloc_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class raw_buffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.raw_buffer) */ {
 public:
  inline raw_buffer() : raw_buffer(nullptr) {};
  virtual ~raw_buffer();

  raw_buffer(const raw_buffer& from);
  raw_buffer(raw_buffer&& from) noexcept
    : raw_buffer() {
    *this = ::std::move(from);
  }

  inline raw_buffer& operator=(const raw_buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline raw_buffer& operator=(raw_buffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const raw_buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const raw_buffer* internal_default_instance() {
    return reinterpret_cast<const raw_buffer*>(
               &_raw_buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(raw_buffer& a, raw_buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(raw_buffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(raw_buffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline raw_buffer* New() const final {
    return CreateMaybeMessage<raw_buffer>(nullptr);
  }

  raw_buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<raw_buffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const raw_buffer& from);
  void MergeFrom(const raw_buffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(raw_buffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.raw_buffer";
  }
  protected:
  explicit raw_buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.raw_buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class srsran_softbuffer_tx_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.srsran_softbuffer_tx_t) */ {
 public:
  inline srsran_softbuffer_tx_t() : srsran_softbuffer_tx_t(nullptr) {};
  virtual ~srsran_softbuffer_tx_t();

  srsran_softbuffer_tx_t(const srsran_softbuffer_tx_t& from);
  srsran_softbuffer_tx_t(srsran_softbuffer_tx_t&& from) noexcept
    : srsran_softbuffer_tx_t() {
    *this = ::std::move(from);
  }

  inline srsran_softbuffer_tx_t& operator=(const srsran_softbuffer_tx_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_softbuffer_tx_t& operator=(srsran_softbuffer_tx_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_softbuffer_tx_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_softbuffer_tx_t* internal_default_instance() {
    return reinterpret_cast<const srsran_softbuffer_tx_t*>(
               &_srsran_softbuffer_tx_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(srsran_softbuffer_tx_t& a, srsran_softbuffer_tx_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_softbuffer_tx_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_softbuffer_tx_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_softbuffer_tx_t* New() const final {
    return CreateMaybeMessage<srsran_softbuffer_tx_t>(nullptr);
  }

  srsran_softbuffer_tx_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_softbuffer_tx_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_softbuffer_tx_t& from);
  void MergeFrom(const srsran_softbuffer_tx_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_softbuffer_tx_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.srsran_softbuffer_tx_t";
  }
  protected:
  explicit srsran_softbuffer_tx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferBFieldNumber = 3,
    kMaxCbFieldNumber = 1,
    kMaxCbSizeFieldNumber = 2,
  };
  // repeated .fs.phy_mac.raw_buffer buffer_b = 3;
  int buffer_b_size() const;
  private:
  int _internal_buffer_b_size() const;
  public:
  void clear_buffer_b();
  ::fs::phy_mac::raw_buffer* mutable_buffer_b(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::raw_buffer >*
      mutable_buffer_b();
  private:
  const ::fs::phy_mac::raw_buffer& _internal_buffer_b(int index) const;
  ::fs::phy_mac::raw_buffer* _internal_add_buffer_b();
  public:
  const ::fs::phy_mac::raw_buffer& buffer_b(int index) const;
  ::fs::phy_mac::raw_buffer* add_buffer_b();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::raw_buffer >&
      buffer_b() const;

  // uint32 max_cb = 1;
  void clear_max_cb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb() const;
  void set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb() const;
  void _internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_cb_size = 2;
  void clear_max_cb_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size() const;
  void set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb_size() const;
  void _internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.srsran_softbuffer_tx_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::raw_buffer > buffer_b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class dl_sched_grant_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.dl_sched_grant_t) */ {
 public:
  inline dl_sched_grant_t() : dl_sched_grant_t(nullptr) {};
  virtual ~dl_sched_grant_t();

  dl_sched_grant_t(const dl_sched_grant_t& from);
  dl_sched_grant_t(dl_sched_grant_t&& from) noexcept
    : dl_sched_grant_t() {
    *this = ::std::move(from);
  }

  inline dl_sched_grant_t& operator=(const dl_sched_grant_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline dl_sched_grant_t& operator=(dl_sched_grant_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dl_sched_grant_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dl_sched_grant_t* internal_default_instance() {
    return reinterpret_cast<const dl_sched_grant_t*>(
               &_dl_sched_grant_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(dl_sched_grant_t& a, dl_sched_grant_t& b) {
    a.Swap(&b);
  }
  inline void Swap(dl_sched_grant_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dl_sched_grant_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dl_sched_grant_t* New() const final {
    return CreateMaybeMessage<dl_sched_grant_t>(nullptr);
  }

  dl_sched_grant_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dl_sched_grant_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dl_sched_grant_t& from);
  void MergeFrom(const dl_sched_grant_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dl_sched_grant_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.dl_sched_grant_t";
  }
  protected:
  explicit dl_sched_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSoftbufferTxFieldNumber = 3,
    kDataLenFieldNumber = 4,
    kDciFieldNumber = 1,
  };
  // repeated bytes data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // repeated .fs.phy_mac.srsran_softbuffer_tx_t softbuffer_tx = 3;
  int softbuffer_tx_size() const;
  private:
  int _internal_softbuffer_tx_size() const;
  public:
  void clear_softbuffer_tx();
  ::fs::phy_mac::srsran_softbuffer_tx_t* mutable_softbuffer_tx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_softbuffer_tx_t >*
      mutable_softbuffer_tx();
  private:
  const ::fs::phy_mac::srsran_softbuffer_tx_t& _internal_softbuffer_tx(int index) const;
  ::fs::phy_mac::srsran_softbuffer_tx_t* _internal_add_softbuffer_tx();
  public:
  const ::fs::phy_mac::srsran_softbuffer_tx_t& softbuffer_tx(int index) const;
  ::fs::phy_mac::srsran_softbuffer_tx_t* add_softbuffer_tx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_softbuffer_tx_t >&
      softbuffer_tx() const;

  // repeated uint32 data_len = 4;
  int data_len_size() const;
  private:
  int _internal_data_len_size() const;
  public:
  void clear_data_len();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_len(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data_len() const;
  void _internal_add_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data_len();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data_len(int index) const;
  void set_data_len(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data_len() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data_len();

  // .fs.phy_mac.srsran_dci_dl_t dci = 1;
  bool has_dci() const;
  private:
  bool _internal_has_dci() const;
  public:
  void clear_dci();
  const ::fs::phy_mac::srsran_dci_dl_t& dci() const;
  ::fs::phy_mac::srsran_dci_dl_t* release_dci();
  ::fs::phy_mac::srsran_dci_dl_t* mutable_dci();
  void set_allocated_dci(::fs::phy_mac::srsran_dci_dl_t* dci);
  private:
  const ::fs::phy_mac::srsran_dci_dl_t& _internal_dci() const;
  ::fs::phy_mac::srsran_dci_dl_t* _internal_mutable_dci();
  public:
  void unsafe_arena_set_allocated_dci(
      ::fs::phy_mac::srsran_dci_dl_t* dci);
  ::fs::phy_mac::srsran_dci_dl_t* unsafe_arena_release_dci();

  // @@protoc_insertion_point(class_scope:fs.phy_mac.dl_sched_grant_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_softbuffer_tx_t > softbuffer_tx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_len_;
  mutable std::atomic<int> _data_len_cached_byte_size_;
  ::fs::phy_mac::srsran_dci_dl_t* dci_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class dl_sched_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.dl_sched_t) */ {
 public:
  inline dl_sched_t() : dl_sched_t(nullptr) {};
  virtual ~dl_sched_t();

  dl_sched_t(const dl_sched_t& from);
  dl_sched_t(dl_sched_t&& from) noexcept
    : dl_sched_t() {
    *this = ::std::move(from);
  }

  inline dl_sched_t& operator=(const dl_sched_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline dl_sched_t& operator=(dl_sched_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dl_sched_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dl_sched_t* internal_default_instance() {
    return reinterpret_cast<const dl_sched_t*>(
               &_dl_sched_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(dl_sched_t& a, dl_sched_t& b) {
    a.Swap(&b);
  }
  inline void Swap(dl_sched_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dl_sched_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dl_sched_t* New() const final {
    return CreateMaybeMessage<dl_sched_t>(nullptr);
  }

  dl_sched_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dl_sched_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dl_sched_t& from);
  void MergeFrom(const dl_sched_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dl_sched_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.dl_sched_t";
  }
  protected:
  explicit dl_sched_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPdschFieldNumber = 3,
    kCfiFieldNumber = 1,
    kNofGrantsFieldNumber = 2,
  };
  // repeated .fs.phy_mac.dl_sched_grant_t pdsch = 3;
  int pdsch_size() const;
  private:
  int _internal_pdsch_size() const;
  public:
  void clear_pdsch();
  ::fs::phy_mac::dl_sched_grant_t* mutable_pdsch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_grant_t >*
      mutable_pdsch();
  private:
  const ::fs::phy_mac::dl_sched_grant_t& _internal_pdsch(int index) const;
  ::fs::phy_mac::dl_sched_grant_t* _internal_add_pdsch();
  public:
  const ::fs::phy_mac::dl_sched_grant_t& pdsch(int index) const;
  ::fs::phy_mac::dl_sched_grant_t* add_pdsch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_grant_t >&
      pdsch() const;

  // uint32 cfi = 1;
  void clear_cfi();
  ::PROTOBUF_NAMESPACE_ID::uint32 cfi() const;
  void set_cfi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cfi() const;
  void _internal_set_cfi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_grants = 2;
  void clear_nof_grants();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_grants() const;
  void set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_grants() const;
  void _internal_set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.phy_mac.dl_sched_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_grant_t > pdsch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cfi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_grants_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// -------------------------------------------------------------------

class dl_sched_list_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.phy_mac.dl_sched_list_t) */ {
 public:
  inline dl_sched_list_t() : dl_sched_list_t(nullptr) {};
  virtual ~dl_sched_list_t();

  dl_sched_list_t(const dl_sched_list_t& from);
  dl_sched_list_t(dl_sched_list_t&& from) noexcept
    : dl_sched_list_t() {
    *this = ::std::move(from);
  }

  inline dl_sched_list_t& operator=(const dl_sched_list_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline dl_sched_list_t& operator=(dl_sched_list_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dl_sched_list_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dl_sched_list_t* internal_default_instance() {
    return reinterpret_cast<const dl_sched_list_t*>(
               &_dl_sched_list_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(dl_sched_list_t& a, dl_sched_list_t& b) {
    a.Swap(&b);
  }
  inline void Swap(dl_sched_list_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dl_sched_list_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dl_sched_list_t* New() const final {
    return CreateMaybeMessage<dl_sched_list_t>(nullptr);
  }

  dl_sched_list_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dl_sched_list_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dl_sched_list_t& from);
  void MergeFrom(const dl_sched_list_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dl_sched_list_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.phy_mac.dl_sched_list_t";
  }
  protected:
  explicit dl_sched_list_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phy_5fmac_2eproto);
    return ::descriptor_table_phy_5fmac_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .fs.phy_mac.dl_sched_t list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::fs::phy_mac::dl_sched_t* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_t >*
      mutable_list();
  private:
  const ::fs::phy_mac::dl_sched_t& _internal_list(int index) const;
  ::fs::phy_mac::dl_sched_t* _internal_add_list();
  public:
  const ::fs::phy_mac::dl_sched_t& list(int index) const;
  ::fs::phy_mac::dl_sched_t* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_t >&
      list() const;

  // @@protoc_insertion_point(class_scope:fs.phy_mac.dl_sched_list_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_t > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phy_5fmac_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// srsran_ra_type2_t

// uint32 riv = 1;
inline void srsran_ra_type2_t::clear_riv() {
  riv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::_internal_riv() const {
  return riv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::riv() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type2_t.riv)
  return _internal_riv();
}
inline void srsran_ra_type2_t::_internal_set_riv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  riv_ = value;
}
inline void srsran_ra_type2_t::set_riv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_riv(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type2_t.riv)
}

// uint32 n_prb1a = 2;
inline void srsran_ra_type2_t::clear_n_prb1a() {
  n_prb1a_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::_internal_n_prb1a() const {
  return n_prb1a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::n_prb1a() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type2_t.n_prb1a)
  return _internal_n_prb1a();
}
inline void srsran_ra_type2_t::_internal_set_n_prb1a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_prb1a_ = value;
}
inline void srsran_ra_type2_t::set_n_prb1a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_prb1a(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type2_t.n_prb1a)
}

// uint32 n_gap = 3;
inline void srsran_ra_type2_t::clear_n_gap() {
  n_gap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::_internal_n_gap() const {
  return n_gap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::n_gap() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type2_t.n_gap)
  return _internal_n_gap();
}
inline void srsran_ra_type2_t::_internal_set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_gap_ = value;
}
inline void srsran_ra_type2_t::set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_gap(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type2_t.n_gap)
}

// uint32 mode = 4;
inline void srsran_ra_type2_t::clear_mode() {
  mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type2_t::mode() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type2_t.mode)
  return _internal_mode();
}
inline void srsran_ra_type2_t::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mode_ = value;
}
inline void srsran_ra_type2_t::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type2_t.mode)
}

// -------------------------------------------------------------------

// srsran_ra_type1_t

// uint32 vrb_bitmask = 1;
inline void srsran_ra_type1_t::clear_vrb_bitmask() {
  vrb_bitmask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type1_t::_internal_vrb_bitmask() const {
  return vrb_bitmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type1_t::vrb_bitmask() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type1_t.vrb_bitmask)
  return _internal_vrb_bitmask();
}
inline void srsran_ra_type1_t::_internal_set_vrb_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vrb_bitmask_ = value;
}
inline void srsran_ra_type1_t::set_vrb_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vrb_bitmask(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type1_t.vrb_bitmask)
}

// uint32 rbg_subset = 2;
inline void srsran_ra_type1_t::clear_rbg_subset() {
  rbg_subset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type1_t::_internal_rbg_subset() const {
  return rbg_subset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type1_t::rbg_subset() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type1_t.rbg_subset)
  return _internal_rbg_subset();
}
inline void srsran_ra_type1_t::_internal_set_rbg_subset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rbg_subset_ = value;
}
inline void srsran_ra_type1_t::set_rbg_subset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rbg_subset(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type1_t.rbg_subset)
}

// bool shift = 3;
inline void srsran_ra_type1_t::clear_shift() {
  shift_ = false;
}
inline bool srsran_ra_type1_t::_internal_shift() const {
  return shift_;
}
inline bool srsran_ra_type1_t::shift() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type1_t.shift)
  return _internal_shift();
}
inline void srsran_ra_type1_t::_internal_set_shift(bool value) {
  
  shift_ = value;
}
inline void srsran_ra_type1_t::set_shift(bool value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type1_t.shift)
}

// -------------------------------------------------------------------

// srsran_ra_type0_t

// uint32 rbg_bitmask = 1;
inline void srsran_ra_type0_t::clear_rbg_bitmask() {
  rbg_bitmask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type0_t::_internal_rbg_bitmask() const {
  return rbg_bitmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_type0_t::rbg_bitmask() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_ra_type0_t.rbg_bitmask)
  return _internal_rbg_bitmask();
}
inline void srsran_ra_type0_t::_internal_set_rbg_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rbg_bitmask_ = value;
}
inline void srsran_ra_type0_t::set_rbg_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rbg_bitmask(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_ra_type0_t.rbg_bitmask)
}

// -------------------------------------------------------------------

// srsran_dci_tb_t

// uint32 mcs_idx = 1;
inline void srsran_dci_tb_t::clear_mcs_idx() {
  mcs_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_tb_t::_internal_mcs_idx() const {
  return mcs_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_tb_t::mcs_idx() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_tb_t.mcs_idx)
  return _internal_mcs_idx();
}
inline void srsran_dci_tb_t::_internal_set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mcs_idx_ = value;
}
inline void srsran_dci_tb_t::set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mcs_idx(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_tb_t.mcs_idx)
}

// int32 rv = 2;
inline void srsran_dci_tb_t::clear_rv() {
  rv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_tb_t::_internal_rv() const {
  return rv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_tb_t::rv() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_tb_t.rv)
  return _internal_rv();
}
inline void srsran_dci_tb_t::_internal_set_rv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rv_ = value;
}
inline void srsran_dci_tb_t::set_rv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rv(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_tb_t.rv)
}

// bool ndi = 3;
inline void srsran_dci_tb_t::clear_ndi() {
  ndi_ = false;
}
inline bool srsran_dci_tb_t::_internal_ndi() const {
  return ndi_;
}
inline bool srsran_dci_tb_t::ndi() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_tb_t.ndi)
  return _internal_ndi();
}
inline void srsran_dci_tb_t::_internal_set_ndi(bool value) {
  
  ndi_ = value;
}
inline void srsran_dci_tb_t::set_ndi(bool value) {
  _internal_set_ndi(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_tb_t.ndi)
}

// uint32 cw_idx = 4;
inline void srsran_dci_tb_t::clear_cw_idx() {
  cw_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_tb_t::_internal_cw_idx() const {
  return cw_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_tb_t::cw_idx() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_tb_t.cw_idx)
  return _internal_cw_idx();
}
inline void srsran_dci_tb_t::_internal_set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cw_idx_ = value;
}
inline void srsran_dci_tb_t::set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cw_idx(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_tb_t.cw_idx)
}

// -------------------------------------------------------------------

// srsran_dci_location_t

// uint32 L = 1;
inline void srsran_dci_location_t::clear_l() {
  l_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_location_t::_internal_l() const {
  return l_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_location_t::l() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_location_t.L)
  return _internal_l();
}
inline void srsran_dci_location_t::_internal_set_l(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l_ = value;
}
inline void srsran_dci_location_t::set_l(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_location_t.L)
}

// uint32 ncce = 2;
inline void srsran_dci_location_t::clear_ncce() {
  ncce_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_location_t::_internal_ncce() const {
  return ncce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_location_t::ncce() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_location_t.ncce)
  return _internal_ncce();
}
inline void srsran_dci_location_t::_internal_set_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ncce_ = value;
}
inline void srsran_dci_location_t::set_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ncce(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_location_t.ncce)
}

// -------------------------------------------------------------------

// srsran_dci_dl_t

// bool tb_cw_swap = 1;
inline void srsran_dci_dl_t::clear_tb_cw_swap() {
  tb_cw_swap_ = false;
}
inline bool srsran_dci_dl_t::_internal_tb_cw_swap() const {
  return tb_cw_swap_;
}
inline bool srsran_dci_dl_t::tb_cw_swap() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.tb_cw_swap)
  return _internal_tb_cw_swap();
}
inline void srsran_dci_dl_t::_internal_set_tb_cw_swap(bool value) {
  
  tb_cw_swap_ = value;
}
inline void srsran_dci_dl_t::set_tb_cw_swap(bool value) {
  _internal_set_tb_cw_swap(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.tb_cw_swap)
}

// bool pconf = 2;
inline void srsran_dci_dl_t::clear_pconf() {
  pconf_ = false;
}
inline bool srsran_dci_dl_t::_internal_pconf() const {
  return pconf_;
}
inline bool srsran_dci_dl_t::pconf() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.pconf)
  return _internal_pconf();
}
inline void srsran_dci_dl_t::_internal_set_pconf(bool value) {
  
  pconf_ = value;
}
inline void srsran_dci_dl_t::set_pconf(bool value) {
  _internal_set_pconf(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.pconf)
}

// bool power_offset = 3;
inline void srsran_dci_dl_t::clear_power_offset() {
  power_offset_ = false;
}
inline bool srsran_dci_dl_t::_internal_power_offset() const {
  return power_offset_;
}
inline bool srsran_dci_dl_t::power_offset() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.power_offset)
  return _internal_power_offset();
}
inline void srsran_dci_dl_t::_internal_set_power_offset(bool value) {
  
  power_offset_ = value;
}
inline void srsran_dci_dl_t::set_power_offset(bool value) {
  _internal_set_power_offset(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.power_offset)
}

// bool is_ra_order = 4;
inline void srsran_dci_dl_t::clear_is_ra_order() {
  is_ra_order_ = false;
}
inline bool srsran_dci_dl_t::_internal_is_ra_order() const {
  return is_ra_order_;
}
inline bool srsran_dci_dl_t::is_ra_order() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.is_ra_order)
  return _internal_is_ra_order();
}
inline void srsran_dci_dl_t::_internal_set_is_ra_order(bool value) {
  
  is_ra_order_ = value;
}
inline void srsran_dci_dl_t::set_is_ra_order(bool value) {
  _internal_set_is_ra_order(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.is_ra_order)
}

// bool cif_present = 5;
inline void srsran_dci_dl_t::clear_cif_present() {
  cif_present_ = false;
}
inline bool srsran_dci_dl_t::_internal_cif_present() const {
  return cif_present_;
}
inline bool srsran_dci_dl_t::cif_present() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.cif_present)
  return _internal_cif_present();
}
inline void srsran_dci_dl_t::_internal_set_cif_present(bool value) {
  
  cif_present_ = value;
}
inline void srsran_dci_dl_t::set_cif_present(bool value) {
  _internal_set_cif_present(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.cif_present)
}

// bool srs_request = 6;
inline void srsran_dci_dl_t::clear_srs_request() {
  srs_request_ = false;
}
inline bool srsran_dci_dl_t::_internal_srs_request() const {
  return srs_request_;
}
inline bool srsran_dci_dl_t::srs_request() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.srs_request)
  return _internal_srs_request();
}
inline void srsran_dci_dl_t::_internal_set_srs_request(bool value) {
  
  srs_request_ = value;
}
inline void srsran_dci_dl_t::set_srs_request(bool value) {
  _internal_set_srs_request(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.srs_request)
}

// bool srs_request_present = 7;
inline void srsran_dci_dl_t::clear_srs_request_present() {
  srs_request_present_ = false;
}
inline bool srsran_dci_dl_t::_internal_srs_request_present() const {
  return srs_request_present_;
}
inline bool srsran_dci_dl_t::srs_request_present() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.srs_request_present)
  return _internal_srs_request_present();
}
inline void srsran_dci_dl_t::_internal_set_srs_request_present(bool value) {
  
  srs_request_present_ = value;
}
inline void srsran_dci_dl_t::set_srs_request_present(bool value) {
  _internal_set_srs_request_present(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.srs_request_present)
}

// bool is_tdd = 8;
inline void srsran_dci_dl_t::clear_is_tdd() {
  is_tdd_ = false;
}
inline bool srsran_dci_dl_t::_internal_is_tdd() const {
  return is_tdd_;
}
inline bool srsran_dci_dl_t::is_tdd() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.is_tdd)
  return _internal_is_tdd();
}
inline void srsran_dci_dl_t::_internal_set_is_tdd(bool value) {
  
  is_tdd_ = value;
}
inline void srsran_dci_dl_t::set_is_tdd(bool value) {
  _internal_set_is_tdd(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.is_tdd)
}

// bool is_dwpts = 9;
inline void srsran_dci_dl_t::clear_is_dwpts() {
  is_dwpts_ = false;
}
inline bool srsran_dci_dl_t::_internal_is_dwpts() const {
  return is_dwpts_;
}
inline bool srsran_dci_dl_t::is_dwpts() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.is_dwpts)
  return _internal_is_dwpts();
}
inline void srsran_dci_dl_t::_internal_set_is_dwpts(bool value) {
  
  is_dwpts_ = value;
}
inline void srsran_dci_dl_t::set_is_dwpts(bool value) {
  _internal_set_is_dwpts(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.is_dwpts)
}

// bool sram_id = 10;
inline void srsran_dci_dl_t::clear_sram_id() {
  sram_id_ = false;
}
inline bool srsran_dci_dl_t::_internal_sram_id() const {
  return sram_id_;
}
inline bool srsran_dci_dl_t::sram_id() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.sram_id)
  return _internal_sram_id();
}
inline void srsran_dci_dl_t::_internal_set_sram_id(bool value) {
  
  sram_id_ = value;
}
inline void srsran_dci_dl_t::set_sram_id(bool value) {
  _internal_set_sram_id(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.sram_id)
}

// uint32 rnti = 11;
inline void srsran_dci_dl_t::clear_rnti() {
  rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::rnti() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.rnti)
  return _internal_rnti();
}
inline void srsran_dci_dl_t::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rnti_ = value;
}
inline void srsran_dci_dl_t::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.rnti)
}

// uint32 ue_cc_idx = 12;
inline void srsran_dci_dl_t::clear_ue_cc_idx() {
  ue_cc_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_ue_cc_idx() const {
  return ue_cc_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::ue_cc_idx() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.ue_cc_idx)
  return _internal_ue_cc_idx();
}
inline void srsran_dci_dl_t::_internal_set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ue_cc_idx_ = value;
}
inline void srsran_dci_dl_t::set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_cc_idx(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.ue_cc_idx)
}

// uint32 pinfo = 13;
inline void srsran_dci_dl_t::clear_pinfo() {
  pinfo_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_pinfo() const {
  return pinfo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::pinfo() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.pinfo)
  return _internal_pinfo();
}
inline void srsran_dci_dl_t::_internal_set_pinfo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pinfo_ = value;
}
inline void srsran_dci_dl_t::set_pinfo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pinfo(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.pinfo)
}

// uint32 tpc_pucch = 14;
inline void srsran_dci_dl_t::clear_tpc_pucch() {
  tpc_pucch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_tpc_pucch() const {
  return tpc_pucch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::tpc_pucch() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.tpc_pucch)
  return _internal_tpc_pucch();
}
inline void srsran_dci_dl_t::_internal_set_tpc_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tpc_pucch_ = value;
}
inline void srsran_dci_dl_t::set_tpc_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tpc_pucch(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.tpc_pucch)
}

// uint32 ra_preamble = 15;
inline void srsran_dci_dl_t::clear_ra_preamble() {
  ra_preamble_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_ra_preamble() const {
  return ra_preamble_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::ra_preamble() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.ra_preamble)
  return _internal_ra_preamble();
}
inline void srsran_dci_dl_t::_internal_set_ra_preamble(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ra_preamble_ = value;
}
inline void srsran_dci_dl_t::set_ra_preamble(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ra_preamble(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.ra_preamble)
}

// uint32 ra_mask_idx = 16;
inline void srsran_dci_dl_t::clear_ra_mask_idx() {
  ra_mask_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_ra_mask_idx() const {
  return ra_mask_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::ra_mask_idx() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.ra_mask_idx)
  return _internal_ra_mask_idx();
}
inline void srsran_dci_dl_t::_internal_set_ra_mask_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ra_mask_idx_ = value;
}
inline void srsran_dci_dl_t::set_ra_mask_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ra_mask_idx(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.ra_mask_idx)
}

// uint32 cif = 17;
inline void srsran_dci_dl_t::clear_cif() {
  cif_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_cif() const {
  return cif_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::cif() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.cif)
  return _internal_cif();
}
inline void srsran_dci_dl_t::_internal_set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cif_ = value;
}
inline void srsran_dci_dl_t::set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cif(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.cif)
}

// uint32 pid = 18;
inline void srsran_dci_dl_t::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::pid() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.pid)
  return _internal_pid();
}
inline void srsran_dci_dl_t::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void srsran_dci_dl_t::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.pid)
}

// uint32 dai = 19;
inline void srsran_dci_dl_t::clear_dai() {
  dai_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::_internal_dai() const {
  return dai_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_dl_t::dai() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.dai)
  return _internal_dai();
}
inline void srsran_dci_dl_t::_internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dai_ = value;
}
inline void srsran_dci_dl_t::set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dai(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.dai)
}

// int32 format = 20;
inline void srsran_dci_dl_t::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_dl_t::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_dl_t::format() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.format)
  return _internal_format();
}
inline void srsran_dci_dl_t::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void srsran_dci_dl_t::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.format)
}

// .fs.phy_mac.srsran_dci_location_t location = 21;
inline bool srsran_dci_dl_t::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool srsran_dci_dl_t::has_location() const {
  return _internal_has_location();
}
inline void srsran_dci_dl_t::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::fs::phy_mac::srsran_dci_location_t& srsran_dci_dl_t::_internal_location() const {
  const ::fs::phy_mac::srsran_dci_location_t* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_dci_location_t*>(
      &::fs::phy_mac::_srsran_dci_location_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_dci_location_t& srsran_dci_dl_t::location() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.location)
  return _internal_location();
}
inline void srsran_dci_dl_t::unsafe_arena_set_allocated_location(
    ::fs::phy_mac::srsran_dci_location_t* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.phy_mac.srsran_dci_dl_t.location)
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_dl_t::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_dl_t::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:fs.phy_mac.srsran_dci_dl_t.location)
  
  ::fs::phy_mac::srsran_dci_location_t* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_dl_t::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_dci_location_t>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_dl_t::mutable_location() {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.srsran_dci_dl_t.location)
  return _internal_mutable_location();
}
inline void srsran_dci_dl_t::set_allocated_location(::fs::phy_mac::srsran_dci_location_t* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:fs.phy_mac.srsran_dci_dl_t.location)
}

// int32 alloc_type = 22;
inline void srsran_dci_dl_t::clear_alloc_type() {
  alloc_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_dl_t::_internal_alloc_type() const {
  return alloc_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_dl_t::alloc_type() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.alloc_type)
  return _internal_alloc_type();
}
inline void srsran_dci_dl_t::_internal_set_alloc_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alloc_type_ = value;
}
inline void srsran_dci_dl_t::set_alloc_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alloc_type(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_dci_dl_t.alloc_type)
}

// .fs.phy_mac.srsran_ra_type0_t type0_alloc = 23;
inline bool srsran_dci_dl_t::_internal_has_type0_alloc() const {
  return this != internal_default_instance() && type0_alloc_ != nullptr;
}
inline bool srsran_dci_dl_t::has_type0_alloc() const {
  return _internal_has_type0_alloc();
}
inline void srsran_dci_dl_t::clear_type0_alloc() {
  if (GetArena() == nullptr && type0_alloc_ != nullptr) {
    delete type0_alloc_;
  }
  type0_alloc_ = nullptr;
}
inline const ::fs::phy_mac::srsran_ra_type0_t& srsran_dci_dl_t::_internal_type0_alloc() const {
  const ::fs::phy_mac::srsran_ra_type0_t* p = type0_alloc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_ra_type0_t*>(
      &::fs::phy_mac::_srsran_ra_type0_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_ra_type0_t& srsran_dci_dl_t::type0_alloc() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.type0_alloc)
  return _internal_type0_alloc();
}
inline void srsran_dci_dl_t::unsafe_arena_set_allocated_type0_alloc(
    ::fs::phy_mac::srsran_ra_type0_t* type0_alloc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type0_alloc_);
  }
  type0_alloc_ = type0_alloc;
  if (type0_alloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.phy_mac.srsran_dci_dl_t.type0_alloc)
}
inline ::fs::phy_mac::srsran_ra_type0_t* srsran_dci_dl_t::release_type0_alloc() {
  auto temp = unsafe_arena_release_type0_alloc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type0_t* srsran_dci_dl_t::unsafe_arena_release_type0_alloc() {
  // @@protoc_insertion_point(field_release:fs.phy_mac.srsran_dci_dl_t.type0_alloc)
  
  ::fs::phy_mac::srsran_ra_type0_t* temp = type0_alloc_;
  type0_alloc_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type0_t* srsran_dci_dl_t::_internal_mutable_type0_alloc() {
  
  if (type0_alloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_ra_type0_t>(GetArena());
    type0_alloc_ = p;
  }
  return type0_alloc_;
}
inline ::fs::phy_mac::srsran_ra_type0_t* srsran_dci_dl_t::mutable_type0_alloc() {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.srsran_dci_dl_t.type0_alloc)
  return _internal_mutable_type0_alloc();
}
inline void srsran_dci_dl_t::set_allocated_type0_alloc(::fs::phy_mac::srsran_ra_type0_t* type0_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type0_alloc_;
  }
  if (type0_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type0_alloc);
    if (message_arena != submessage_arena) {
      type0_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type0_alloc, submessage_arena);
    }
    
  } else {
    
  }
  type0_alloc_ = type0_alloc;
  // @@protoc_insertion_point(field_set_allocated:fs.phy_mac.srsran_dci_dl_t.type0_alloc)
}

// .fs.phy_mac.srsran_ra_type1_t type1_alloc = 24;
inline bool srsran_dci_dl_t::_internal_has_type1_alloc() const {
  return this != internal_default_instance() && type1_alloc_ != nullptr;
}
inline bool srsran_dci_dl_t::has_type1_alloc() const {
  return _internal_has_type1_alloc();
}
inline void srsran_dci_dl_t::clear_type1_alloc() {
  if (GetArena() == nullptr && type1_alloc_ != nullptr) {
    delete type1_alloc_;
  }
  type1_alloc_ = nullptr;
}
inline const ::fs::phy_mac::srsran_ra_type1_t& srsran_dci_dl_t::_internal_type1_alloc() const {
  const ::fs::phy_mac::srsran_ra_type1_t* p = type1_alloc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_ra_type1_t*>(
      &::fs::phy_mac::_srsran_ra_type1_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_ra_type1_t& srsran_dci_dl_t::type1_alloc() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.type1_alloc)
  return _internal_type1_alloc();
}
inline void srsran_dci_dl_t::unsafe_arena_set_allocated_type1_alloc(
    ::fs::phy_mac::srsran_ra_type1_t* type1_alloc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type1_alloc_);
  }
  type1_alloc_ = type1_alloc;
  if (type1_alloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.phy_mac.srsran_dci_dl_t.type1_alloc)
}
inline ::fs::phy_mac::srsran_ra_type1_t* srsran_dci_dl_t::release_type1_alloc() {
  auto temp = unsafe_arena_release_type1_alloc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type1_t* srsran_dci_dl_t::unsafe_arena_release_type1_alloc() {
  // @@protoc_insertion_point(field_release:fs.phy_mac.srsran_dci_dl_t.type1_alloc)
  
  ::fs::phy_mac::srsran_ra_type1_t* temp = type1_alloc_;
  type1_alloc_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type1_t* srsran_dci_dl_t::_internal_mutable_type1_alloc() {
  
  if (type1_alloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_ra_type1_t>(GetArena());
    type1_alloc_ = p;
  }
  return type1_alloc_;
}
inline ::fs::phy_mac::srsran_ra_type1_t* srsran_dci_dl_t::mutable_type1_alloc() {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.srsran_dci_dl_t.type1_alloc)
  return _internal_mutable_type1_alloc();
}
inline void srsran_dci_dl_t::set_allocated_type1_alloc(::fs::phy_mac::srsran_ra_type1_t* type1_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type1_alloc_;
  }
  if (type1_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type1_alloc);
    if (message_arena != submessage_arena) {
      type1_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type1_alloc, submessage_arena);
    }
    
  } else {
    
  }
  type1_alloc_ = type1_alloc;
  // @@protoc_insertion_point(field_set_allocated:fs.phy_mac.srsran_dci_dl_t.type1_alloc)
}

// .fs.phy_mac.srsran_ra_type2_t type2_alloc = 25;
inline bool srsran_dci_dl_t::_internal_has_type2_alloc() const {
  return this != internal_default_instance() && type2_alloc_ != nullptr;
}
inline bool srsran_dci_dl_t::has_type2_alloc() const {
  return _internal_has_type2_alloc();
}
inline void srsran_dci_dl_t::clear_type2_alloc() {
  if (GetArena() == nullptr && type2_alloc_ != nullptr) {
    delete type2_alloc_;
  }
  type2_alloc_ = nullptr;
}
inline const ::fs::phy_mac::srsran_ra_type2_t& srsran_dci_dl_t::_internal_type2_alloc() const {
  const ::fs::phy_mac::srsran_ra_type2_t* p = type2_alloc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_ra_type2_t*>(
      &::fs::phy_mac::_srsran_ra_type2_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_ra_type2_t& srsran_dci_dl_t::type2_alloc() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.type2_alloc)
  return _internal_type2_alloc();
}
inline void srsran_dci_dl_t::unsafe_arena_set_allocated_type2_alloc(
    ::fs::phy_mac::srsran_ra_type2_t* type2_alloc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type2_alloc_);
  }
  type2_alloc_ = type2_alloc;
  if (type2_alloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.phy_mac.srsran_dci_dl_t.type2_alloc)
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_dl_t::release_type2_alloc() {
  auto temp = unsafe_arena_release_type2_alloc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_dl_t::unsafe_arena_release_type2_alloc() {
  // @@protoc_insertion_point(field_release:fs.phy_mac.srsran_dci_dl_t.type2_alloc)
  
  ::fs::phy_mac::srsran_ra_type2_t* temp = type2_alloc_;
  type2_alloc_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_dl_t::_internal_mutable_type2_alloc() {
  
  if (type2_alloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_ra_type2_t>(GetArena());
    type2_alloc_ = p;
  }
  return type2_alloc_;
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_dl_t::mutable_type2_alloc() {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.srsran_dci_dl_t.type2_alloc)
  return _internal_mutable_type2_alloc();
}
inline void srsran_dci_dl_t::set_allocated_type2_alloc(::fs::phy_mac::srsran_ra_type2_t* type2_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type2_alloc_;
  }
  if (type2_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type2_alloc);
    if (message_arena != submessage_arena) {
      type2_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type2_alloc, submessage_arena);
    }
    
  } else {
    
  }
  type2_alloc_ = type2_alloc;
  // @@protoc_insertion_point(field_set_allocated:fs.phy_mac.srsran_dci_dl_t.type2_alloc)
}

// repeated .fs.phy_mac.srsran_dci_tb_t tb = 26;
inline int srsran_dci_dl_t::_internal_tb_size() const {
  return tb_.size();
}
inline int srsran_dci_dl_t::tb_size() const {
  return _internal_tb_size();
}
inline void srsran_dci_dl_t::clear_tb() {
  tb_.Clear();
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_dl_t::mutable_tb(int index) {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.srsran_dci_dl_t.tb)
  return tb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_dci_tb_t >*
srsran_dci_dl_t::mutable_tb() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.srsran_dci_dl_t.tb)
  return &tb_;
}
inline const ::fs::phy_mac::srsran_dci_tb_t& srsran_dci_dl_t::_internal_tb(int index) const {
  return tb_.Get(index);
}
inline const ::fs::phy_mac::srsran_dci_tb_t& srsran_dci_dl_t::tb(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_dci_dl_t.tb)
  return _internal_tb(index);
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_dl_t::_internal_add_tb() {
  return tb_.Add();
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_dl_t::add_tb() {
  // @@protoc_insertion_point(field_add:fs.phy_mac.srsran_dci_dl_t.tb)
  return _internal_add_tb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_dci_tb_t >&
srsran_dci_dl_t::tb() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.srsran_dci_dl_t.tb)
  return tb_;
}

// -------------------------------------------------------------------

// raw_buffer

// bytes data = 1;
inline void raw_buffer::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& raw_buffer::data() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.raw_buffer.data)
  return _internal_data();
}
inline void raw_buffer::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.raw_buffer.data)
}
inline std::string* raw_buffer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.raw_buffer.data)
  return _internal_mutable_data();
}
inline const std::string& raw_buffer::_internal_data() const {
  return data_.Get();
}
inline void raw_buffer::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void raw_buffer::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fs.phy_mac.raw_buffer.data)
}
inline void raw_buffer::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fs.phy_mac.raw_buffer.data)
}
inline void raw_buffer::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fs.phy_mac.raw_buffer.data)
}
inline std::string* raw_buffer::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* raw_buffer::release_data() {
  // @@protoc_insertion_point(field_release:fs.phy_mac.raw_buffer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void raw_buffer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fs.phy_mac.raw_buffer.data)
}
inline std::string* raw_buffer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fs.phy_mac.raw_buffer.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void raw_buffer::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.phy_mac.raw_buffer.data)
}

// -------------------------------------------------------------------

// srsran_softbuffer_tx_t

// uint32 max_cb = 1;
inline void srsran_softbuffer_tx_t::clear_max_cb() {
  max_cb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::_internal_max_cb() const {
  return max_cb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::max_cb() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_softbuffer_tx_t.max_cb)
  return _internal_max_cb();
}
inline void srsran_softbuffer_tx_t::_internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_ = value;
}
inline void srsran_softbuffer_tx_t::set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_softbuffer_tx_t.max_cb)
}

// uint32 max_cb_size = 2;
inline void srsran_softbuffer_tx_t::clear_max_cb_size() {
  max_cb_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::_internal_max_cb_size() const {
  return max_cb_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::max_cb_size() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_softbuffer_tx_t.max_cb_size)
  return _internal_max_cb_size();
}
inline void srsran_softbuffer_tx_t::_internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_size_ = value;
}
inline void srsran_softbuffer_tx_t::set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb_size(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.srsran_softbuffer_tx_t.max_cb_size)
}

// repeated .fs.phy_mac.raw_buffer buffer_b = 3;
inline int srsran_softbuffer_tx_t::_internal_buffer_b_size() const {
  return buffer_b_.size();
}
inline int srsran_softbuffer_tx_t::buffer_b_size() const {
  return _internal_buffer_b_size();
}
inline void srsran_softbuffer_tx_t::clear_buffer_b() {
  buffer_b_.Clear();
}
inline ::fs::phy_mac::raw_buffer* srsran_softbuffer_tx_t::mutable_buffer_b(int index) {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.srsran_softbuffer_tx_t.buffer_b)
  return buffer_b_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::raw_buffer >*
srsran_softbuffer_tx_t::mutable_buffer_b() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.srsran_softbuffer_tx_t.buffer_b)
  return &buffer_b_;
}
inline const ::fs::phy_mac::raw_buffer& srsran_softbuffer_tx_t::_internal_buffer_b(int index) const {
  return buffer_b_.Get(index);
}
inline const ::fs::phy_mac::raw_buffer& srsran_softbuffer_tx_t::buffer_b(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.srsran_softbuffer_tx_t.buffer_b)
  return _internal_buffer_b(index);
}
inline ::fs::phy_mac::raw_buffer* srsran_softbuffer_tx_t::_internal_add_buffer_b() {
  return buffer_b_.Add();
}
inline ::fs::phy_mac::raw_buffer* srsran_softbuffer_tx_t::add_buffer_b() {
  // @@protoc_insertion_point(field_add:fs.phy_mac.srsran_softbuffer_tx_t.buffer_b)
  return _internal_add_buffer_b();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::raw_buffer >&
srsran_softbuffer_tx_t::buffer_b() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.srsran_softbuffer_tx_t.buffer_b)
  return buffer_b_;
}

// -------------------------------------------------------------------

// dl_sched_grant_t

// .fs.phy_mac.srsran_dci_dl_t dci = 1;
inline bool dl_sched_grant_t::_internal_has_dci() const {
  return this != internal_default_instance() && dci_ != nullptr;
}
inline bool dl_sched_grant_t::has_dci() const {
  return _internal_has_dci();
}
inline void dl_sched_grant_t::clear_dci() {
  if (GetArena() == nullptr && dci_ != nullptr) {
    delete dci_;
  }
  dci_ = nullptr;
}
inline const ::fs::phy_mac::srsran_dci_dl_t& dl_sched_grant_t::_internal_dci() const {
  const ::fs::phy_mac::srsran_dci_dl_t* p = dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_dci_dl_t*>(
      &::fs::phy_mac::_srsran_dci_dl_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_dci_dl_t& dl_sched_grant_t::dci() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_grant_t.dci)
  return _internal_dci();
}
inline void dl_sched_grant_t::unsafe_arena_set_allocated_dci(
    ::fs::phy_mac::srsran_dci_dl_t* dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dci_);
  }
  dci_ = dci;
  if (dci) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.phy_mac.dl_sched_grant_t.dci)
}
inline ::fs::phy_mac::srsran_dci_dl_t* dl_sched_grant_t::release_dci() {
  auto temp = unsafe_arena_release_dci();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_dci_dl_t* dl_sched_grant_t::unsafe_arena_release_dci() {
  // @@protoc_insertion_point(field_release:fs.phy_mac.dl_sched_grant_t.dci)
  
  ::fs::phy_mac::srsran_dci_dl_t* temp = dci_;
  dci_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_dci_dl_t* dl_sched_grant_t::_internal_mutable_dci() {
  
  if (dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_dci_dl_t>(GetArena());
    dci_ = p;
  }
  return dci_;
}
inline ::fs::phy_mac::srsran_dci_dl_t* dl_sched_grant_t::mutable_dci() {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.dl_sched_grant_t.dci)
  return _internal_mutable_dci();
}
inline void dl_sched_grant_t::set_allocated_dci(::fs::phy_mac::srsran_dci_dl_t* dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dci_;
  }
  if (dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dci);
    if (message_arena != submessage_arena) {
      dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dci, submessage_arena);
    }
    
  } else {
    
  }
  dci_ = dci;
  // @@protoc_insertion_point(field_set_allocated:fs.phy_mac.dl_sched_grant_t.dci)
}

// repeated bytes data = 2;
inline int dl_sched_grant_t::_internal_data_size() const {
  return data_.size();
}
inline int dl_sched_grant_t::data_size() const {
  return _internal_data_size();
}
inline void dl_sched_grant_t::clear_data() {
  data_.Clear();
}
inline std::string* dl_sched_grant_t::add_data() {
  // @@protoc_insertion_point(field_add_mutable:fs.phy_mac.dl_sched_grant_t.data)
  return _internal_add_data();
}
inline const std::string& dl_sched_grant_t::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& dl_sched_grant_t::data(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_grant_t.data)
  return _internal_data(index);
}
inline std::string* dl_sched_grant_t::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.dl_sched_grant_t.data)
  return data_.Mutable(index);
}
inline void dl_sched_grant_t::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fs.phy_mac.dl_sched_grant_t.data)
  data_.Mutable(index)->assign(value);
}
inline void dl_sched_grant_t::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fs.phy_mac.dl_sched_grant_t.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void dl_sched_grant_t::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fs.phy_mac.dl_sched_grant_t.data)
}
inline void dl_sched_grant_t::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fs.phy_mac.dl_sched_grant_t.data)
}
inline std::string* dl_sched_grant_t::_internal_add_data() {
  return data_.Add();
}
inline void dl_sched_grant_t::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fs.phy_mac.dl_sched_grant_t.data)
}
inline void dl_sched_grant_t::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fs.phy_mac.dl_sched_grant_t.data)
}
inline void dl_sched_grant_t::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fs.phy_mac.dl_sched_grant_t.data)
}
inline void dl_sched_grant_t::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fs.phy_mac.dl_sched_grant_t.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
dl_sched_grant_t::data() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.dl_sched_grant_t.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
dl_sched_grant_t::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.dl_sched_grant_t.data)
  return &data_;
}

// repeated .fs.phy_mac.srsran_softbuffer_tx_t softbuffer_tx = 3;
inline int dl_sched_grant_t::_internal_softbuffer_tx_size() const {
  return softbuffer_tx_.size();
}
inline int dl_sched_grant_t::softbuffer_tx_size() const {
  return _internal_softbuffer_tx_size();
}
inline void dl_sched_grant_t::clear_softbuffer_tx() {
  softbuffer_tx_.Clear();
}
inline ::fs::phy_mac::srsran_softbuffer_tx_t* dl_sched_grant_t::mutable_softbuffer_tx(int index) {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.dl_sched_grant_t.softbuffer_tx)
  return softbuffer_tx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_softbuffer_tx_t >*
dl_sched_grant_t::mutable_softbuffer_tx() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.dl_sched_grant_t.softbuffer_tx)
  return &softbuffer_tx_;
}
inline const ::fs::phy_mac::srsran_softbuffer_tx_t& dl_sched_grant_t::_internal_softbuffer_tx(int index) const {
  return softbuffer_tx_.Get(index);
}
inline const ::fs::phy_mac::srsran_softbuffer_tx_t& dl_sched_grant_t::softbuffer_tx(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_grant_t.softbuffer_tx)
  return _internal_softbuffer_tx(index);
}
inline ::fs::phy_mac::srsran_softbuffer_tx_t* dl_sched_grant_t::_internal_add_softbuffer_tx() {
  return softbuffer_tx_.Add();
}
inline ::fs::phy_mac::srsran_softbuffer_tx_t* dl_sched_grant_t::add_softbuffer_tx() {
  // @@protoc_insertion_point(field_add:fs.phy_mac.dl_sched_grant_t.softbuffer_tx)
  return _internal_add_softbuffer_tx();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::srsran_softbuffer_tx_t >&
dl_sched_grant_t::softbuffer_tx() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.dl_sched_grant_t.softbuffer_tx)
  return softbuffer_tx_;
}

// repeated uint32 data_len = 4;
inline int dl_sched_grant_t::_internal_data_len_size() const {
  return data_len_.size();
}
inline int dl_sched_grant_t::data_len_size() const {
  return _internal_data_len_size();
}
inline void dl_sched_grant_t::clear_data_len() {
  data_len_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dl_sched_grant_t::_internal_data_len(int index) const {
  return data_len_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dl_sched_grant_t::data_len(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_grant_t.data_len)
  return _internal_data_len(index);
}
inline void dl_sched_grant_t::set_data_len(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_len_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.dl_sched_grant_t.data_len)
}
inline void dl_sched_grant_t::_internal_add_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_len_.Add(value);
}
inline void dl_sched_grant_t::add_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data_len(value);
  // @@protoc_insertion_point(field_add:fs.phy_mac.dl_sched_grant_t.data_len)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
dl_sched_grant_t::_internal_data_len() const {
  return data_len_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
dl_sched_grant_t::data_len() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.dl_sched_grant_t.data_len)
  return _internal_data_len();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
dl_sched_grant_t::_internal_mutable_data_len() {
  return &data_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
dl_sched_grant_t::mutable_data_len() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.dl_sched_grant_t.data_len)
  return _internal_mutable_data_len();
}

// -------------------------------------------------------------------

// dl_sched_t

// uint32 cfi = 1;
inline void dl_sched_t::clear_cfi() {
  cfi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dl_sched_t::_internal_cfi() const {
  return cfi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dl_sched_t::cfi() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_t.cfi)
  return _internal_cfi();
}
inline void dl_sched_t::_internal_set_cfi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cfi_ = value;
}
inline void dl_sched_t::set_cfi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cfi(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.dl_sched_t.cfi)
}

// uint32 nof_grants = 2;
inline void dl_sched_t::clear_nof_grants() {
  nof_grants_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dl_sched_t::_internal_nof_grants() const {
  return nof_grants_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dl_sched_t::nof_grants() const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_t.nof_grants)
  return _internal_nof_grants();
}
inline void dl_sched_t::_internal_set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_grants_ = value;
}
inline void dl_sched_t::set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_grants(value);
  // @@protoc_insertion_point(field_set:fs.phy_mac.dl_sched_t.nof_grants)
}

// repeated .fs.phy_mac.dl_sched_grant_t pdsch = 3;
inline int dl_sched_t::_internal_pdsch_size() const {
  return pdsch_.size();
}
inline int dl_sched_t::pdsch_size() const {
  return _internal_pdsch_size();
}
inline void dl_sched_t::clear_pdsch() {
  pdsch_.Clear();
}
inline ::fs::phy_mac::dl_sched_grant_t* dl_sched_t::mutable_pdsch(int index) {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.dl_sched_t.pdsch)
  return pdsch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_grant_t >*
dl_sched_t::mutable_pdsch() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.dl_sched_t.pdsch)
  return &pdsch_;
}
inline const ::fs::phy_mac::dl_sched_grant_t& dl_sched_t::_internal_pdsch(int index) const {
  return pdsch_.Get(index);
}
inline const ::fs::phy_mac::dl_sched_grant_t& dl_sched_t::pdsch(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_t.pdsch)
  return _internal_pdsch(index);
}
inline ::fs::phy_mac::dl_sched_grant_t* dl_sched_t::_internal_add_pdsch() {
  return pdsch_.Add();
}
inline ::fs::phy_mac::dl_sched_grant_t* dl_sched_t::add_pdsch() {
  // @@protoc_insertion_point(field_add:fs.phy_mac.dl_sched_t.pdsch)
  return _internal_add_pdsch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_grant_t >&
dl_sched_t::pdsch() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.dl_sched_t.pdsch)
  return pdsch_;
}

// -------------------------------------------------------------------

// dl_sched_list_t

// repeated .fs.phy_mac.dl_sched_t list = 1;
inline int dl_sched_list_t::_internal_list_size() const {
  return list_.size();
}
inline int dl_sched_list_t::list_size() const {
  return _internal_list_size();
}
inline void dl_sched_list_t::clear_list() {
  list_.Clear();
}
inline ::fs::phy_mac::dl_sched_t* dl_sched_list_t::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.phy_mac.dl_sched_list_t.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_t >*
dl_sched_list_t::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.phy_mac.dl_sched_list_t.list)
  return &list_;
}
inline const ::fs::phy_mac::dl_sched_t& dl_sched_list_t::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::fs::phy_mac::dl_sched_t& dl_sched_list_t::list(int index) const {
  // @@protoc_insertion_point(field_get:fs.phy_mac.dl_sched_list_t.list)
  return _internal_list(index);
}
inline ::fs::phy_mac::dl_sched_t* dl_sched_list_t::_internal_add_list() {
  return list_.Add();
}
inline ::fs::phy_mac::dl_sched_t* dl_sched_list_t::add_list() {
  // @@protoc_insertion_point(field_add:fs.phy_mac.dl_sched_list_t.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::phy_mac::dl_sched_t >&
dl_sched_list_t::list() const {
  // @@protoc_insertion_point(field_list:fs.phy_mac.dl_sched_list_t.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phy_mac
}  // namespace fs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_phy_5fmac_2eproto
