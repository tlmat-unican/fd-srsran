// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rlc_config_t.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rlc_5fconfig_5ft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rlc_5fconfig_5ft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rlc_5fconfig_5ft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rlc_5fconfig_5ft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rlc_5fconfig_5ft_2eproto;
namespace fs {
namespace rlc {
class rlc_am_config_t;
class rlc_am_config_tDefaultTypeInternal;
extern rlc_am_config_tDefaultTypeInternal _rlc_am_config_t_default_instance_;
class rlc_config_t;
class rlc_config_tDefaultTypeInternal;
extern rlc_config_tDefaultTypeInternal _rlc_config_t_default_instance_;
class rlc_um_config_t;
class rlc_um_config_tDefaultTypeInternal;
extern rlc_um_config_tDefaultTypeInternal _rlc_um_config_t_default_instance_;
class rlc_um_nr_config_t;
class rlc_um_nr_config_tDefaultTypeInternal;
extern rlc_um_nr_config_tDefaultTypeInternal _rlc_um_nr_config_t_default_instance_;
}  // namespace rlc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::rlc::rlc_am_config_t* Arena::CreateMaybeMessage<::fs::rlc::rlc_am_config_t>(Arena*);
template<> ::fs::rlc::rlc_config_t* Arena::CreateMaybeMessage<::fs::rlc::rlc_config_t>(Arena*);
template<> ::fs::rlc::rlc_um_config_t* Arena::CreateMaybeMessage<::fs::rlc::rlc_um_config_t>(Arena*);
template<> ::fs::rlc::rlc_um_nr_config_t* Arena::CreateMaybeMessage<::fs::rlc::rlc_um_nr_config_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {
namespace rlc {

enum srsran_rat_t : int {
  lte = 0,
  nr = 1,
  rat_nulltype = 2,
  srsran_rat_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_rat_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_rat_t_IsValid(int value);
constexpr srsran_rat_t srsran_rat_t_MIN = lte;
constexpr srsran_rat_t srsran_rat_t_MAX = rat_nulltype;
constexpr int srsran_rat_t_ARRAYSIZE = srsran_rat_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_rat_t_descriptor();
template<typename T>
inline const std::string& srsran_rat_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_rat_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_rat_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_rat_t_descriptor(), enum_t_value);
}
inline bool srsran_rat_t_Parse(
    const std::string& name, srsran_rat_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_rat_t>(
    srsran_rat_t_descriptor(), name, value);
}
enum rlc_mode_t : int {
  tm = 0,
  um = 1,
  am = 2,
  mode_nulltype = 3,
  rlc_mode_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  rlc_mode_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool rlc_mode_t_IsValid(int value);
constexpr rlc_mode_t rlc_mode_t_MIN = tm;
constexpr rlc_mode_t rlc_mode_t_MAX = mode_nulltype;
constexpr int rlc_mode_t_ARRAYSIZE = rlc_mode_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rlc_mode_t_descriptor();
template<typename T>
inline const std::string& rlc_mode_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, rlc_mode_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function rlc_mode_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    rlc_mode_t_descriptor(), enum_t_value);
}
inline bool rlc_mode_t_Parse(
    const std::string& name, rlc_mode_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<rlc_mode_t>(
    rlc_mode_t_descriptor(), name, value);
}
enum rlc_umd_sn_size_t : int {
  size5bits = 0,
  size10bits = 1,
  umd_nulltype = 2,
  rlc_umd_sn_size_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  rlc_umd_sn_size_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool rlc_umd_sn_size_t_IsValid(int value);
constexpr rlc_umd_sn_size_t rlc_umd_sn_size_t_MIN = size5bits;
constexpr rlc_umd_sn_size_t rlc_umd_sn_size_t_MAX = umd_nulltype;
constexpr int rlc_umd_sn_size_t_ARRAYSIZE = rlc_umd_sn_size_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rlc_umd_sn_size_t_descriptor();
template<typename T>
inline const std::string& rlc_umd_sn_size_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, rlc_umd_sn_size_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function rlc_umd_sn_size_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    rlc_umd_sn_size_t_descriptor(), enum_t_value);
}
inline bool rlc_umd_sn_size_t_Parse(
    const std::string& name, rlc_umd_sn_size_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<rlc_umd_sn_size_t>(
    rlc_umd_sn_size_t_descriptor(), name, value);
}
enum rlc_um_nr_sn_size_t : int {
  size6bits = 0,
  size12bits = 1,
  um_nulltype = 2,
  rlc_um_nr_sn_size_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  rlc_um_nr_sn_size_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool rlc_um_nr_sn_size_t_IsValid(int value);
constexpr rlc_um_nr_sn_size_t rlc_um_nr_sn_size_t_MIN = size6bits;
constexpr rlc_um_nr_sn_size_t rlc_um_nr_sn_size_t_MAX = um_nulltype;
constexpr int rlc_um_nr_sn_size_t_ARRAYSIZE = rlc_um_nr_sn_size_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rlc_um_nr_sn_size_t_descriptor();
template<typename T>
inline const std::string& rlc_um_nr_sn_size_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, rlc_um_nr_sn_size_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function rlc_um_nr_sn_size_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    rlc_um_nr_sn_size_t_descriptor(), enum_t_value);
}
inline bool rlc_um_nr_sn_size_t_Parse(
    const std::string& name, rlc_um_nr_sn_size_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<rlc_um_nr_sn_size_t>(
    rlc_um_nr_sn_size_t_descriptor(), name, value);
}
// ===================================================================

class rlc_config_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.rlc.rlc_config_t) */ {
 public:
  inline rlc_config_t() : rlc_config_t(nullptr) {};
  virtual ~rlc_config_t();

  rlc_config_t(const rlc_config_t& from);
  rlc_config_t(rlc_config_t&& from) noexcept
    : rlc_config_t() {
    *this = ::std::move(from);
  }

  inline rlc_config_t& operator=(const rlc_config_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline rlc_config_t& operator=(rlc_config_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rlc_config_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rlc_config_t* internal_default_instance() {
    return reinterpret_cast<const rlc_config_t*>(
               &_rlc_config_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rlc_config_t& a, rlc_config_t& b) {
    a.Swap(&b);
  }
  inline void Swap(rlc_config_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rlc_config_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rlc_config_t* New() const final {
    return CreateMaybeMessage<rlc_config_t>(nullptr);
  }

  rlc_config_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rlc_config_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rlc_config_t& from);
  void MergeFrom(const rlc_config_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rlc_config_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.rlc.rlc_config_t";
  }
  protected:
  explicit rlc_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rlc_5fconfig_5ft_2eproto);
    return ::descriptor_table_rlc_5fconfig_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmFieldNumber = 3,
    kUmFieldNumber = 4,
    kUmNrFieldNumber = 5,
    kRatFieldNumber = 1,
    kRlcModeFieldNumber = 2,
    kTxQueueLengthFieldNumber = 6,
  };
  // .fs.rlc.rlc_am_config_t am = 3;
  bool has_am() const;
  private:
  bool _internal_has_am() const;
  public:
  void clear_am();
  const ::fs::rlc::rlc_am_config_t& am() const;
  ::fs::rlc::rlc_am_config_t* release_am();
  ::fs::rlc::rlc_am_config_t* mutable_am();
  void set_allocated_am(::fs::rlc::rlc_am_config_t* am);
  private:
  const ::fs::rlc::rlc_am_config_t& _internal_am() const;
  ::fs::rlc::rlc_am_config_t* _internal_mutable_am();
  public:
  void unsafe_arena_set_allocated_am(
      ::fs::rlc::rlc_am_config_t* am);
  ::fs::rlc::rlc_am_config_t* unsafe_arena_release_am();

  // .fs.rlc.rlc_um_config_t um = 4;
  bool has_um() const;
  private:
  bool _internal_has_um() const;
  public:
  void clear_um();
  const ::fs::rlc::rlc_um_config_t& um() const;
  ::fs::rlc::rlc_um_config_t* release_um();
  ::fs::rlc::rlc_um_config_t* mutable_um();
  void set_allocated_um(::fs::rlc::rlc_um_config_t* um);
  private:
  const ::fs::rlc::rlc_um_config_t& _internal_um() const;
  ::fs::rlc::rlc_um_config_t* _internal_mutable_um();
  public:
  void unsafe_arena_set_allocated_um(
      ::fs::rlc::rlc_um_config_t* um);
  ::fs::rlc::rlc_um_config_t* unsafe_arena_release_um();

  // .fs.rlc.rlc_um_nr_config_t um_nr = 5;
  bool has_um_nr() const;
  private:
  bool _internal_has_um_nr() const;
  public:
  void clear_um_nr();
  const ::fs::rlc::rlc_um_nr_config_t& um_nr() const;
  ::fs::rlc::rlc_um_nr_config_t* release_um_nr();
  ::fs::rlc::rlc_um_nr_config_t* mutable_um_nr();
  void set_allocated_um_nr(::fs::rlc::rlc_um_nr_config_t* um_nr);
  private:
  const ::fs::rlc::rlc_um_nr_config_t& _internal_um_nr() const;
  ::fs::rlc::rlc_um_nr_config_t* _internal_mutable_um_nr();
  public:
  void unsafe_arena_set_allocated_um_nr(
      ::fs::rlc::rlc_um_nr_config_t* um_nr);
  ::fs::rlc::rlc_um_nr_config_t* unsafe_arena_release_um_nr();

  // .fs.rlc.srsran_rat_t rat = 1;
  void clear_rat();
  ::fs::rlc::srsran_rat_t rat() const;
  void set_rat(::fs::rlc::srsran_rat_t value);
  private:
  ::fs::rlc::srsran_rat_t _internal_rat() const;
  void _internal_set_rat(::fs::rlc::srsran_rat_t value);
  public:

  // .fs.rlc.rlc_mode_t rlc_mode = 2;
  void clear_rlc_mode();
  ::fs::rlc::rlc_mode_t rlc_mode() const;
  void set_rlc_mode(::fs::rlc::rlc_mode_t value);
  private:
  ::fs::rlc::rlc_mode_t _internal_rlc_mode() const;
  void _internal_set_rlc_mode(::fs::rlc::rlc_mode_t value);
  public:

  // uint32 tx_queue_length = 6;
  void clear_tx_queue_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_queue_length() const;
  void set_tx_queue_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_queue_length() const;
  void _internal_set_tx_queue_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.rlc.rlc_config_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::rlc::rlc_am_config_t* am_;
  ::fs::rlc::rlc_um_config_t* um_;
  ::fs::rlc::rlc_um_nr_config_t* um_nr_;
  int rat_;
  int rlc_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_queue_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rlc_5fconfig_5ft_2eproto;
};
// -------------------------------------------------------------------

class rlc_am_config_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.rlc.rlc_am_config_t) */ {
 public:
  inline rlc_am_config_t() : rlc_am_config_t(nullptr) {};
  virtual ~rlc_am_config_t();

  rlc_am_config_t(const rlc_am_config_t& from);
  rlc_am_config_t(rlc_am_config_t&& from) noexcept
    : rlc_am_config_t() {
    *this = ::std::move(from);
  }

  inline rlc_am_config_t& operator=(const rlc_am_config_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline rlc_am_config_t& operator=(rlc_am_config_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rlc_am_config_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rlc_am_config_t* internal_default_instance() {
    return reinterpret_cast<const rlc_am_config_t*>(
               &_rlc_am_config_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(rlc_am_config_t& a, rlc_am_config_t& b) {
    a.Swap(&b);
  }
  inline void Swap(rlc_am_config_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rlc_am_config_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rlc_am_config_t* New() const final {
    return CreateMaybeMessage<rlc_am_config_t>(nullptr);
  }

  rlc_am_config_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rlc_am_config_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rlc_am_config_t& from);
  void MergeFrom(const rlc_am_config_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rlc_am_config_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.rlc.rlc_am_config_t";
  }
  protected:
  explicit rlc_am_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rlc_5fconfig_5ft_2eproto);
    return ::descriptor_table_rlc_5fconfig_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTPollRetxFieldNumber = 1,
    kPollPduFieldNumber = 2,
    kPollByteFieldNumber = 3,
    kMaxRetxThreshFieldNumber = 4,
    kTReorderingFieldNumber = 5,
    kTStatusProhibitFieldNumber = 6,
  };
  // uint32 t_poll_retx = 1;
  void clear_t_poll_retx();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_poll_retx() const;
  void set_t_poll_retx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_poll_retx() const;
  void _internal_set_t_poll_retx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 poll_pdu = 2;
  void clear_poll_pdu();
  ::PROTOBUF_NAMESPACE_ID::uint32 poll_pdu() const;
  void set_poll_pdu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_poll_pdu() const;
  void _internal_set_poll_pdu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 poll_byte = 3;
  void clear_poll_byte();
  ::PROTOBUF_NAMESPACE_ID::uint32 poll_byte() const;
  void set_poll_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_poll_byte() const;
  void _internal_set_poll_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_retx_thresh = 4;
  void clear_max_retx_thresh();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_retx_thresh() const;
  void set_max_retx_thresh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_retx_thresh() const;
  void _internal_set_max_retx_thresh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 t_reordering = 5;
  void clear_t_reordering();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_reordering() const;
  void set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_reordering() const;
  void _internal_set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 t_status_prohibit = 6;
  void clear_t_status_prohibit();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_status_prohibit() const;
  void set_t_status_prohibit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_status_prohibit() const;
  void _internal_set_t_status_prohibit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.rlc.rlc_am_config_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_poll_retx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poll_pdu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poll_byte_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_retx_thresh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_reordering_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_status_prohibit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rlc_5fconfig_5ft_2eproto;
};
// -------------------------------------------------------------------

class rlc_um_config_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.rlc.rlc_um_config_t) */ {
 public:
  inline rlc_um_config_t() : rlc_um_config_t(nullptr) {};
  virtual ~rlc_um_config_t();

  rlc_um_config_t(const rlc_um_config_t& from);
  rlc_um_config_t(rlc_um_config_t&& from) noexcept
    : rlc_um_config_t() {
    *this = ::std::move(from);
  }

  inline rlc_um_config_t& operator=(const rlc_um_config_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline rlc_um_config_t& operator=(rlc_um_config_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rlc_um_config_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rlc_um_config_t* internal_default_instance() {
    return reinterpret_cast<const rlc_um_config_t*>(
               &_rlc_um_config_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(rlc_um_config_t& a, rlc_um_config_t& b) {
    a.Swap(&b);
  }
  inline void Swap(rlc_um_config_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rlc_um_config_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rlc_um_config_t* New() const final {
    return CreateMaybeMessage<rlc_um_config_t>(nullptr);
  }

  rlc_um_config_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rlc_um_config_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rlc_um_config_t& from);
  void MergeFrom(const rlc_um_config_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rlc_um_config_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.rlc.rlc_um_config_t";
  }
  protected:
  explicit rlc_um_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rlc_5fconfig_5ft_2eproto);
    return ::descriptor_table_rlc_5fconfig_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTReorderingFieldNumber = 1,
    kTxSnFieldLengthFieldNumber = 2,
    kRxSnFieldLengthFieldNumber = 3,
    kRxWindowSizeFieldNumber = 4,
    kRxModFieldNumber = 5,
    kTxModFieldNumber = 6,
    kIsMrbFieldNumber = 7,
  };
  // uint32 t_reordering = 1;
  void clear_t_reordering();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_reordering() const;
  void set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_reordering() const;
  void _internal_set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.rlc.rlc_umd_sn_size_t tx_sn_field_length = 2;
  void clear_tx_sn_field_length();
  ::fs::rlc::rlc_umd_sn_size_t tx_sn_field_length() const;
  void set_tx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value);
  private:
  ::fs::rlc::rlc_umd_sn_size_t _internal_tx_sn_field_length() const;
  void _internal_set_tx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value);
  public:

  // .fs.rlc.rlc_umd_sn_size_t rx_sn_field_length = 3;
  void clear_rx_sn_field_length();
  ::fs::rlc::rlc_umd_sn_size_t rx_sn_field_length() const;
  void set_rx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value);
  private:
  ::fs::rlc::rlc_umd_sn_size_t _internal_rx_sn_field_length() const;
  void _internal_set_rx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value);
  public:

  // uint32 rx_window_size = 4;
  void clear_rx_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_window_size() const;
  void set_rx_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rx_window_size() const;
  void _internal_set_rx_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rx_mod = 5;
  void clear_rx_mod();
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_mod() const;
  void set_rx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rx_mod() const;
  void _internal_set_rx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tx_mod = 6;
  void clear_tx_mod();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_mod() const;
  void set_tx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_mod() const;
  void _internal_set_tx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_mrb = 7;
  void clear_is_mrb();
  bool is_mrb() const;
  void set_is_mrb(bool value);
  private:
  bool _internal_is_mrb() const;
  void _internal_set_is_mrb(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.rlc.rlc_um_config_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_reordering_;
  int tx_sn_field_length_;
  int rx_sn_field_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_window_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_mod_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_mod_;
  bool is_mrb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rlc_5fconfig_5ft_2eproto;
};
// -------------------------------------------------------------------

class rlc_um_nr_config_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.rlc.rlc_um_nr_config_t) */ {
 public:
  inline rlc_um_nr_config_t() : rlc_um_nr_config_t(nullptr) {};
  virtual ~rlc_um_nr_config_t();

  rlc_um_nr_config_t(const rlc_um_nr_config_t& from);
  rlc_um_nr_config_t(rlc_um_nr_config_t&& from) noexcept
    : rlc_um_nr_config_t() {
    *this = ::std::move(from);
  }

  inline rlc_um_nr_config_t& operator=(const rlc_um_nr_config_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline rlc_um_nr_config_t& operator=(rlc_um_nr_config_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rlc_um_nr_config_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rlc_um_nr_config_t* internal_default_instance() {
    return reinterpret_cast<const rlc_um_nr_config_t*>(
               &_rlc_um_nr_config_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(rlc_um_nr_config_t& a, rlc_um_nr_config_t& b) {
    a.Swap(&b);
  }
  inline void Swap(rlc_um_nr_config_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rlc_um_nr_config_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rlc_um_nr_config_t* New() const final {
    return CreateMaybeMessage<rlc_um_nr_config_t>(nullptr);
  }

  rlc_um_nr_config_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rlc_um_nr_config_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rlc_um_nr_config_t& from);
  void MergeFrom(const rlc_um_nr_config_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rlc_um_nr_config_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.rlc.rlc_um_nr_config_t";
  }
  protected:
  explicit rlc_um_nr_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rlc_5fconfig_5ft_2eproto);
    return ::descriptor_table_rlc_5fconfig_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldLengthFieldNumber = 1,
    kUMWindowSizeFieldNumber = 2,
    kModFieldNumber = 3,
    kTReassemblyMsFieldNumber = 4,
  };
  // .fs.rlc.rlc_um_nr_sn_size_t sn_field_length = 1;
  void clear_sn_field_length();
  ::fs::rlc::rlc_um_nr_sn_size_t sn_field_length() const;
  void set_sn_field_length(::fs::rlc::rlc_um_nr_sn_size_t value);
  private:
  ::fs::rlc::rlc_um_nr_sn_size_t _internal_sn_field_length() const;
  void _internal_set_sn_field_length(::fs::rlc::rlc_um_nr_sn_size_t value);
  public:

  // uint32 UM_Window_Size = 2;
  void clear_um_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 um_window_size() const;
  void set_um_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_um_window_size() const;
  void _internal_set_um_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mod = 3;
  void clear_mod();
  ::PROTOBUF_NAMESPACE_ID::uint32 mod() const;
  void set_mod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mod() const;
  void _internal_set_mod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 t_reassembly_ms = 4;
  void clear_t_reassembly_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 t_reassembly_ms() const;
  void set_t_reassembly_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_t_reassembly_ms() const;
  void _internal_set_t_reassembly_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.rlc.rlc_um_nr_config_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int sn_field_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 um_window_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mod_;
  ::PROTOBUF_NAMESPACE_ID::int32 t_reassembly_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rlc_5fconfig_5ft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rlc_config_t

// .fs.rlc.srsran_rat_t rat = 1;
inline void rlc_config_t::clear_rat() {
  rat_ = 0;
}
inline ::fs::rlc::srsran_rat_t rlc_config_t::_internal_rat() const {
  return static_cast< ::fs::rlc::srsran_rat_t >(rat_);
}
inline ::fs::rlc::srsran_rat_t rlc_config_t::rat() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_config_t.rat)
  return _internal_rat();
}
inline void rlc_config_t::_internal_set_rat(::fs::rlc::srsran_rat_t value) {
  
  rat_ = value;
}
inline void rlc_config_t::set_rat(::fs::rlc::srsran_rat_t value) {
  _internal_set_rat(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_config_t.rat)
}

// .fs.rlc.rlc_mode_t rlc_mode = 2;
inline void rlc_config_t::clear_rlc_mode() {
  rlc_mode_ = 0;
}
inline ::fs::rlc::rlc_mode_t rlc_config_t::_internal_rlc_mode() const {
  return static_cast< ::fs::rlc::rlc_mode_t >(rlc_mode_);
}
inline ::fs::rlc::rlc_mode_t rlc_config_t::rlc_mode() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_config_t.rlc_mode)
  return _internal_rlc_mode();
}
inline void rlc_config_t::_internal_set_rlc_mode(::fs::rlc::rlc_mode_t value) {
  
  rlc_mode_ = value;
}
inline void rlc_config_t::set_rlc_mode(::fs::rlc::rlc_mode_t value) {
  _internal_set_rlc_mode(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_config_t.rlc_mode)
}

// .fs.rlc.rlc_am_config_t am = 3;
inline bool rlc_config_t::_internal_has_am() const {
  return this != internal_default_instance() && am_ != nullptr;
}
inline bool rlc_config_t::has_am() const {
  return _internal_has_am();
}
inline void rlc_config_t::clear_am() {
  if (GetArena() == nullptr && am_ != nullptr) {
    delete am_;
  }
  am_ = nullptr;
}
inline const ::fs::rlc::rlc_am_config_t& rlc_config_t::_internal_am() const {
  const ::fs::rlc::rlc_am_config_t* p = am_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::rlc::rlc_am_config_t*>(
      &::fs::rlc::_rlc_am_config_t_default_instance_);
}
inline const ::fs::rlc::rlc_am_config_t& rlc_config_t::am() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_config_t.am)
  return _internal_am();
}
inline void rlc_config_t::unsafe_arena_set_allocated_am(
    ::fs::rlc::rlc_am_config_t* am) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(am_);
  }
  am_ = am;
  if (am) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.rlc.rlc_config_t.am)
}
inline ::fs::rlc::rlc_am_config_t* rlc_config_t::release_am() {
  auto temp = unsafe_arena_release_am();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::rlc::rlc_am_config_t* rlc_config_t::unsafe_arena_release_am() {
  // @@protoc_insertion_point(field_release:fs.rlc.rlc_config_t.am)
  
  ::fs::rlc::rlc_am_config_t* temp = am_;
  am_ = nullptr;
  return temp;
}
inline ::fs::rlc::rlc_am_config_t* rlc_config_t::_internal_mutable_am() {
  
  if (am_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::rlc::rlc_am_config_t>(GetArena());
    am_ = p;
  }
  return am_;
}
inline ::fs::rlc::rlc_am_config_t* rlc_config_t::mutable_am() {
  // @@protoc_insertion_point(field_mutable:fs.rlc.rlc_config_t.am)
  return _internal_mutable_am();
}
inline void rlc_config_t::set_allocated_am(::fs::rlc::rlc_am_config_t* am) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete am_;
  }
  if (am) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(am);
    if (message_arena != submessage_arena) {
      am = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, am, submessage_arena);
    }
    
  } else {
    
  }
  am_ = am;
  // @@protoc_insertion_point(field_set_allocated:fs.rlc.rlc_config_t.am)
}

// .fs.rlc.rlc_um_config_t um = 4;
inline bool rlc_config_t::_internal_has_um() const {
  return this != internal_default_instance() && um_ != nullptr;
}
inline bool rlc_config_t::has_um() const {
  return _internal_has_um();
}
inline void rlc_config_t::clear_um() {
  if (GetArena() == nullptr && um_ != nullptr) {
    delete um_;
  }
  um_ = nullptr;
}
inline const ::fs::rlc::rlc_um_config_t& rlc_config_t::_internal_um() const {
  const ::fs::rlc::rlc_um_config_t* p = um_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::rlc::rlc_um_config_t*>(
      &::fs::rlc::_rlc_um_config_t_default_instance_);
}
inline const ::fs::rlc::rlc_um_config_t& rlc_config_t::um() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_config_t.um)
  return _internal_um();
}
inline void rlc_config_t::unsafe_arena_set_allocated_um(
    ::fs::rlc::rlc_um_config_t* um) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(um_);
  }
  um_ = um;
  if (um) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.rlc.rlc_config_t.um)
}
inline ::fs::rlc::rlc_um_config_t* rlc_config_t::release_um() {
  auto temp = unsafe_arena_release_um();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::rlc::rlc_um_config_t* rlc_config_t::unsafe_arena_release_um() {
  // @@protoc_insertion_point(field_release:fs.rlc.rlc_config_t.um)
  
  ::fs::rlc::rlc_um_config_t* temp = um_;
  um_ = nullptr;
  return temp;
}
inline ::fs::rlc::rlc_um_config_t* rlc_config_t::_internal_mutable_um() {
  
  if (um_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::rlc::rlc_um_config_t>(GetArena());
    um_ = p;
  }
  return um_;
}
inline ::fs::rlc::rlc_um_config_t* rlc_config_t::mutable_um() {
  // @@protoc_insertion_point(field_mutable:fs.rlc.rlc_config_t.um)
  return _internal_mutable_um();
}
inline void rlc_config_t::set_allocated_um(::fs::rlc::rlc_um_config_t* um) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete um_;
  }
  if (um) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(um);
    if (message_arena != submessage_arena) {
      um = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, um, submessage_arena);
    }
    
  } else {
    
  }
  um_ = um;
  // @@protoc_insertion_point(field_set_allocated:fs.rlc.rlc_config_t.um)
}

// .fs.rlc.rlc_um_nr_config_t um_nr = 5;
inline bool rlc_config_t::_internal_has_um_nr() const {
  return this != internal_default_instance() && um_nr_ != nullptr;
}
inline bool rlc_config_t::has_um_nr() const {
  return _internal_has_um_nr();
}
inline void rlc_config_t::clear_um_nr() {
  if (GetArena() == nullptr && um_nr_ != nullptr) {
    delete um_nr_;
  }
  um_nr_ = nullptr;
}
inline const ::fs::rlc::rlc_um_nr_config_t& rlc_config_t::_internal_um_nr() const {
  const ::fs::rlc::rlc_um_nr_config_t* p = um_nr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::rlc::rlc_um_nr_config_t*>(
      &::fs::rlc::_rlc_um_nr_config_t_default_instance_);
}
inline const ::fs::rlc::rlc_um_nr_config_t& rlc_config_t::um_nr() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_config_t.um_nr)
  return _internal_um_nr();
}
inline void rlc_config_t::unsafe_arena_set_allocated_um_nr(
    ::fs::rlc::rlc_um_nr_config_t* um_nr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(um_nr_);
  }
  um_nr_ = um_nr;
  if (um_nr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.rlc.rlc_config_t.um_nr)
}
inline ::fs::rlc::rlc_um_nr_config_t* rlc_config_t::release_um_nr() {
  auto temp = unsafe_arena_release_um_nr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::rlc::rlc_um_nr_config_t* rlc_config_t::unsafe_arena_release_um_nr() {
  // @@protoc_insertion_point(field_release:fs.rlc.rlc_config_t.um_nr)
  
  ::fs::rlc::rlc_um_nr_config_t* temp = um_nr_;
  um_nr_ = nullptr;
  return temp;
}
inline ::fs::rlc::rlc_um_nr_config_t* rlc_config_t::_internal_mutable_um_nr() {
  
  if (um_nr_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::rlc::rlc_um_nr_config_t>(GetArena());
    um_nr_ = p;
  }
  return um_nr_;
}
inline ::fs::rlc::rlc_um_nr_config_t* rlc_config_t::mutable_um_nr() {
  // @@protoc_insertion_point(field_mutable:fs.rlc.rlc_config_t.um_nr)
  return _internal_mutable_um_nr();
}
inline void rlc_config_t::set_allocated_um_nr(::fs::rlc::rlc_um_nr_config_t* um_nr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete um_nr_;
  }
  if (um_nr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(um_nr);
    if (message_arena != submessage_arena) {
      um_nr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, um_nr, submessage_arena);
    }
    
  } else {
    
  }
  um_nr_ = um_nr;
  // @@protoc_insertion_point(field_set_allocated:fs.rlc.rlc_config_t.um_nr)
}

// uint32 tx_queue_length = 6;
inline void rlc_config_t::clear_tx_queue_length() {
  tx_queue_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_config_t::_internal_tx_queue_length() const {
  return tx_queue_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_config_t::tx_queue_length() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_config_t.tx_queue_length)
  return _internal_tx_queue_length();
}
inline void rlc_config_t::_internal_set_tx_queue_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tx_queue_length_ = value;
}
inline void rlc_config_t::set_tx_queue_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_queue_length(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_config_t.tx_queue_length)
}

// -------------------------------------------------------------------

// rlc_am_config_t

// uint32 t_poll_retx = 1;
inline void rlc_am_config_t::clear_t_poll_retx() {
  t_poll_retx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::_internal_t_poll_retx() const {
  return t_poll_retx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::t_poll_retx() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_am_config_t.t_poll_retx)
  return _internal_t_poll_retx();
}
inline void rlc_am_config_t::_internal_set_t_poll_retx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_poll_retx_ = value;
}
inline void rlc_am_config_t::set_t_poll_retx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_poll_retx(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_am_config_t.t_poll_retx)
}

// uint32 poll_pdu = 2;
inline void rlc_am_config_t::clear_poll_pdu() {
  poll_pdu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::_internal_poll_pdu() const {
  return poll_pdu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::poll_pdu() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_am_config_t.poll_pdu)
  return _internal_poll_pdu();
}
inline void rlc_am_config_t::_internal_set_poll_pdu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  poll_pdu_ = value;
}
inline void rlc_am_config_t::set_poll_pdu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_poll_pdu(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_am_config_t.poll_pdu)
}

// uint32 poll_byte = 3;
inline void rlc_am_config_t::clear_poll_byte() {
  poll_byte_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::_internal_poll_byte() const {
  return poll_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::poll_byte() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_am_config_t.poll_byte)
  return _internal_poll_byte();
}
inline void rlc_am_config_t::_internal_set_poll_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  poll_byte_ = value;
}
inline void rlc_am_config_t::set_poll_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_poll_byte(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_am_config_t.poll_byte)
}

// uint32 max_retx_thresh = 4;
inline void rlc_am_config_t::clear_max_retx_thresh() {
  max_retx_thresh_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::_internal_max_retx_thresh() const {
  return max_retx_thresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::max_retx_thresh() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_am_config_t.max_retx_thresh)
  return _internal_max_retx_thresh();
}
inline void rlc_am_config_t::_internal_set_max_retx_thresh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_retx_thresh_ = value;
}
inline void rlc_am_config_t::set_max_retx_thresh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_retx_thresh(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_am_config_t.max_retx_thresh)
}

// uint32 t_reordering = 5;
inline void rlc_am_config_t::clear_t_reordering() {
  t_reordering_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::_internal_t_reordering() const {
  return t_reordering_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::t_reordering() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_am_config_t.t_reordering)
  return _internal_t_reordering();
}
inline void rlc_am_config_t::_internal_set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_reordering_ = value;
}
inline void rlc_am_config_t::set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_reordering(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_am_config_t.t_reordering)
}

// uint32 t_status_prohibit = 6;
inline void rlc_am_config_t::clear_t_status_prohibit() {
  t_status_prohibit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::_internal_t_status_prohibit() const {
  return t_status_prohibit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_am_config_t::t_status_prohibit() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_am_config_t.t_status_prohibit)
  return _internal_t_status_prohibit();
}
inline void rlc_am_config_t::_internal_set_t_status_prohibit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_status_prohibit_ = value;
}
inline void rlc_am_config_t::set_t_status_prohibit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_status_prohibit(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_am_config_t.t_status_prohibit)
}

// -------------------------------------------------------------------

// rlc_um_config_t

// uint32 t_reordering = 1;
inline void rlc_um_config_t::clear_t_reordering() {
  t_reordering_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::_internal_t_reordering() const {
  return t_reordering_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::t_reordering() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.t_reordering)
  return _internal_t_reordering();
}
inline void rlc_um_config_t::_internal_set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_reordering_ = value;
}
inline void rlc_um_config_t::set_t_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_reordering(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.t_reordering)
}

// .fs.rlc.rlc_umd_sn_size_t tx_sn_field_length = 2;
inline void rlc_um_config_t::clear_tx_sn_field_length() {
  tx_sn_field_length_ = 0;
}
inline ::fs::rlc::rlc_umd_sn_size_t rlc_um_config_t::_internal_tx_sn_field_length() const {
  return static_cast< ::fs::rlc::rlc_umd_sn_size_t >(tx_sn_field_length_);
}
inline ::fs::rlc::rlc_umd_sn_size_t rlc_um_config_t::tx_sn_field_length() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.tx_sn_field_length)
  return _internal_tx_sn_field_length();
}
inline void rlc_um_config_t::_internal_set_tx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value) {
  
  tx_sn_field_length_ = value;
}
inline void rlc_um_config_t::set_tx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value) {
  _internal_set_tx_sn_field_length(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.tx_sn_field_length)
}

// .fs.rlc.rlc_umd_sn_size_t rx_sn_field_length = 3;
inline void rlc_um_config_t::clear_rx_sn_field_length() {
  rx_sn_field_length_ = 0;
}
inline ::fs::rlc::rlc_umd_sn_size_t rlc_um_config_t::_internal_rx_sn_field_length() const {
  return static_cast< ::fs::rlc::rlc_umd_sn_size_t >(rx_sn_field_length_);
}
inline ::fs::rlc::rlc_umd_sn_size_t rlc_um_config_t::rx_sn_field_length() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.rx_sn_field_length)
  return _internal_rx_sn_field_length();
}
inline void rlc_um_config_t::_internal_set_rx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value) {
  
  rx_sn_field_length_ = value;
}
inline void rlc_um_config_t::set_rx_sn_field_length(::fs::rlc::rlc_umd_sn_size_t value) {
  _internal_set_rx_sn_field_length(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.rx_sn_field_length)
}

// uint32 rx_window_size = 4;
inline void rlc_um_config_t::clear_rx_window_size() {
  rx_window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::_internal_rx_window_size() const {
  return rx_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::rx_window_size() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.rx_window_size)
  return _internal_rx_window_size();
}
inline void rlc_um_config_t::_internal_set_rx_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rx_window_size_ = value;
}
inline void rlc_um_config_t::set_rx_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rx_window_size(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.rx_window_size)
}

// uint32 rx_mod = 5;
inline void rlc_um_config_t::clear_rx_mod() {
  rx_mod_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::_internal_rx_mod() const {
  return rx_mod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::rx_mod() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.rx_mod)
  return _internal_rx_mod();
}
inline void rlc_um_config_t::_internal_set_rx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rx_mod_ = value;
}
inline void rlc_um_config_t::set_rx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rx_mod(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.rx_mod)
}

// uint32 tx_mod = 6;
inline void rlc_um_config_t::clear_tx_mod() {
  tx_mod_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::_internal_tx_mod() const {
  return tx_mod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_config_t::tx_mod() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.tx_mod)
  return _internal_tx_mod();
}
inline void rlc_um_config_t::_internal_set_tx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tx_mod_ = value;
}
inline void rlc_um_config_t::set_tx_mod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_mod(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.tx_mod)
}

// bool is_mrb = 7;
inline void rlc_um_config_t::clear_is_mrb() {
  is_mrb_ = false;
}
inline bool rlc_um_config_t::_internal_is_mrb() const {
  return is_mrb_;
}
inline bool rlc_um_config_t::is_mrb() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_config_t.is_mrb)
  return _internal_is_mrb();
}
inline void rlc_um_config_t::_internal_set_is_mrb(bool value) {
  
  is_mrb_ = value;
}
inline void rlc_um_config_t::set_is_mrb(bool value) {
  _internal_set_is_mrb(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_config_t.is_mrb)
}

// -------------------------------------------------------------------

// rlc_um_nr_config_t

// .fs.rlc.rlc_um_nr_sn_size_t sn_field_length = 1;
inline void rlc_um_nr_config_t::clear_sn_field_length() {
  sn_field_length_ = 0;
}
inline ::fs::rlc::rlc_um_nr_sn_size_t rlc_um_nr_config_t::_internal_sn_field_length() const {
  return static_cast< ::fs::rlc::rlc_um_nr_sn_size_t >(sn_field_length_);
}
inline ::fs::rlc::rlc_um_nr_sn_size_t rlc_um_nr_config_t::sn_field_length() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_nr_config_t.sn_field_length)
  return _internal_sn_field_length();
}
inline void rlc_um_nr_config_t::_internal_set_sn_field_length(::fs::rlc::rlc_um_nr_sn_size_t value) {
  
  sn_field_length_ = value;
}
inline void rlc_um_nr_config_t::set_sn_field_length(::fs::rlc::rlc_um_nr_sn_size_t value) {
  _internal_set_sn_field_length(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_nr_config_t.sn_field_length)
}

// uint32 UM_Window_Size = 2;
inline void rlc_um_nr_config_t::clear_um_window_size() {
  um_window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_nr_config_t::_internal_um_window_size() const {
  return um_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_nr_config_t::um_window_size() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_nr_config_t.UM_Window_Size)
  return _internal_um_window_size();
}
inline void rlc_um_nr_config_t::_internal_set_um_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  um_window_size_ = value;
}
inline void rlc_um_nr_config_t::set_um_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_um_window_size(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_nr_config_t.UM_Window_Size)
}

// uint32 mod = 3;
inline void rlc_um_nr_config_t::clear_mod() {
  mod_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_nr_config_t::_internal_mod() const {
  return mod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rlc_um_nr_config_t::mod() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_nr_config_t.mod)
  return _internal_mod();
}
inline void rlc_um_nr_config_t::_internal_set_mod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mod_ = value;
}
inline void rlc_um_nr_config_t::set_mod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mod(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_nr_config_t.mod)
}

// int32 t_reassembly_ms = 4;
inline void rlc_um_nr_config_t::clear_t_reassembly_ms() {
  t_reassembly_ms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rlc_um_nr_config_t::_internal_t_reassembly_ms() const {
  return t_reassembly_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rlc_um_nr_config_t::t_reassembly_ms() const {
  // @@protoc_insertion_point(field_get:fs.rlc.rlc_um_nr_config_t.t_reassembly_ms)
  return _internal_t_reassembly_ms();
}
inline void rlc_um_nr_config_t::_internal_set_t_reassembly_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  t_reassembly_ms_ = value;
}
inline void rlc_um_nr_config_t::set_t_reassembly_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_t_reassembly_ms(value);
  // @@protoc_insertion_point(field_set:fs.rlc.rlc_um_nr_config_t.t_reassembly_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rlc
}  // namespace fs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fs::rlc::srsran_rat_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::rlc::srsran_rat_t>() {
  return ::fs::rlc::srsran_rat_t_descriptor();
}
template <> struct is_proto_enum< ::fs::rlc::rlc_mode_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::rlc::rlc_mode_t>() {
  return ::fs::rlc::rlc_mode_t_descriptor();
}
template <> struct is_proto_enum< ::fs::rlc::rlc_umd_sn_size_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::rlc::rlc_umd_sn_size_t>() {
  return ::fs::rlc::rlc_umd_sn_size_t_descriptor();
}
template <> struct is_proto_enum< ::fs::rlc::rlc_um_nr_sn_size_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::rlc::rlc_um_nr_sn_size_t>() {
  return ::fs::rlc::rlc_um_nr_sn_size_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rlc_5fconfig_5ft_2eproto
