// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rrc_mcch_t.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rrc_5fmcch_5ft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rrc_5fmcch_5ft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rrc_5fmcch_5ft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rrc_5fmcch_5ft_2eproto;
namespace fs {
namespace mac_rrc {
class buffer;
class bufferDefaultTypeInternal;
extern bufferDefaultTypeInternal _buffer_default_instance_;
class choice;
class choiceDefaultTypeInternal;
extern choiceDefaultTypeInternal _choice_default_instance_;
class mbms_notif_cfg_t;
class mbms_notif_cfg_tDefaultTypeInternal;
extern mbms_notif_cfg_tDefaultTypeInternal _mbms_notif_cfg_t_default_instance_;
class mbms_session_info_t;
class mbms_session_info_tDefaultTypeInternal;
extern mbms_session_info_tDefaultTypeInternal _mbms_session_info_t_default_instance_;
class mbsfn_area_info_t;
class mbsfn_area_info_tDefaultTypeInternal;
extern mbsfn_area_info_tDefaultTypeInternal _mbsfn_area_info_t_default_instance_;
class mbsfn_sf_cfg_t;
class mbsfn_sf_cfg_tDefaultTypeInternal;
extern mbsfn_sf_cfg_tDefaultTypeInternal _mbsfn_sf_cfg_t_default_instance_;
class mcch_cfg_t;
class mcch_cfg_tDefaultTypeInternal;
extern mcch_cfg_tDefaultTypeInternal _mcch_cfg_t_default_instance_;
class mcch_msg_t;
class mcch_msg_tDefaultTypeInternal;
extern mcch_msg_tDefaultTypeInternal _mcch_msg_t_default_instance_;
class plmn_id_t;
class plmn_id_tDefaultTypeInternal;
extern plmn_id_tDefaultTypeInternal _plmn_id_t_default_instance_;
class pmch_info_t;
class pmch_info_tDefaultTypeInternal;
extern pmch_info_tDefaultTypeInternal _pmch_info_t_default_instance_;
class sib13_t;
class sib13_tDefaultTypeInternal;
extern sib13_tDefaultTypeInternal _sib13_t_default_instance_;
class sib2_mbms_t;
class sib2_mbms_tDefaultTypeInternal;
extern sib2_mbms_tDefaultTypeInternal _sib2_mbms_t_default_instance_;
class tmgi_t;
class tmgi_tDefaultTypeInternal;
extern tmgi_tDefaultTypeInternal _tmgi_t_default_instance_;
}  // namespace mac_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::mac_rrc::buffer* Arena::CreateMaybeMessage<::fs::mac_rrc::buffer>(Arena*);
template<> ::fs::mac_rrc::choice* Arena::CreateMaybeMessage<::fs::mac_rrc::choice>(Arena*);
template<> ::fs::mac_rrc::mbms_notif_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::mbms_notif_cfg_t>(Arena*);
template<> ::fs::mac_rrc::mbms_session_info_t* Arena::CreateMaybeMessage<::fs::mac_rrc::mbms_session_info_t>(Arena*);
template<> ::fs::mac_rrc::mbsfn_area_info_t* Arena::CreateMaybeMessage<::fs::mac_rrc::mbsfn_area_info_t>(Arena*);
template<> ::fs::mac_rrc::mbsfn_sf_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::mbsfn_sf_cfg_t>(Arena*);
template<> ::fs::mac_rrc::mcch_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::mcch_cfg_t>(Arena*);
template<> ::fs::mac_rrc::mcch_msg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::mcch_msg_t>(Arena*);
template<> ::fs::mac_rrc::plmn_id_t* Arena::CreateMaybeMessage<::fs::mac_rrc::plmn_id_t>(Arena*);
template<> ::fs::mac_rrc::pmch_info_t* Arena::CreateMaybeMessage<::fs::mac_rrc::pmch_info_t>(Arena*);
template<> ::fs::mac_rrc::sib13_t* Arena::CreateMaybeMessage<::fs::mac_rrc::sib13_t>(Arena*);
template<> ::fs::mac_rrc::sib2_mbms_t* Arena::CreateMaybeMessage<::fs::mac_rrc::sib2_mbms_t>(Arena*);
template<> ::fs::mac_rrc::tmgi_t* Arena::CreateMaybeMessage<::fs::mac_rrc::tmgi_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {
namespace mac_rrc {

enum repeat_period_t : int {
  repeat_period_nulltype = 0,
  repeat_period_rf32 = 1,
  repeat_period_rf64 = 2,
  repeat_period_rf128 = 3,
  repeat_period_rf256 = 4,
  repeat_period_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  repeat_period_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool repeat_period_t_IsValid(int value);
constexpr repeat_period_t repeat_period_t_MIN = repeat_period_nulltype;
constexpr repeat_period_t repeat_period_t_MAX = repeat_period_rf256;
constexpr int repeat_period_t_ARRAYSIZE = repeat_period_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* repeat_period_t_descriptor();
template<typename T>
inline const std::string& repeat_period_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, repeat_period_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function repeat_period_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    repeat_period_t_descriptor(), enum_t_value);
}
inline bool repeat_period_t_Parse(
    const std::string& name, repeat_period_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<repeat_period_t>(
    repeat_period_t_descriptor(), name, value);
}
enum mod_period_t : int {
  mod_period_rf512 = 0,
  mod_period_rf1024 = 1,
  mod_period_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  mod_period_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool mod_period_t_IsValid(int value);
constexpr mod_period_t mod_period_t_MIN = mod_period_rf512;
constexpr mod_period_t mod_period_t_MAX = mod_period_rf1024;
constexpr int mod_period_t_ARRAYSIZE = mod_period_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* mod_period_t_descriptor();
template<typename T>
inline const std::string& mod_period_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, mod_period_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function mod_period_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    mod_period_t_descriptor(), enum_t_value);
}
inline bool mod_period_t_Parse(
    const std::string& name, mod_period_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<mod_period_t>(
    mod_period_t_descriptor(), name, value);
}
enum sig_mcs_t : int {
  sig_mcs_n2 = 0,
  sig_mcs_n7 = 1,
  sig_mcs_n13 = 2,
  sig_mcs_n19 = 3,
  sig_mcs_nulltype = 4,
  sig_mcs_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  sig_mcs_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool sig_mcs_t_IsValid(int value);
constexpr sig_mcs_t sig_mcs_t_MIN = sig_mcs_n2;
constexpr sig_mcs_t sig_mcs_t_MAX = sig_mcs_nulltype;
constexpr int sig_mcs_t_ARRAYSIZE = sig_mcs_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* sig_mcs_t_descriptor();
template<typename T>
inline const std::string& sig_mcs_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, sig_mcs_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function sig_mcs_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    sig_mcs_t_descriptor(), enum_t_value);
}
inline bool sig_mcs_t_Parse(
    const std::string& name, sig_mcs_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<sig_mcs_t>(
    sig_mcs_t_descriptor(), name, value);
}
enum coeff_t : int {
  coeff_n2 = 0,
  coeff_n4 = 1,
  coeff_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  coeff_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool coeff_t_IsValid(int value);
constexpr coeff_t coeff_t_MIN = coeff_n2;
constexpr coeff_t coeff_t_MAX = coeff_n4;
constexpr int coeff_t_ARRAYSIZE = coeff_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* coeff_t_descriptor();
template<typename T>
inline const std::string& coeff_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, coeff_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function coeff_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    coeff_t_descriptor(), enum_t_value);
}
inline bool coeff_t_Parse(
    const std::string& name, coeff_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<coeff_t>(
    coeff_t_descriptor(), name, value);
}
enum region_len_t : int {
  region_len_s1 = 0,
  region_len_s2 = 1,
  region_len_nulltype = 2,
  region_len_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  region_len_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool region_len_t_IsValid(int value);
constexpr region_len_t region_len_t_MIN = region_len_s1;
constexpr region_len_t region_len_t_MAX = region_len_nulltype;
constexpr int region_len_t_ARRAYSIZE = region_len_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* region_len_t_descriptor();
template<typename T>
inline const std::string& region_len_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, region_len_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function region_len_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    region_len_t_descriptor(), enum_t_value);
}
inline bool region_len_t_Parse(
    const std::string& name, region_len_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<region_len_t>(
    region_len_t_descriptor(), name, value);
}
enum plmn_id_type_t : int {
  plmn_idx = 0,
  explicit_value = 1,
  plmn_id_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  plmn_id_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool plmn_id_type_t_IsValid(int value);
constexpr plmn_id_type_t plmn_id_type_t_MIN = plmn_idx;
constexpr plmn_id_type_t plmn_id_type_t_MAX = explicit_value;
constexpr int plmn_id_type_t_ARRAYSIZE = plmn_id_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* plmn_id_type_t_descriptor();
template<typename T>
inline const std::string& plmn_id_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, plmn_id_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function plmn_id_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    plmn_id_type_t_descriptor(), enum_t_value);
}
inline bool plmn_id_type_t_Parse(
    const std::string& name, plmn_id_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<plmn_id_type_t>(
    plmn_id_type_t_descriptor(), name, value);
}
enum mch_sched_period_t : int {
  mch_sched_period_rf8 = 0,
  mch_sched_period_rf16 = 1,
  mch_sched_period_rf32 = 2,
  mch_sched_period_rf64 = 3,
  mch_sched_period_rf128 = 4,
  mch_sched_period_rf256 = 5,
  mch_sched_period_rf512 = 6,
  mch_sched_period_rf1024 = 7,
  mch_sched_period_nulltype = 8,
  mch_sched_period_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  mch_sched_period_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool mch_sched_period_t_IsValid(int value);
constexpr mch_sched_period_t mch_sched_period_t_MIN = mch_sched_period_rf8;
constexpr mch_sched_period_t mch_sched_period_t_MAX = mch_sched_period_nulltype;
constexpr int mch_sched_period_t_ARRAYSIZE = mch_sched_period_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* mch_sched_period_t_descriptor();
template<typename T>
inline const std::string& mch_sched_period_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, mch_sched_period_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function mch_sched_period_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    mch_sched_period_t_descriptor(), enum_t_value);
}
inline bool mch_sched_period_t_Parse(
    const std::string& name, mch_sched_period_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<mch_sched_period_t>(
    mch_sched_period_t_descriptor(), name, value);
}
enum alloc_period_t : int {
  alloc_period_n1 = 0,
  alloc_period_n2 = 1,
  alloc_period_n4 = 2,
  alloc_period_n8 = 3,
  alloc_period_n16 = 4,
  alloc_period_n32 = 5,
  alloc_period_nulltype = 6,
  alloc_period_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  alloc_period_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool alloc_period_t_IsValid(int value);
constexpr alloc_period_t alloc_period_t_MIN = alloc_period_n1;
constexpr alloc_period_t alloc_period_t_MAX = alloc_period_nulltype;
constexpr int alloc_period_t_ARRAYSIZE = alloc_period_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* alloc_period_t_descriptor();
template<typename T>
inline const std::string& alloc_period_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, alloc_period_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function alloc_period_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    alloc_period_t_descriptor(), enum_t_value);
}
inline bool alloc_period_t_Parse(
    const std::string& name, alloc_period_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<alloc_period_t>(
    alloc_period_t_descriptor(), name, value);
}
enum sf_alloc_type_t : int {
  sf_alloc_type_one_frame = 0,
  sf_alloc_type_four_frames = 1,
  sf_alloc_type_nulltype = 2,
  sf_alloc_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  sf_alloc_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool sf_alloc_type_t_IsValid(int value);
constexpr sf_alloc_type_t sf_alloc_type_t_MIN = sf_alloc_type_one_frame;
constexpr sf_alloc_type_t sf_alloc_type_t_MAX = sf_alloc_type_nulltype;
constexpr int sf_alloc_type_t_ARRAYSIZE = sf_alloc_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* sf_alloc_type_t_descriptor();
template<typename T>
inline const std::string& sf_alloc_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, sf_alloc_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function sf_alloc_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    sf_alloc_type_t_descriptor(), enum_t_value);
}
inline bool sf_alloc_type_t_Parse(
    const std::string& name, sf_alloc_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<sf_alloc_type_t>(
    sf_alloc_type_t_descriptor(), name, value);
}
enum common_sf_alloc_period_t : int {
  common_sf_alloc_period_nulltype = 0,
  common_sf_alloc_period_rf4 = 1,
  common_sf_alloc_period_rf8 = 2,
  common_sf_alloc_period_rf16 = 3,
  common_sf_alloc_period_rf32 = 4,
  common_sf_alloc_period_rf64 = 5,
  common_sf_alloc_period_rf128 = 6,
  common_sf_alloc_period_rf256 = 7,
  common_sf_alloc_period_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  common_sf_alloc_period_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool common_sf_alloc_period_t_IsValid(int value);
constexpr common_sf_alloc_period_t common_sf_alloc_period_t_MIN = common_sf_alloc_period_nulltype;
constexpr common_sf_alloc_period_t common_sf_alloc_period_t_MAX = common_sf_alloc_period_rf256;
constexpr int common_sf_alloc_period_t_ARRAYSIZE = common_sf_alloc_period_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* common_sf_alloc_period_t_descriptor();
template<typename T>
inline const std::string& common_sf_alloc_period_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, common_sf_alloc_period_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function common_sf_alloc_period_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    common_sf_alloc_period_t_descriptor(), enum_t_value);
}
inline bool common_sf_alloc_period_t_Parse(
    const std::string& name, common_sf_alloc_period_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<common_sf_alloc_period_t>(
    common_sf_alloc_period_t_descriptor(), name, value);
}
// ===================================================================

class plmn_id_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.plmn_id_t) */ {
 public:
  inline plmn_id_t() : plmn_id_t(nullptr) {};
  virtual ~plmn_id_t();

  plmn_id_t(const plmn_id_t& from);
  plmn_id_t(plmn_id_t&& from) noexcept
    : plmn_id_t() {
    *this = ::std::move(from);
  }

  inline plmn_id_t& operator=(const plmn_id_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline plmn_id_t& operator=(plmn_id_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const plmn_id_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plmn_id_t* internal_default_instance() {
    return reinterpret_cast<const plmn_id_t*>(
               &_plmn_id_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(plmn_id_t& a, plmn_id_t& b) {
    a.Swap(&b);
  }
  inline void Swap(plmn_id_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(plmn_id_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline plmn_id_t* New() const final {
    return CreateMaybeMessage<plmn_id_t>(nullptr);
  }

  plmn_id_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<plmn_id_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const plmn_id_t& from);
  void MergeFrom(const plmn_id_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(plmn_id_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.plmn_id_t";
  }
  protected:
  explicit plmn_id_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMccFieldNumber = 2,
    kMncFieldNumber = 3,
    kNofMncDigitsFieldNumber = 1,
  };
  // repeated uint32 mcc = 2;
  int mcc_size() const;
  private:
  int _internal_mcc_size() const;
  public:
  void clear_mcc();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mcc() const;
  void _internal_add_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mcc();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mcc(int index) const;
  void set_mcc(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mcc();

  // repeated uint32 mnc = 3;
  int mnc_size() const;
  private:
  int _internal_mnc_size() const;
  public:
  void clear_mnc();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mnc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mnc() const;
  void _internal_add_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mnc();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mnc(int index) const;
  void set_mnc(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mnc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mnc();

  // uint32 nof_mnc_digits = 1;
  void clear_nof_mnc_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_mnc_digits() const;
  void set_nof_mnc_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_mnc_digits() const;
  void _internal_set_nof_mnc_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.plmn_id_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mcc_;
  mutable std::atomic<int> _mcc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mnc_;
  mutable std::atomic<int> _mnc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_mnc_digits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class choice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.choice) */ {
 public:
  inline choice() : choice(nullptr) {};
  virtual ~choice();

  choice(const choice& from);
  choice(choice&& from) noexcept
    : choice() {
    *this = ::std::move(from);
  }

  inline choice& operator=(const choice& from) {
    CopyFrom(from);
    return *this;
  }
  inline choice& operator=(choice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const choice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const choice* internal_default_instance() {
    return reinterpret_cast<const choice*>(
               &_choice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(choice& a, choice& b) {
    a.Swap(&b);
  }
  inline void Swap(choice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(choice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline choice* New() const final {
    return CreateMaybeMessage<choice>(nullptr);
  }

  choice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<choice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const choice& from);
  void MergeFrom(const choice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(choice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.choice";
  }
  protected:
  explicit choice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExplicitValueFieldNumber = 2,
    kPlmnIdxFieldNumber = 1,
  };
  // .fs.mac_rrc.plmn_id_t explicit_value = 2;
  bool has_explicit_value() const;
  private:
  bool _internal_has_explicit_value() const;
  public:
  void clear_explicit_value();
  const ::fs::mac_rrc::plmn_id_t& explicit_value() const;
  ::fs::mac_rrc::plmn_id_t* release_explicit_value();
  ::fs::mac_rrc::plmn_id_t* mutable_explicit_value();
  void set_allocated_explicit_value(::fs::mac_rrc::plmn_id_t* explicit_value);
  private:
  const ::fs::mac_rrc::plmn_id_t& _internal_explicit_value() const;
  ::fs::mac_rrc::plmn_id_t* _internal_mutable_explicit_value();
  public:
  void unsafe_arena_set_allocated_explicit_value(
      ::fs::mac_rrc::plmn_id_t* explicit_value);
  ::fs::mac_rrc::plmn_id_t* unsafe_arena_release_explicit_value();

  // uint32 plmn_idx = 1;
  void clear_plmn_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 plmn_idx() const;
  void set_plmn_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_plmn_idx() const;
  void _internal_set_plmn_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.choice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::mac_rrc::plmn_id_t* explicit_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plmn_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class tmgi_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.tmgi_t) */ {
 public:
  inline tmgi_t() : tmgi_t(nullptr) {};
  virtual ~tmgi_t();

  tmgi_t(const tmgi_t& from);
  tmgi_t(tmgi_t&& from) noexcept
    : tmgi_t() {
    *this = ::std::move(from);
  }

  inline tmgi_t& operator=(const tmgi_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline tmgi_t& operator=(tmgi_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tmgi_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tmgi_t* internal_default_instance() {
    return reinterpret_cast<const tmgi_t*>(
               &_tmgi_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(tmgi_t& a, tmgi_t& b) {
    a.Swap(&b);
  }
  inline void Swap(tmgi_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tmgi_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tmgi_t* New() const final {
    return CreateMaybeMessage<tmgi_t>(nullptr);
  }

  tmgi_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tmgi_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tmgi_t& from);
  void MergeFrom(const tmgi_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tmgi_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.tmgi_t";
  }
  protected:
  explicit tmgi_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicedIdFieldNumber = 3,
    kPlmnIdFieldNumber = 1,
    kPlmnIdTypeFieldNumber = 2,
  };
  // repeated uint32 serviced_id = 3;
  int serviced_id_size() const;
  private:
  int _internal_serviced_id_size() const;
  public:
  void clear_serviced_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serviced_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_serviced_id() const;
  void _internal_add_serviced_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_serviced_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 serviced_id(int index) const;
  void set_serviced_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_serviced_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      serviced_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_serviced_id();

  // .fs.mac_rrc.choice plmn_id = 1;
  bool has_plmn_id() const;
  private:
  bool _internal_has_plmn_id() const;
  public:
  void clear_plmn_id();
  const ::fs::mac_rrc::choice& plmn_id() const;
  ::fs::mac_rrc::choice* release_plmn_id();
  ::fs::mac_rrc::choice* mutable_plmn_id();
  void set_allocated_plmn_id(::fs::mac_rrc::choice* plmn_id);
  private:
  const ::fs::mac_rrc::choice& _internal_plmn_id() const;
  ::fs::mac_rrc::choice* _internal_mutable_plmn_id();
  public:
  void unsafe_arena_set_allocated_plmn_id(
      ::fs::mac_rrc::choice* plmn_id);
  ::fs::mac_rrc::choice* unsafe_arena_release_plmn_id();

  // .fs.mac_rrc.plmn_id_type_t plmn_id_type = 2;
  void clear_plmn_id_type();
  ::fs::mac_rrc::plmn_id_type_t plmn_id_type() const;
  void set_plmn_id_type(::fs::mac_rrc::plmn_id_type_t value);
  private:
  ::fs::mac_rrc::plmn_id_type_t _internal_plmn_id_type() const;
  void _internal_set_plmn_id_type(::fs::mac_rrc::plmn_id_type_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.tmgi_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > serviced_id_;
  mutable std::atomic<int> _serviced_id_cached_byte_size_;
  ::fs::mac_rrc::choice* plmn_id_;
  int plmn_id_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class mbms_session_info_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.mbms_session_info_t) */ {
 public:
  inline mbms_session_info_t() : mbms_session_info_t(nullptr) {};
  virtual ~mbms_session_info_t();

  mbms_session_info_t(const mbms_session_info_t& from);
  mbms_session_info_t(mbms_session_info_t&& from) noexcept
    : mbms_session_info_t() {
    *this = ::std::move(from);
  }

  inline mbms_session_info_t& operator=(const mbms_session_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mbms_session_info_t& operator=(mbms_session_info_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mbms_session_info_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mbms_session_info_t* internal_default_instance() {
    return reinterpret_cast<const mbms_session_info_t*>(
               &_mbms_session_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(mbms_session_info_t& a, mbms_session_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mbms_session_info_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mbms_session_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mbms_session_info_t* New() const final {
    return CreateMaybeMessage<mbms_session_info_t>(nullptr);
  }

  mbms_session_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mbms_session_info_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mbms_session_info_t& from);
  void MergeFrom(const mbms_session_info_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mbms_session_info_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.mbms_session_info_t";
  }
  protected:
  explicit mbms_session_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTmgiFieldNumber = 4,
    kLcChIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kSessionIdPresentFieldNumber = 3,
  };
  // .fs.mac_rrc.tmgi_t tmgi = 4;
  bool has_tmgi() const;
  private:
  bool _internal_has_tmgi() const;
  public:
  void clear_tmgi();
  const ::fs::mac_rrc::tmgi_t& tmgi() const;
  ::fs::mac_rrc::tmgi_t* release_tmgi();
  ::fs::mac_rrc::tmgi_t* mutable_tmgi();
  void set_allocated_tmgi(::fs::mac_rrc::tmgi_t* tmgi);
  private:
  const ::fs::mac_rrc::tmgi_t& _internal_tmgi() const;
  ::fs::mac_rrc::tmgi_t* _internal_mutable_tmgi();
  public:
  void unsafe_arena_set_allocated_tmgi(
      ::fs::mac_rrc::tmgi_t* tmgi);
  ::fs::mac_rrc::tmgi_t* unsafe_arena_release_tmgi();

  // uint32 lc_ch_id = 1;
  void clear_lc_ch_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lc_ch_id() const;
  void set_lc_ch_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lc_ch_id() const;
  void _internal_set_lc_ch_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool session_id_present = 3;
  void clear_session_id_present();
  bool session_id_present() const;
  void set_session_id_present(bool value);
  private:
  bool _internal_session_id_present() const;
  void _internal_set_session_id_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.mbms_session_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::mac_rrc::tmgi_t* tmgi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lc_ch_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  bool session_id_present_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class pmch_info_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.pmch_info_t) */ {
 public:
  inline pmch_info_t() : pmch_info_t(nullptr) {};
  virtual ~pmch_info_t();

  pmch_info_t(const pmch_info_t& from);
  pmch_info_t(pmch_info_t&& from) noexcept
    : pmch_info_t() {
    *this = ::std::move(from);
  }

  inline pmch_info_t& operator=(const pmch_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline pmch_info_t& operator=(pmch_info_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pmch_info_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pmch_info_t* internal_default_instance() {
    return reinterpret_cast<const pmch_info_t*>(
               &_pmch_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(pmch_info_t& a, pmch_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(pmch_info_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pmch_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pmch_info_t* New() const final {
    return CreateMaybeMessage<pmch_info_t>(nullptr);
  }

  pmch_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pmch_info_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pmch_info_t& from);
  void MergeFrom(const pmch_info_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pmch_info_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.pmch_info_t";
  }
  protected:
  explicit pmch_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMbmsSessionInfoListFieldNumber = 6,
    kDataMcsFieldNumber = 1,
    kSfAllocEndFieldNumber = 2,
    kNofMbmsSessionInfoFieldNumber = 3,
    kMaxSessionPerPmchFieldNumber = 4,
    kMchSchedPeriodFieldNumber = 5,
  };
  // repeated .fs.mac_rrc.mbms_session_info_t mbms_session_info_list = 6;
  int mbms_session_info_list_size() const;
  private:
  int _internal_mbms_session_info_list_size() const;
  public:
  void clear_mbms_session_info_list();
  ::fs::mac_rrc::mbms_session_info_t* mutable_mbms_session_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbms_session_info_t >*
      mutable_mbms_session_info_list();
  private:
  const ::fs::mac_rrc::mbms_session_info_t& _internal_mbms_session_info_list(int index) const;
  ::fs::mac_rrc::mbms_session_info_t* _internal_add_mbms_session_info_list();
  public:
  const ::fs::mac_rrc::mbms_session_info_t& mbms_session_info_list(int index) const;
  ::fs::mac_rrc::mbms_session_info_t* add_mbms_session_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbms_session_info_t >&
      mbms_session_info_list() const;

  // uint32 data_mcs = 1;
  void clear_data_mcs();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_mcs() const;
  void set_data_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_mcs() const;
  void _internal_set_data_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sf_alloc_end = 2;
  void clear_sf_alloc_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_alloc_end() const;
  void set_sf_alloc_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sf_alloc_end() const;
  void _internal_set_sf_alloc_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_mbms_session_info = 3;
  void clear_nof_mbms_session_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_mbms_session_info() const;
  void set_nof_mbms_session_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_mbms_session_info() const;
  void _internal_set_nof_mbms_session_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_session_per_pmch = 4;
  void clear_max_session_per_pmch();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_session_per_pmch() const;
  void set_max_session_per_pmch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_session_per_pmch() const;
  void _internal_set_max_session_per_pmch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.mch_sched_period_t mch_sched_period = 5;
  void clear_mch_sched_period();
  ::fs::mac_rrc::mch_sched_period_t mch_sched_period() const;
  void set_mch_sched_period(::fs::mac_rrc::mch_sched_period_t value);
  private:
  ::fs::mac_rrc::mch_sched_period_t _internal_mch_sched_period() const;
  void _internal_set_mch_sched_period(::fs::mac_rrc::mch_sched_period_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.pmch_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbms_session_info_t > mbms_session_info_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_mcs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_alloc_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_mbms_session_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_session_per_pmch_;
  int mch_sched_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class mbsfn_sf_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.mbsfn_sf_cfg_t) */ {
 public:
  inline mbsfn_sf_cfg_t() : mbsfn_sf_cfg_t(nullptr) {};
  virtual ~mbsfn_sf_cfg_t();

  mbsfn_sf_cfg_t(const mbsfn_sf_cfg_t& from);
  mbsfn_sf_cfg_t(mbsfn_sf_cfg_t&& from) noexcept
    : mbsfn_sf_cfg_t() {
    *this = ::std::move(from);
  }

  inline mbsfn_sf_cfg_t& operator=(const mbsfn_sf_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mbsfn_sf_cfg_t& operator=(mbsfn_sf_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mbsfn_sf_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mbsfn_sf_cfg_t* internal_default_instance() {
    return reinterpret_cast<const mbsfn_sf_cfg_t*>(
               &_mbsfn_sf_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(mbsfn_sf_cfg_t& a, mbsfn_sf_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mbsfn_sf_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mbsfn_sf_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mbsfn_sf_cfg_t* New() const final {
    return CreateMaybeMessage<mbsfn_sf_cfg_t>(nullptr);
  }

  mbsfn_sf_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mbsfn_sf_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mbsfn_sf_cfg_t& from);
  void MergeFrom(const mbsfn_sf_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mbsfn_sf_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.mbsfn_sf_cfg_t";
  }
  protected:
  explicit mbsfn_sf_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSfAllocFieldNumber = 1,
    kRadioframeAllocOffsetFieldNumber = 2,
    kRadioframeAllocPeriodFieldNumber = 3,
    kNofAllocSubfrsFieldNumber = 4,
  };
  // uint32 sf_alloc = 1;
  void clear_sf_alloc();
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_alloc() const;
  void set_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sf_alloc() const;
  void _internal_set_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 radioframe_alloc_offset = 2;
  void clear_radioframe_alloc_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 radioframe_alloc_offset() const;
  void set_radioframe_alloc_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radioframe_alloc_offset() const;
  void _internal_set_radioframe_alloc_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.alloc_period_t radioframe_alloc_period = 3;
  void clear_radioframe_alloc_period();
  ::fs::mac_rrc::alloc_period_t radioframe_alloc_period() const;
  void set_radioframe_alloc_period(::fs::mac_rrc::alloc_period_t value);
  private:
  ::fs::mac_rrc::alloc_period_t _internal_radioframe_alloc_period() const;
  void _internal_set_radioframe_alloc_period(::fs::mac_rrc::alloc_period_t value);
  public:

  // .fs.mac_rrc.sf_alloc_type_t nof_alloc_subfrs = 4;
  void clear_nof_alloc_subfrs();
  ::fs::mac_rrc::sf_alloc_type_t nof_alloc_subfrs() const;
  void set_nof_alloc_subfrs(::fs::mac_rrc::sf_alloc_type_t value);
  private:
  ::fs::mac_rrc::sf_alloc_type_t _internal_nof_alloc_subfrs() const;
  void _internal_set_nof_alloc_subfrs(::fs::mac_rrc::sf_alloc_type_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.mbsfn_sf_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_alloc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radioframe_alloc_offset_;
  int radioframe_alloc_period_;
  int nof_alloc_subfrs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class mcch_msg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.mcch_msg_t) */ {
 public:
  inline mcch_msg_t() : mcch_msg_t(nullptr) {};
  virtual ~mcch_msg_t();

  mcch_msg_t(const mcch_msg_t& from);
  mcch_msg_t(mcch_msg_t&& from) noexcept
    : mcch_msg_t() {
    *this = ::std::move(from);
  }

  inline mcch_msg_t& operator=(const mcch_msg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mcch_msg_t& operator=(mcch_msg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mcch_msg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mcch_msg_t* internal_default_instance() {
    return reinterpret_cast<const mcch_msg_t*>(
               &_mcch_msg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(mcch_msg_t& a, mcch_msg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mcch_msg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mcch_msg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mcch_msg_t* New() const final {
    return CreateMaybeMessage<mcch_msg_t>(nullptr);
  }

  mcch_msg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mcch_msg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mcch_msg_t& from);
  void MergeFrom(const mcch_msg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mcch_msg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.mcch_msg_t";
  }
  protected:
  explicit mcch_msg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonSfAllocFieldNumber = 4,
    kPmchInfoListFieldNumber = 5,
    kNofPmchInfoFieldNumber = 1,
    kNofCommonSfAllocFieldNumber = 2,
    kCommonSfAllocPeriodFieldNumber = 3,
  };
  // repeated .fs.mac_rrc.mbsfn_sf_cfg_t common_sf_alloc = 4;
  int common_sf_alloc_size() const;
  private:
  int _internal_common_sf_alloc_size() const;
  public:
  void clear_common_sf_alloc();
  ::fs::mac_rrc::mbsfn_sf_cfg_t* mutable_common_sf_alloc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >*
      mutable_common_sf_alloc();
  private:
  const ::fs::mac_rrc::mbsfn_sf_cfg_t& _internal_common_sf_alloc(int index) const;
  ::fs::mac_rrc::mbsfn_sf_cfg_t* _internal_add_common_sf_alloc();
  public:
  const ::fs::mac_rrc::mbsfn_sf_cfg_t& common_sf_alloc(int index) const;
  ::fs::mac_rrc::mbsfn_sf_cfg_t* add_common_sf_alloc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >&
      common_sf_alloc() const;

  // repeated .fs.mac_rrc.pmch_info_t pmch_info_list = 5;
  int pmch_info_list_size() const;
  private:
  int _internal_pmch_info_list_size() const;
  public:
  void clear_pmch_info_list();
  ::fs::mac_rrc::pmch_info_t* mutable_pmch_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::pmch_info_t >*
      mutable_pmch_info_list();
  private:
  const ::fs::mac_rrc::pmch_info_t& _internal_pmch_info_list(int index) const;
  ::fs::mac_rrc::pmch_info_t* _internal_add_pmch_info_list();
  public:
  const ::fs::mac_rrc::pmch_info_t& pmch_info_list(int index) const;
  ::fs::mac_rrc::pmch_info_t* add_pmch_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::pmch_info_t >&
      pmch_info_list() const;

  // uint32 nof_pmch_info = 1;
  void clear_nof_pmch_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_pmch_info() const;
  void set_nof_pmch_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_pmch_info() const;
  void _internal_set_nof_pmch_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_common_sf_alloc = 2;
  void clear_nof_common_sf_alloc();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_common_sf_alloc() const;
  void set_nof_common_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_common_sf_alloc() const;
  void _internal_set_nof_common_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.common_sf_alloc_period_t common_sf_alloc_period = 3;
  void clear_common_sf_alloc_period();
  ::fs::mac_rrc::common_sf_alloc_period_t common_sf_alloc_period() const;
  void set_common_sf_alloc_period(::fs::mac_rrc::common_sf_alloc_period_t value);
  private:
  ::fs::mac_rrc::common_sf_alloc_period_t _internal_common_sf_alloc_period() const;
  void _internal_set_common_sf_alloc_period(::fs::mac_rrc::common_sf_alloc_period_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.mcch_msg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t > common_sf_alloc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::pmch_info_t > pmch_info_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_pmch_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_common_sf_alloc_;
  int common_sf_alloc_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class mbms_notif_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.mbms_notif_cfg_t) */ {
 public:
  inline mbms_notif_cfg_t() : mbms_notif_cfg_t(nullptr) {};
  virtual ~mbms_notif_cfg_t();

  mbms_notif_cfg_t(const mbms_notif_cfg_t& from);
  mbms_notif_cfg_t(mbms_notif_cfg_t&& from) noexcept
    : mbms_notif_cfg_t() {
    *this = ::std::move(from);
  }

  inline mbms_notif_cfg_t& operator=(const mbms_notif_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mbms_notif_cfg_t& operator=(mbms_notif_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mbms_notif_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mbms_notif_cfg_t* internal_default_instance() {
    return reinterpret_cast<const mbms_notif_cfg_t*>(
               &_mbms_notif_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(mbms_notif_cfg_t& a, mbms_notif_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mbms_notif_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mbms_notif_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mbms_notif_cfg_t* New() const final {
    return CreateMaybeMessage<mbms_notif_cfg_t>(nullptr);
  }

  mbms_notif_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mbms_notif_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mbms_notif_cfg_t& from);
  void MergeFrom(const mbms_notif_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mbms_notif_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.mbms_notif_cfg_t";
  }
  protected:
  explicit mbms_notif_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifOffsetFieldNumber = 1,
    kNotifSfIdxFieldNumber = 2,
    kNotifRepeatCoeffFieldNumber = 3,
  };
  // uint32 notif_offset = 1;
  void clear_notif_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 notif_offset() const;
  void set_notif_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notif_offset() const;
  void _internal_set_notif_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 notif_sf_idx = 2;
  void clear_notif_sf_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 notif_sf_idx() const;
  void set_notif_sf_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notif_sf_idx() const;
  void _internal_set_notif_sf_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.coeff_t notif_repeat_coeff = 3;
  void clear_notif_repeat_coeff();
  ::fs::mac_rrc::coeff_t notif_repeat_coeff() const;
  void set_notif_repeat_coeff(::fs::mac_rrc::coeff_t value);
  private:
  ::fs::mac_rrc::coeff_t _internal_notif_repeat_coeff() const;
  void _internal_set_notif_repeat_coeff(::fs::mac_rrc::coeff_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.mbms_notif_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notif_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notif_sf_idx_;
  int notif_repeat_coeff_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class mcch_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.mcch_cfg_t) */ {
 public:
  inline mcch_cfg_t() : mcch_cfg_t(nullptr) {};
  virtual ~mcch_cfg_t();

  mcch_cfg_t(const mcch_cfg_t& from);
  mcch_cfg_t(mcch_cfg_t&& from) noexcept
    : mcch_cfg_t() {
    *this = ::std::move(from);
  }

  inline mcch_cfg_t& operator=(const mcch_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mcch_cfg_t& operator=(mcch_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mcch_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mcch_cfg_t* internal_default_instance() {
    return reinterpret_cast<const mcch_cfg_t*>(
               &_mcch_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(mcch_cfg_t& a, mcch_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mcch_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mcch_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mcch_cfg_t* New() const final {
    return CreateMaybeMessage<mcch_cfg_t>(nullptr);
  }

  mcch_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mcch_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mcch_cfg_t& from);
  void MergeFrom(const mcch_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mcch_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.mcch_cfg_t";
  }
  protected:
  explicit mcch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSfAllocInfoFieldNumber = 1,
    kMcchOffsetFieldNumber = 2,
    kSigMcsFieldNumber = 3,
    kMcchModPeriodFieldNumber = 4,
    kMcchRepeatPeriodFieldNumber = 5,
  };
  // uint32 sf_alloc_info = 1;
  void clear_sf_alloc_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_alloc_info() const;
  void set_sf_alloc_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sf_alloc_info() const;
  void _internal_set_sf_alloc_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mcch_offset = 2;
  void clear_mcch_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 mcch_offset() const;
  void set_mcch_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcch_offset() const;
  void _internal_set_mcch_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.sig_mcs_t sig_mcs = 3;
  void clear_sig_mcs();
  ::fs::mac_rrc::sig_mcs_t sig_mcs() const;
  void set_sig_mcs(::fs::mac_rrc::sig_mcs_t value);
  private:
  ::fs::mac_rrc::sig_mcs_t _internal_sig_mcs() const;
  void _internal_set_sig_mcs(::fs::mac_rrc::sig_mcs_t value);
  public:

  // .fs.mac_rrc.mod_period_t mcch_mod_period = 4;
  void clear_mcch_mod_period();
  ::fs::mac_rrc::mod_period_t mcch_mod_period() const;
  void set_mcch_mod_period(::fs::mac_rrc::mod_period_t value);
  private:
  ::fs::mac_rrc::mod_period_t _internal_mcch_mod_period() const;
  void _internal_set_mcch_mod_period(::fs::mac_rrc::mod_period_t value);
  public:

  // .fs.mac_rrc.repeat_period_t mcch_repeat_period = 5;
  void clear_mcch_repeat_period();
  ::fs::mac_rrc::repeat_period_t mcch_repeat_period() const;
  void set_mcch_repeat_period(::fs::mac_rrc::repeat_period_t value);
  private:
  ::fs::mac_rrc::repeat_period_t _internal_mcch_repeat_period() const;
  void _internal_set_mcch_repeat_period(::fs::mac_rrc::repeat_period_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.mcch_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_alloc_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mcch_offset_;
  int sig_mcs_;
  int mcch_mod_period_;
  int mcch_repeat_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class mbsfn_area_info_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.mbsfn_area_info_t) */ {
 public:
  inline mbsfn_area_info_t() : mbsfn_area_info_t(nullptr) {};
  virtual ~mbsfn_area_info_t();

  mbsfn_area_info_t(const mbsfn_area_info_t& from);
  mbsfn_area_info_t(mbsfn_area_info_t&& from) noexcept
    : mbsfn_area_info_t() {
    *this = ::std::move(from);
  }

  inline mbsfn_area_info_t& operator=(const mbsfn_area_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mbsfn_area_info_t& operator=(mbsfn_area_info_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mbsfn_area_info_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mbsfn_area_info_t* internal_default_instance() {
    return reinterpret_cast<const mbsfn_area_info_t*>(
               &_mbsfn_area_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(mbsfn_area_info_t& a, mbsfn_area_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mbsfn_area_info_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mbsfn_area_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mbsfn_area_info_t* New() const final {
    return CreateMaybeMessage<mbsfn_area_info_t>(nullptr);
  }

  mbsfn_area_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mbsfn_area_info_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mbsfn_area_info_t& from);
  void MergeFrom(const mbsfn_area_info_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mbsfn_area_info_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.mbsfn_area_info_t";
  }
  protected:
  explicit mbsfn_area_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMcchCfgFieldNumber = 3,
    kMbsfnAreaIdFieldNumber = 1,
    kNotifIndFieldNumber = 2,
    kNonMbsfnRegionLenFieldNumber = 4,
  };
  // .fs.mac_rrc.mcch_cfg_t mcch_cfg = 3;
  bool has_mcch_cfg() const;
  private:
  bool _internal_has_mcch_cfg() const;
  public:
  void clear_mcch_cfg();
  const ::fs::mac_rrc::mcch_cfg_t& mcch_cfg() const;
  ::fs::mac_rrc::mcch_cfg_t* release_mcch_cfg();
  ::fs::mac_rrc::mcch_cfg_t* mutable_mcch_cfg();
  void set_allocated_mcch_cfg(::fs::mac_rrc::mcch_cfg_t* mcch_cfg);
  private:
  const ::fs::mac_rrc::mcch_cfg_t& _internal_mcch_cfg() const;
  ::fs::mac_rrc::mcch_cfg_t* _internal_mutable_mcch_cfg();
  public:
  void unsafe_arena_set_allocated_mcch_cfg(
      ::fs::mac_rrc::mcch_cfg_t* mcch_cfg);
  ::fs::mac_rrc::mcch_cfg_t* unsafe_arena_release_mcch_cfg();

  // uint32 mbsfn_area_id = 1;
  void clear_mbsfn_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_area_id() const;
  void set_mbsfn_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mbsfn_area_id() const;
  void _internal_set_mbsfn_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 notif_ind = 2;
  void clear_notif_ind();
  ::PROTOBUF_NAMESPACE_ID::uint32 notif_ind() const;
  void set_notif_ind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notif_ind() const;
  void _internal_set_notif_ind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.region_len_t non_mbsfn_region_len = 4;
  void clear_non_mbsfn_region_len();
  ::fs::mac_rrc::region_len_t non_mbsfn_region_len() const;
  void set_non_mbsfn_region_len(::fs::mac_rrc::region_len_t value);
  private:
  ::fs::mac_rrc::region_len_t _internal_non_mbsfn_region_len() const;
  void _internal_set_non_mbsfn_region_len(::fs::mac_rrc::region_len_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.mbsfn_area_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::mac_rrc::mcch_cfg_t* mcch_cfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_area_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notif_ind_;
  int non_mbsfn_region_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class sib13_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.sib13_t) */ {
 public:
  inline sib13_t() : sib13_t(nullptr) {};
  virtual ~sib13_t();

  sib13_t(const sib13_t& from);
  sib13_t(sib13_t&& from) noexcept
    : sib13_t() {
    *this = ::std::move(from);
  }

  inline sib13_t& operator=(const sib13_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline sib13_t& operator=(sib13_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sib13_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sib13_t* internal_default_instance() {
    return reinterpret_cast<const sib13_t*>(
               &_sib13_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(sib13_t& a, sib13_t& b) {
    a.Swap(&b);
  }
  inline void Swap(sib13_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sib13_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sib13_t* New() const final {
    return CreateMaybeMessage<sib13_t>(nullptr);
  }

  sib13_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sib13_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sib13_t& from);
  void MergeFrom(const sib13_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sib13_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.sib13_t";
  }
  protected:
  explicit sib13_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMbsfnAreaInfoListFieldNumber = 4,
    kNotifCfgFieldNumber = 3,
    kMaxMbsfnAreaFieldNumber = 1,
    kNofMbsfnAreaInfoFieldNumber = 2,
  };
  // repeated .fs.mac_rrc.mbsfn_area_info_t mbsfn_area_info_list = 4;
  int mbsfn_area_info_list_size() const;
  private:
  int _internal_mbsfn_area_info_list_size() const;
  public:
  void clear_mbsfn_area_info_list();
  ::fs::mac_rrc::mbsfn_area_info_t* mutable_mbsfn_area_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_area_info_t >*
      mutable_mbsfn_area_info_list();
  private:
  const ::fs::mac_rrc::mbsfn_area_info_t& _internal_mbsfn_area_info_list(int index) const;
  ::fs::mac_rrc::mbsfn_area_info_t* _internal_add_mbsfn_area_info_list();
  public:
  const ::fs::mac_rrc::mbsfn_area_info_t& mbsfn_area_info_list(int index) const;
  ::fs::mac_rrc::mbsfn_area_info_t* add_mbsfn_area_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_area_info_t >&
      mbsfn_area_info_list() const;

  // .fs.mac_rrc.mbms_notif_cfg_t notif_cfg = 3;
  bool has_notif_cfg() const;
  private:
  bool _internal_has_notif_cfg() const;
  public:
  void clear_notif_cfg();
  const ::fs::mac_rrc::mbms_notif_cfg_t& notif_cfg() const;
  ::fs::mac_rrc::mbms_notif_cfg_t* release_notif_cfg();
  ::fs::mac_rrc::mbms_notif_cfg_t* mutable_notif_cfg();
  void set_allocated_notif_cfg(::fs::mac_rrc::mbms_notif_cfg_t* notif_cfg);
  private:
  const ::fs::mac_rrc::mbms_notif_cfg_t& _internal_notif_cfg() const;
  ::fs::mac_rrc::mbms_notif_cfg_t* _internal_mutable_notif_cfg();
  public:
  void unsafe_arena_set_allocated_notif_cfg(
      ::fs::mac_rrc::mbms_notif_cfg_t* notif_cfg);
  ::fs::mac_rrc::mbms_notif_cfg_t* unsafe_arena_release_notif_cfg();

  // uint32 max_mbsfn_area = 1;
  void clear_max_mbsfn_area();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_mbsfn_area() const;
  void set_max_mbsfn_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_mbsfn_area() const;
  void _internal_set_max_mbsfn_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_mbsfn_area_info = 2;
  void clear_nof_mbsfn_area_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_mbsfn_area_info() const;
  void set_nof_mbsfn_area_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_mbsfn_area_info() const;
  void _internal_set_nof_mbsfn_area_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.sib13_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_area_info_t > mbsfn_area_info_list_;
  ::fs::mac_rrc::mbms_notif_cfg_t* notif_cfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_mbsfn_area_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_mbsfn_area_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class sib2_mbms_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.sib2_mbms_t) */ {
 public:
  inline sib2_mbms_t() : sib2_mbms_t(nullptr) {};
  virtual ~sib2_mbms_t();

  sib2_mbms_t(const sib2_mbms_t& from);
  sib2_mbms_t(sib2_mbms_t&& from) noexcept
    : sib2_mbms_t() {
    *this = ::std::move(from);
  }

  inline sib2_mbms_t& operator=(const sib2_mbms_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline sib2_mbms_t& operator=(sib2_mbms_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sib2_mbms_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sib2_mbms_t* internal_default_instance() {
    return reinterpret_cast<const sib2_mbms_t*>(
               &_sib2_mbms_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(sib2_mbms_t& a, sib2_mbms_t& b) {
    a.Swap(&b);
  }
  inline void Swap(sib2_mbms_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sib2_mbms_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sib2_mbms_t* New() const final {
    return CreateMaybeMessage<sib2_mbms_t>(nullptr);
  }

  sib2_mbms_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sib2_mbms_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sib2_mbms_t& from);
  void MergeFrom(const sib2_mbms_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sib2_mbms_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.sib2_mbms_t";
  }
  protected:
  explicit sib2_mbms_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMbsfnSfCfgListFieldNumber = 4,
    kNofMbsfnSfCfgFieldNumber = 1,
    kMbsfnSfCfgListPresentFieldNumber = 2,
    kMaxNofMbsfnSfCfgFieldNumber = 3,
  };
  // repeated .fs.mac_rrc.mbsfn_sf_cfg_t mbsfn_sf_cfg_list = 4;
  int mbsfn_sf_cfg_list_size() const;
  private:
  int _internal_mbsfn_sf_cfg_list_size() const;
  public:
  void clear_mbsfn_sf_cfg_list();
  ::fs::mac_rrc::mbsfn_sf_cfg_t* mutable_mbsfn_sf_cfg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >*
      mutable_mbsfn_sf_cfg_list();
  private:
  const ::fs::mac_rrc::mbsfn_sf_cfg_t& _internal_mbsfn_sf_cfg_list(int index) const;
  ::fs::mac_rrc::mbsfn_sf_cfg_t* _internal_add_mbsfn_sf_cfg_list();
  public:
  const ::fs::mac_rrc::mbsfn_sf_cfg_t& mbsfn_sf_cfg_list(int index) const;
  ::fs::mac_rrc::mbsfn_sf_cfg_t* add_mbsfn_sf_cfg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >&
      mbsfn_sf_cfg_list() const;

  // int32 nof_mbsfn_sf_cfg = 1;
  void clear_nof_mbsfn_sf_cfg();
  ::PROTOBUF_NAMESPACE_ID::int32 nof_mbsfn_sf_cfg() const;
  void set_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nof_mbsfn_sf_cfg() const;
  void _internal_set_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mbsfn_sf_cfg_list_present = 2;
  void clear_mbsfn_sf_cfg_list_present();
  bool mbsfn_sf_cfg_list_present() const;
  void set_mbsfn_sf_cfg_list_present(bool value);
  private:
  bool _internal_mbsfn_sf_cfg_list_present() const;
  void _internal_set_mbsfn_sf_cfg_list_present(bool value);
  public:

  // uint32 max_nof_mbsfn_sf_cfg = 3;
  void clear_max_nof_mbsfn_sf_cfg();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nof_mbsfn_sf_cfg() const;
  void set_max_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_nof_mbsfn_sf_cfg() const;
  void _internal_set_max_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.sib2_mbms_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t > mbsfn_sf_cfg_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 nof_mbsfn_sf_cfg_;
  bool mbsfn_sf_cfg_list_present_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nof_mbsfn_sf_cfg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// -------------------------------------------------------------------

class buffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.buffer) */ {
 public:
  inline buffer() : buffer(nullptr) {};
  virtual ~buffer();

  buffer(const buffer& from);
  buffer(buffer&& from) noexcept
    : buffer() {
    *this = ::std::move(from);
  }

  inline buffer& operator=(const buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline buffer& operator=(buffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const buffer* internal_default_instance() {
    return reinterpret_cast<const buffer*>(
               &_buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(buffer& a, buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(buffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(buffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline buffer* New() const final {
    return CreateMaybeMessage<buffer>(nullptr);
  }

  buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<buffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const buffer& from);
  void MergeFrom(const buffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(buffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.buffer";
  }
  protected:
  explicit buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rrc_5fmcch_5ft_2eproto);
    return ::descriptor_table_rrc_5fmcch_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated uint32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rrc_5fmcch_5ft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// plmn_id_t

// uint32 nof_mnc_digits = 1;
inline void plmn_id_t::clear_nof_mnc_digits() {
  nof_mnc_digits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plmn_id_t::_internal_nof_mnc_digits() const {
  return nof_mnc_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plmn_id_t::nof_mnc_digits() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.plmn_id_t.nof_mnc_digits)
  return _internal_nof_mnc_digits();
}
inline void plmn_id_t::_internal_set_nof_mnc_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_mnc_digits_ = value;
}
inline void plmn_id_t::set_nof_mnc_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_mnc_digits(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.plmn_id_t.nof_mnc_digits)
}

// repeated uint32 mcc = 2;
inline int plmn_id_t::_internal_mcc_size() const {
  return mcc_.size();
}
inline int plmn_id_t::mcc_size() const {
  return _internal_mcc_size();
}
inline void plmn_id_t::clear_mcc() {
  mcc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plmn_id_t::_internal_mcc(int index) const {
  return mcc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plmn_id_t::mcc(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.plmn_id_t.mcc)
  return _internal_mcc(index);
}
inline void plmn_id_t::set_mcc(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mcc_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.plmn_id_t.mcc)
}
inline void plmn_id_t::_internal_add_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mcc_.Add(value);
}
inline void plmn_id_t::add_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mcc(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.plmn_id_t.mcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plmn_id_t::_internal_mcc() const {
  return mcc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plmn_id_t::mcc() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.plmn_id_t.mcc)
  return _internal_mcc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plmn_id_t::_internal_mutable_mcc() {
  return &mcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plmn_id_t::mutable_mcc() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.plmn_id_t.mcc)
  return _internal_mutable_mcc();
}

// repeated uint32 mnc = 3;
inline int plmn_id_t::_internal_mnc_size() const {
  return mnc_.size();
}
inline int plmn_id_t::mnc_size() const {
  return _internal_mnc_size();
}
inline void plmn_id_t::clear_mnc() {
  mnc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plmn_id_t::_internal_mnc(int index) const {
  return mnc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plmn_id_t::mnc(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.plmn_id_t.mnc)
  return _internal_mnc(index);
}
inline void plmn_id_t::set_mnc(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mnc_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.plmn_id_t.mnc)
}
inline void plmn_id_t::_internal_add_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mnc_.Add(value);
}
inline void plmn_id_t::add_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mnc(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.plmn_id_t.mnc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plmn_id_t::_internal_mnc() const {
  return mnc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plmn_id_t::mnc() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.plmn_id_t.mnc)
  return _internal_mnc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plmn_id_t::_internal_mutable_mnc() {
  return &mnc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plmn_id_t::mutable_mnc() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.plmn_id_t.mnc)
  return _internal_mutable_mnc();
}

// -------------------------------------------------------------------

// choice

// uint32 plmn_idx = 1;
inline void choice::clear_plmn_idx() {
  plmn_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 choice::_internal_plmn_idx() const {
  return plmn_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 choice::plmn_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.choice.plmn_idx)
  return _internal_plmn_idx();
}
inline void choice::_internal_set_plmn_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  plmn_idx_ = value;
}
inline void choice::set_plmn_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_plmn_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.choice.plmn_idx)
}

// .fs.mac_rrc.plmn_id_t explicit_value = 2;
inline bool choice::_internal_has_explicit_value() const {
  return this != internal_default_instance() && explicit_value_ != nullptr;
}
inline bool choice::has_explicit_value() const {
  return _internal_has_explicit_value();
}
inline void choice::clear_explicit_value() {
  if (GetArena() == nullptr && explicit_value_ != nullptr) {
    delete explicit_value_;
  }
  explicit_value_ = nullptr;
}
inline const ::fs::mac_rrc::plmn_id_t& choice::_internal_explicit_value() const {
  const ::fs::mac_rrc::plmn_id_t* p = explicit_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::plmn_id_t*>(
      &::fs::mac_rrc::_plmn_id_t_default_instance_);
}
inline const ::fs::mac_rrc::plmn_id_t& choice::explicit_value() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.choice.explicit_value)
  return _internal_explicit_value();
}
inline void choice::unsafe_arena_set_allocated_explicit_value(
    ::fs::mac_rrc::plmn_id_t* explicit_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(explicit_value_);
  }
  explicit_value_ = explicit_value;
  if (explicit_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.choice.explicit_value)
}
inline ::fs::mac_rrc::plmn_id_t* choice::release_explicit_value() {
  auto temp = unsafe_arena_release_explicit_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::plmn_id_t* choice::unsafe_arena_release_explicit_value() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.choice.explicit_value)
  
  ::fs::mac_rrc::plmn_id_t* temp = explicit_value_;
  explicit_value_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::plmn_id_t* choice::_internal_mutable_explicit_value() {
  
  if (explicit_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::plmn_id_t>(GetArena());
    explicit_value_ = p;
  }
  return explicit_value_;
}
inline ::fs::mac_rrc::plmn_id_t* choice::mutable_explicit_value() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.choice.explicit_value)
  return _internal_mutable_explicit_value();
}
inline void choice::set_allocated_explicit_value(::fs::mac_rrc::plmn_id_t* explicit_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete explicit_value_;
  }
  if (explicit_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(explicit_value);
    if (message_arena != submessage_arena) {
      explicit_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_value, submessage_arena);
    }
    
  } else {
    
  }
  explicit_value_ = explicit_value;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.choice.explicit_value)
}

// -------------------------------------------------------------------

// tmgi_t

// .fs.mac_rrc.choice plmn_id = 1;
inline bool tmgi_t::_internal_has_plmn_id() const {
  return this != internal_default_instance() && plmn_id_ != nullptr;
}
inline bool tmgi_t::has_plmn_id() const {
  return _internal_has_plmn_id();
}
inline void tmgi_t::clear_plmn_id() {
  if (GetArena() == nullptr && plmn_id_ != nullptr) {
    delete plmn_id_;
  }
  plmn_id_ = nullptr;
}
inline const ::fs::mac_rrc::choice& tmgi_t::_internal_plmn_id() const {
  const ::fs::mac_rrc::choice* p = plmn_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::choice*>(
      &::fs::mac_rrc::_choice_default_instance_);
}
inline const ::fs::mac_rrc::choice& tmgi_t::plmn_id() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.tmgi_t.plmn_id)
  return _internal_plmn_id();
}
inline void tmgi_t::unsafe_arena_set_allocated_plmn_id(
    ::fs::mac_rrc::choice* plmn_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plmn_id_);
  }
  plmn_id_ = plmn_id;
  if (plmn_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.tmgi_t.plmn_id)
}
inline ::fs::mac_rrc::choice* tmgi_t::release_plmn_id() {
  auto temp = unsafe_arena_release_plmn_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::choice* tmgi_t::unsafe_arena_release_plmn_id() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.tmgi_t.plmn_id)
  
  ::fs::mac_rrc::choice* temp = plmn_id_;
  plmn_id_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::choice* tmgi_t::_internal_mutable_plmn_id() {
  
  if (plmn_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::choice>(GetArena());
    plmn_id_ = p;
  }
  return plmn_id_;
}
inline ::fs::mac_rrc::choice* tmgi_t::mutable_plmn_id() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.tmgi_t.plmn_id)
  return _internal_mutable_plmn_id();
}
inline void tmgi_t::set_allocated_plmn_id(::fs::mac_rrc::choice* plmn_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plmn_id_;
  }
  if (plmn_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plmn_id);
    if (message_arena != submessage_arena) {
      plmn_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plmn_id, submessage_arena);
    }
    
  } else {
    
  }
  plmn_id_ = plmn_id;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.tmgi_t.plmn_id)
}

// .fs.mac_rrc.plmn_id_type_t plmn_id_type = 2;
inline void tmgi_t::clear_plmn_id_type() {
  plmn_id_type_ = 0;
}
inline ::fs::mac_rrc::plmn_id_type_t tmgi_t::_internal_plmn_id_type() const {
  return static_cast< ::fs::mac_rrc::plmn_id_type_t >(plmn_id_type_);
}
inline ::fs::mac_rrc::plmn_id_type_t tmgi_t::plmn_id_type() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.tmgi_t.plmn_id_type)
  return _internal_plmn_id_type();
}
inline void tmgi_t::_internal_set_plmn_id_type(::fs::mac_rrc::plmn_id_type_t value) {
  
  plmn_id_type_ = value;
}
inline void tmgi_t::set_plmn_id_type(::fs::mac_rrc::plmn_id_type_t value) {
  _internal_set_plmn_id_type(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.tmgi_t.plmn_id_type)
}

// repeated uint32 serviced_id = 3;
inline int tmgi_t::_internal_serviced_id_size() const {
  return serviced_id_.size();
}
inline int tmgi_t::serviced_id_size() const {
  return _internal_serviced_id_size();
}
inline void tmgi_t::clear_serviced_id() {
  serviced_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tmgi_t::_internal_serviced_id(int index) const {
  return serviced_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tmgi_t::serviced_id(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.tmgi_t.serviced_id)
  return _internal_serviced_id(index);
}
inline void tmgi_t::set_serviced_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  serviced_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.tmgi_t.serviced_id)
}
inline void tmgi_t::_internal_add_serviced_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  serviced_id_.Add(value);
}
inline void tmgi_t::add_serviced_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_serviced_id(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.tmgi_t.serviced_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
tmgi_t::_internal_serviced_id() const {
  return serviced_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
tmgi_t::serviced_id() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.tmgi_t.serviced_id)
  return _internal_serviced_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
tmgi_t::_internal_mutable_serviced_id() {
  return &serviced_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
tmgi_t::mutable_serviced_id() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.tmgi_t.serviced_id)
  return _internal_mutable_serviced_id();
}

// -------------------------------------------------------------------

// mbms_session_info_t

// uint32 lc_ch_id = 1;
inline void mbms_session_info_t::clear_lc_ch_id() {
  lc_ch_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_session_info_t::_internal_lc_ch_id() const {
  return lc_ch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_session_info_t::lc_ch_id() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_session_info_t.lc_ch_id)
  return _internal_lc_ch_id();
}
inline void mbms_session_info_t::_internal_set_lc_ch_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lc_ch_id_ = value;
}
inline void mbms_session_info_t::set_lc_ch_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lc_ch_id(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbms_session_info_t.lc_ch_id)
}

// uint32 session_id = 2;
inline void mbms_session_info_t::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_session_info_t::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_session_info_t::session_id() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_session_info_t.session_id)
  return _internal_session_id();
}
inline void mbms_session_info_t::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void mbms_session_info_t::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbms_session_info_t.session_id)
}

// bool session_id_present = 3;
inline void mbms_session_info_t::clear_session_id_present() {
  session_id_present_ = false;
}
inline bool mbms_session_info_t::_internal_session_id_present() const {
  return session_id_present_;
}
inline bool mbms_session_info_t::session_id_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_session_info_t.session_id_present)
  return _internal_session_id_present();
}
inline void mbms_session_info_t::_internal_set_session_id_present(bool value) {
  
  session_id_present_ = value;
}
inline void mbms_session_info_t::set_session_id_present(bool value) {
  _internal_set_session_id_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbms_session_info_t.session_id_present)
}

// .fs.mac_rrc.tmgi_t tmgi = 4;
inline bool mbms_session_info_t::_internal_has_tmgi() const {
  return this != internal_default_instance() && tmgi_ != nullptr;
}
inline bool mbms_session_info_t::has_tmgi() const {
  return _internal_has_tmgi();
}
inline void mbms_session_info_t::clear_tmgi() {
  if (GetArena() == nullptr && tmgi_ != nullptr) {
    delete tmgi_;
  }
  tmgi_ = nullptr;
}
inline const ::fs::mac_rrc::tmgi_t& mbms_session_info_t::_internal_tmgi() const {
  const ::fs::mac_rrc::tmgi_t* p = tmgi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::tmgi_t*>(
      &::fs::mac_rrc::_tmgi_t_default_instance_);
}
inline const ::fs::mac_rrc::tmgi_t& mbms_session_info_t::tmgi() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_session_info_t.tmgi)
  return _internal_tmgi();
}
inline void mbms_session_info_t::unsafe_arena_set_allocated_tmgi(
    ::fs::mac_rrc::tmgi_t* tmgi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tmgi_);
  }
  tmgi_ = tmgi;
  if (tmgi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.mbms_session_info_t.tmgi)
}
inline ::fs::mac_rrc::tmgi_t* mbms_session_info_t::release_tmgi() {
  auto temp = unsafe_arena_release_tmgi();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::tmgi_t* mbms_session_info_t::unsafe_arena_release_tmgi() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.mbms_session_info_t.tmgi)
  
  ::fs::mac_rrc::tmgi_t* temp = tmgi_;
  tmgi_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::tmgi_t* mbms_session_info_t::_internal_mutable_tmgi() {
  
  if (tmgi_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::tmgi_t>(GetArena());
    tmgi_ = p;
  }
  return tmgi_;
}
inline ::fs::mac_rrc::tmgi_t* mbms_session_info_t::mutable_tmgi() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.mbms_session_info_t.tmgi)
  return _internal_mutable_tmgi();
}
inline void mbms_session_info_t::set_allocated_tmgi(::fs::mac_rrc::tmgi_t* tmgi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tmgi_;
  }
  if (tmgi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tmgi);
    if (message_arena != submessage_arena) {
      tmgi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tmgi, submessage_arena);
    }
    
  } else {
    
  }
  tmgi_ = tmgi;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.mbms_session_info_t.tmgi)
}

// -------------------------------------------------------------------

// pmch_info_t

// uint32 data_mcs = 1;
inline void pmch_info_t::clear_data_mcs() {
  data_mcs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::_internal_data_mcs() const {
  return data_mcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::data_mcs() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.pmch_info_t.data_mcs)
  return _internal_data_mcs();
}
inline void pmch_info_t::_internal_set_data_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_mcs_ = value;
}
inline void pmch_info_t::set_data_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_mcs(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.pmch_info_t.data_mcs)
}

// uint32 sf_alloc_end = 2;
inline void pmch_info_t::clear_sf_alloc_end() {
  sf_alloc_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::_internal_sf_alloc_end() const {
  return sf_alloc_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::sf_alloc_end() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.pmch_info_t.sf_alloc_end)
  return _internal_sf_alloc_end();
}
inline void pmch_info_t::_internal_set_sf_alloc_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sf_alloc_end_ = value;
}
inline void pmch_info_t::set_sf_alloc_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sf_alloc_end(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.pmch_info_t.sf_alloc_end)
}

// uint32 nof_mbms_session_info = 3;
inline void pmch_info_t::clear_nof_mbms_session_info() {
  nof_mbms_session_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::_internal_nof_mbms_session_info() const {
  return nof_mbms_session_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::nof_mbms_session_info() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.pmch_info_t.nof_mbms_session_info)
  return _internal_nof_mbms_session_info();
}
inline void pmch_info_t::_internal_set_nof_mbms_session_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_mbms_session_info_ = value;
}
inline void pmch_info_t::set_nof_mbms_session_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_mbms_session_info(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.pmch_info_t.nof_mbms_session_info)
}

// uint32 max_session_per_pmch = 4;
inline void pmch_info_t::clear_max_session_per_pmch() {
  max_session_per_pmch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::_internal_max_session_per_pmch() const {
  return max_session_per_pmch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pmch_info_t::max_session_per_pmch() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.pmch_info_t.max_session_per_pmch)
  return _internal_max_session_per_pmch();
}
inline void pmch_info_t::_internal_set_max_session_per_pmch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_session_per_pmch_ = value;
}
inline void pmch_info_t::set_max_session_per_pmch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_session_per_pmch(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.pmch_info_t.max_session_per_pmch)
}

// .fs.mac_rrc.mch_sched_period_t mch_sched_period = 5;
inline void pmch_info_t::clear_mch_sched_period() {
  mch_sched_period_ = 0;
}
inline ::fs::mac_rrc::mch_sched_period_t pmch_info_t::_internal_mch_sched_period() const {
  return static_cast< ::fs::mac_rrc::mch_sched_period_t >(mch_sched_period_);
}
inline ::fs::mac_rrc::mch_sched_period_t pmch_info_t::mch_sched_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.pmch_info_t.mch_sched_period)
  return _internal_mch_sched_period();
}
inline void pmch_info_t::_internal_set_mch_sched_period(::fs::mac_rrc::mch_sched_period_t value) {
  
  mch_sched_period_ = value;
}
inline void pmch_info_t::set_mch_sched_period(::fs::mac_rrc::mch_sched_period_t value) {
  _internal_set_mch_sched_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.pmch_info_t.mch_sched_period)
}

// repeated .fs.mac_rrc.mbms_session_info_t mbms_session_info_list = 6;
inline int pmch_info_t::_internal_mbms_session_info_list_size() const {
  return mbms_session_info_list_.size();
}
inline int pmch_info_t::mbms_session_info_list_size() const {
  return _internal_mbms_session_info_list_size();
}
inline void pmch_info_t::clear_mbms_session_info_list() {
  mbms_session_info_list_.Clear();
}
inline ::fs::mac_rrc::mbms_session_info_t* pmch_info_t::mutable_mbms_session_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.pmch_info_t.mbms_session_info_list)
  return mbms_session_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbms_session_info_t >*
pmch_info_t::mutable_mbms_session_info_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.pmch_info_t.mbms_session_info_list)
  return &mbms_session_info_list_;
}
inline const ::fs::mac_rrc::mbms_session_info_t& pmch_info_t::_internal_mbms_session_info_list(int index) const {
  return mbms_session_info_list_.Get(index);
}
inline const ::fs::mac_rrc::mbms_session_info_t& pmch_info_t::mbms_session_info_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.pmch_info_t.mbms_session_info_list)
  return _internal_mbms_session_info_list(index);
}
inline ::fs::mac_rrc::mbms_session_info_t* pmch_info_t::_internal_add_mbms_session_info_list() {
  return mbms_session_info_list_.Add();
}
inline ::fs::mac_rrc::mbms_session_info_t* pmch_info_t::add_mbms_session_info_list() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.pmch_info_t.mbms_session_info_list)
  return _internal_add_mbms_session_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbms_session_info_t >&
pmch_info_t::mbms_session_info_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.pmch_info_t.mbms_session_info_list)
  return mbms_session_info_list_;
}

// -------------------------------------------------------------------

// mbsfn_sf_cfg_t

// uint32 sf_alloc = 1;
inline void mbsfn_sf_cfg_t::clear_sf_alloc() {
  sf_alloc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_sf_cfg_t::_internal_sf_alloc() const {
  return sf_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_sf_cfg_t::sf_alloc() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_sf_cfg_t.sf_alloc)
  return _internal_sf_alloc();
}
inline void mbsfn_sf_cfg_t::_internal_set_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sf_alloc_ = value;
}
inline void mbsfn_sf_cfg_t::set_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sf_alloc(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_sf_cfg_t.sf_alloc)
}

// uint32 radioframe_alloc_offset = 2;
inline void mbsfn_sf_cfg_t::clear_radioframe_alloc_offset() {
  radioframe_alloc_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_sf_cfg_t::_internal_radioframe_alloc_offset() const {
  return radioframe_alloc_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_sf_cfg_t::radioframe_alloc_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_sf_cfg_t.radioframe_alloc_offset)
  return _internal_radioframe_alloc_offset();
}
inline void mbsfn_sf_cfg_t::_internal_set_radioframe_alloc_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  radioframe_alloc_offset_ = value;
}
inline void mbsfn_sf_cfg_t::set_radioframe_alloc_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radioframe_alloc_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_sf_cfg_t.radioframe_alloc_offset)
}

// .fs.mac_rrc.alloc_period_t radioframe_alloc_period = 3;
inline void mbsfn_sf_cfg_t::clear_radioframe_alloc_period() {
  radioframe_alloc_period_ = 0;
}
inline ::fs::mac_rrc::alloc_period_t mbsfn_sf_cfg_t::_internal_radioframe_alloc_period() const {
  return static_cast< ::fs::mac_rrc::alloc_period_t >(radioframe_alloc_period_);
}
inline ::fs::mac_rrc::alloc_period_t mbsfn_sf_cfg_t::radioframe_alloc_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_sf_cfg_t.radioframe_alloc_period)
  return _internal_radioframe_alloc_period();
}
inline void mbsfn_sf_cfg_t::_internal_set_radioframe_alloc_period(::fs::mac_rrc::alloc_period_t value) {
  
  radioframe_alloc_period_ = value;
}
inline void mbsfn_sf_cfg_t::set_radioframe_alloc_period(::fs::mac_rrc::alloc_period_t value) {
  _internal_set_radioframe_alloc_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_sf_cfg_t.radioframe_alloc_period)
}

// .fs.mac_rrc.sf_alloc_type_t nof_alloc_subfrs = 4;
inline void mbsfn_sf_cfg_t::clear_nof_alloc_subfrs() {
  nof_alloc_subfrs_ = 0;
}
inline ::fs::mac_rrc::sf_alloc_type_t mbsfn_sf_cfg_t::_internal_nof_alloc_subfrs() const {
  return static_cast< ::fs::mac_rrc::sf_alloc_type_t >(nof_alloc_subfrs_);
}
inline ::fs::mac_rrc::sf_alloc_type_t mbsfn_sf_cfg_t::nof_alloc_subfrs() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_sf_cfg_t.nof_alloc_subfrs)
  return _internal_nof_alloc_subfrs();
}
inline void mbsfn_sf_cfg_t::_internal_set_nof_alloc_subfrs(::fs::mac_rrc::sf_alloc_type_t value) {
  
  nof_alloc_subfrs_ = value;
}
inline void mbsfn_sf_cfg_t::set_nof_alloc_subfrs(::fs::mac_rrc::sf_alloc_type_t value) {
  _internal_set_nof_alloc_subfrs(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_sf_cfg_t.nof_alloc_subfrs)
}

// -------------------------------------------------------------------

// mcch_msg_t

// uint32 nof_pmch_info = 1;
inline void mcch_msg_t::clear_nof_pmch_info() {
  nof_pmch_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_msg_t::_internal_nof_pmch_info() const {
  return nof_pmch_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_msg_t::nof_pmch_info() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_msg_t.nof_pmch_info)
  return _internal_nof_pmch_info();
}
inline void mcch_msg_t::_internal_set_nof_pmch_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_pmch_info_ = value;
}
inline void mcch_msg_t::set_nof_pmch_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_pmch_info(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_msg_t.nof_pmch_info)
}

// uint32 nof_common_sf_alloc = 2;
inline void mcch_msg_t::clear_nof_common_sf_alloc() {
  nof_common_sf_alloc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_msg_t::_internal_nof_common_sf_alloc() const {
  return nof_common_sf_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_msg_t::nof_common_sf_alloc() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_msg_t.nof_common_sf_alloc)
  return _internal_nof_common_sf_alloc();
}
inline void mcch_msg_t::_internal_set_nof_common_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_common_sf_alloc_ = value;
}
inline void mcch_msg_t::set_nof_common_sf_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_common_sf_alloc(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_msg_t.nof_common_sf_alloc)
}

// .fs.mac_rrc.common_sf_alloc_period_t common_sf_alloc_period = 3;
inline void mcch_msg_t::clear_common_sf_alloc_period() {
  common_sf_alloc_period_ = 0;
}
inline ::fs::mac_rrc::common_sf_alloc_period_t mcch_msg_t::_internal_common_sf_alloc_period() const {
  return static_cast< ::fs::mac_rrc::common_sf_alloc_period_t >(common_sf_alloc_period_);
}
inline ::fs::mac_rrc::common_sf_alloc_period_t mcch_msg_t::common_sf_alloc_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_msg_t.common_sf_alloc_period)
  return _internal_common_sf_alloc_period();
}
inline void mcch_msg_t::_internal_set_common_sf_alloc_period(::fs::mac_rrc::common_sf_alloc_period_t value) {
  
  common_sf_alloc_period_ = value;
}
inline void mcch_msg_t::set_common_sf_alloc_period(::fs::mac_rrc::common_sf_alloc_period_t value) {
  _internal_set_common_sf_alloc_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_msg_t.common_sf_alloc_period)
}

// repeated .fs.mac_rrc.mbsfn_sf_cfg_t common_sf_alloc = 4;
inline int mcch_msg_t::_internal_common_sf_alloc_size() const {
  return common_sf_alloc_.size();
}
inline int mcch_msg_t::common_sf_alloc_size() const {
  return _internal_common_sf_alloc_size();
}
inline void mcch_msg_t::clear_common_sf_alloc() {
  common_sf_alloc_.Clear();
}
inline ::fs::mac_rrc::mbsfn_sf_cfg_t* mcch_msg_t::mutable_common_sf_alloc(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.mcch_msg_t.common_sf_alloc)
  return common_sf_alloc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >*
mcch_msg_t::mutable_common_sf_alloc() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.mcch_msg_t.common_sf_alloc)
  return &common_sf_alloc_;
}
inline const ::fs::mac_rrc::mbsfn_sf_cfg_t& mcch_msg_t::_internal_common_sf_alloc(int index) const {
  return common_sf_alloc_.Get(index);
}
inline const ::fs::mac_rrc::mbsfn_sf_cfg_t& mcch_msg_t::common_sf_alloc(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_msg_t.common_sf_alloc)
  return _internal_common_sf_alloc(index);
}
inline ::fs::mac_rrc::mbsfn_sf_cfg_t* mcch_msg_t::_internal_add_common_sf_alloc() {
  return common_sf_alloc_.Add();
}
inline ::fs::mac_rrc::mbsfn_sf_cfg_t* mcch_msg_t::add_common_sf_alloc() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.mcch_msg_t.common_sf_alloc)
  return _internal_add_common_sf_alloc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >&
mcch_msg_t::common_sf_alloc() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.mcch_msg_t.common_sf_alloc)
  return common_sf_alloc_;
}

// repeated .fs.mac_rrc.pmch_info_t pmch_info_list = 5;
inline int mcch_msg_t::_internal_pmch_info_list_size() const {
  return pmch_info_list_.size();
}
inline int mcch_msg_t::pmch_info_list_size() const {
  return _internal_pmch_info_list_size();
}
inline void mcch_msg_t::clear_pmch_info_list() {
  pmch_info_list_.Clear();
}
inline ::fs::mac_rrc::pmch_info_t* mcch_msg_t::mutable_pmch_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.mcch_msg_t.pmch_info_list)
  return pmch_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::pmch_info_t >*
mcch_msg_t::mutable_pmch_info_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.mcch_msg_t.pmch_info_list)
  return &pmch_info_list_;
}
inline const ::fs::mac_rrc::pmch_info_t& mcch_msg_t::_internal_pmch_info_list(int index) const {
  return pmch_info_list_.Get(index);
}
inline const ::fs::mac_rrc::pmch_info_t& mcch_msg_t::pmch_info_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_msg_t.pmch_info_list)
  return _internal_pmch_info_list(index);
}
inline ::fs::mac_rrc::pmch_info_t* mcch_msg_t::_internal_add_pmch_info_list() {
  return pmch_info_list_.Add();
}
inline ::fs::mac_rrc::pmch_info_t* mcch_msg_t::add_pmch_info_list() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.mcch_msg_t.pmch_info_list)
  return _internal_add_pmch_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::pmch_info_t >&
mcch_msg_t::pmch_info_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.mcch_msg_t.pmch_info_list)
  return pmch_info_list_;
}

// -------------------------------------------------------------------

// mbms_notif_cfg_t

// uint32 notif_offset = 1;
inline void mbms_notif_cfg_t::clear_notif_offset() {
  notif_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_notif_cfg_t::_internal_notif_offset() const {
  return notif_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_notif_cfg_t::notif_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_notif_cfg_t.notif_offset)
  return _internal_notif_offset();
}
inline void mbms_notif_cfg_t::_internal_set_notif_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  notif_offset_ = value;
}
inline void mbms_notif_cfg_t::set_notif_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notif_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbms_notif_cfg_t.notif_offset)
}

// uint32 notif_sf_idx = 2;
inline void mbms_notif_cfg_t::clear_notif_sf_idx() {
  notif_sf_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_notif_cfg_t::_internal_notif_sf_idx() const {
  return notif_sf_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbms_notif_cfg_t::notif_sf_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_notif_cfg_t.notif_sf_idx)
  return _internal_notif_sf_idx();
}
inline void mbms_notif_cfg_t::_internal_set_notif_sf_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  notif_sf_idx_ = value;
}
inline void mbms_notif_cfg_t::set_notif_sf_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notif_sf_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbms_notif_cfg_t.notif_sf_idx)
}

// .fs.mac_rrc.coeff_t notif_repeat_coeff = 3;
inline void mbms_notif_cfg_t::clear_notif_repeat_coeff() {
  notif_repeat_coeff_ = 0;
}
inline ::fs::mac_rrc::coeff_t mbms_notif_cfg_t::_internal_notif_repeat_coeff() const {
  return static_cast< ::fs::mac_rrc::coeff_t >(notif_repeat_coeff_);
}
inline ::fs::mac_rrc::coeff_t mbms_notif_cfg_t::notif_repeat_coeff() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbms_notif_cfg_t.notif_repeat_coeff)
  return _internal_notif_repeat_coeff();
}
inline void mbms_notif_cfg_t::_internal_set_notif_repeat_coeff(::fs::mac_rrc::coeff_t value) {
  
  notif_repeat_coeff_ = value;
}
inline void mbms_notif_cfg_t::set_notif_repeat_coeff(::fs::mac_rrc::coeff_t value) {
  _internal_set_notif_repeat_coeff(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbms_notif_cfg_t.notif_repeat_coeff)
}

// -------------------------------------------------------------------

// mcch_cfg_t

// uint32 sf_alloc_info = 1;
inline void mcch_cfg_t::clear_sf_alloc_info() {
  sf_alloc_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_cfg_t::_internal_sf_alloc_info() const {
  return sf_alloc_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_cfg_t::sf_alloc_info() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_cfg_t.sf_alloc_info)
  return _internal_sf_alloc_info();
}
inline void mcch_cfg_t::_internal_set_sf_alloc_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sf_alloc_info_ = value;
}
inline void mcch_cfg_t::set_sf_alloc_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sf_alloc_info(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_cfg_t.sf_alloc_info)
}

// uint32 mcch_offset = 2;
inline void mcch_cfg_t::clear_mcch_offset() {
  mcch_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_cfg_t::_internal_mcch_offset() const {
  return mcch_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcch_cfg_t::mcch_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_cfg_t.mcch_offset)
  return _internal_mcch_offset();
}
inline void mcch_cfg_t::_internal_set_mcch_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mcch_offset_ = value;
}
inline void mcch_cfg_t::set_mcch_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mcch_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_cfg_t.mcch_offset)
}

// .fs.mac_rrc.sig_mcs_t sig_mcs = 3;
inline void mcch_cfg_t::clear_sig_mcs() {
  sig_mcs_ = 0;
}
inline ::fs::mac_rrc::sig_mcs_t mcch_cfg_t::_internal_sig_mcs() const {
  return static_cast< ::fs::mac_rrc::sig_mcs_t >(sig_mcs_);
}
inline ::fs::mac_rrc::sig_mcs_t mcch_cfg_t::sig_mcs() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_cfg_t.sig_mcs)
  return _internal_sig_mcs();
}
inline void mcch_cfg_t::_internal_set_sig_mcs(::fs::mac_rrc::sig_mcs_t value) {
  
  sig_mcs_ = value;
}
inline void mcch_cfg_t::set_sig_mcs(::fs::mac_rrc::sig_mcs_t value) {
  _internal_set_sig_mcs(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_cfg_t.sig_mcs)
}

// .fs.mac_rrc.mod_period_t mcch_mod_period = 4;
inline void mcch_cfg_t::clear_mcch_mod_period() {
  mcch_mod_period_ = 0;
}
inline ::fs::mac_rrc::mod_period_t mcch_cfg_t::_internal_mcch_mod_period() const {
  return static_cast< ::fs::mac_rrc::mod_period_t >(mcch_mod_period_);
}
inline ::fs::mac_rrc::mod_period_t mcch_cfg_t::mcch_mod_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_cfg_t.mcch_mod_period)
  return _internal_mcch_mod_period();
}
inline void mcch_cfg_t::_internal_set_mcch_mod_period(::fs::mac_rrc::mod_period_t value) {
  
  mcch_mod_period_ = value;
}
inline void mcch_cfg_t::set_mcch_mod_period(::fs::mac_rrc::mod_period_t value) {
  _internal_set_mcch_mod_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_cfg_t.mcch_mod_period)
}

// .fs.mac_rrc.repeat_period_t mcch_repeat_period = 5;
inline void mcch_cfg_t::clear_mcch_repeat_period() {
  mcch_repeat_period_ = 0;
}
inline ::fs::mac_rrc::repeat_period_t mcch_cfg_t::_internal_mcch_repeat_period() const {
  return static_cast< ::fs::mac_rrc::repeat_period_t >(mcch_repeat_period_);
}
inline ::fs::mac_rrc::repeat_period_t mcch_cfg_t::mcch_repeat_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mcch_cfg_t.mcch_repeat_period)
  return _internal_mcch_repeat_period();
}
inline void mcch_cfg_t::_internal_set_mcch_repeat_period(::fs::mac_rrc::repeat_period_t value) {
  
  mcch_repeat_period_ = value;
}
inline void mcch_cfg_t::set_mcch_repeat_period(::fs::mac_rrc::repeat_period_t value) {
  _internal_set_mcch_repeat_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mcch_cfg_t.mcch_repeat_period)
}

// -------------------------------------------------------------------

// mbsfn_area_info_t

// uint32 mbsfn_area_id = 1;
inline void mbsfn_area_info_t::clear_mbsfn_area_id() {
  mbsfn_area_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_area_info_t::_internal_mbsfn_area_id() const {
  return mbsfn_area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_area_info_t::mbsfn_area_id() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_area_info_t.mbsfn_area_id)
  return _internal_mbsfn_area_id();
}
inline void mbsfn_area_info_t::_internal_set_mbsfn_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mbsfn_area_id_ = value;
}
inline void mbsfn_area_info_t::set_mbsfn_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mbsfn_area_id(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_area_info_t.mbsfn_area_id)
}

// uint32 notif_ind = 2;
inline void mbsfn_area_info_t::clear_notif_ind() {
  notif_ind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_area_info_t::_internal_notif_ind() const {
  return notif_ind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_area_info_t::notif_ind() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_area_info_t.notif_ind)
  return _internal_notif_ind();
}
inline void mbsfn_area_info_t::_internal_set_notif_ind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  notif_ind_ = value;
}
inline void mbsfn_area_info_t::set_notif_ind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notif_ind(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_area_info_t.notif_ind)
}

// .fs.mac_rrc.mcch_cfg_t mcch_cfg = 3;
inline bool mbsfn_area_info_t::_internal_has_mcch_cfg() const {
  return this != internal_default_instance() && mcch_cfg_ != nullptr;
}
inline bool mbsfn_area_info_t::has_mcch_cfg() const {
  return _internal_has_mcch_cfg();
}
inline void mbsfn_area_info_t::clear_mcch_cfg() {
  if (GetArena() == nullptr && mcch_cfg_ != nullptr) {
    delete mcch_cfg_;
  }
  mcch_cfg_ = nullptr;
}
inline const ::fs::mac_rrc::mcch_cfg_t& mbsfn_area_info_t::_internal_mcch_cfg() const {
  const ::fs::mac_rrc::mcch_cfg_t* p = mcch_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::mcch_cfg_t*>(
      &::fs::mac_rrc::_mcch_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::mcch_cfg_t& mbsfn_area_info_t::mcch_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_area_info_t.mcch_cfg)
  return _internal_mcch_cfg();
}
inline void mbsfn_area_info_t::unsafe_arena_set_allocated_mcch_cfg(
    ::fs::mac_rrc::mcch_cfg_t* mcch_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mcch_cfg_);
  }
  mcch_cfg_ = mcch_cfg;
  if (mcch_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.mbsfn_area_info_t.mcch_cfg)
}
inline ::fs::mac_rrc::mcch_cfg_t* mbsfn_area_info_t::release_mcch_cfg() {
  auto temp = unsafe_arena_release_mcch_cfg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::mcch_cfg_t* mbsfn_area_info_t::unsafe_arena_release_mcch_cfg() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.mbsfn_area_info_t.mcch_cfg)
  
  ::fs::mac_rrc::mcch_cfg_t* temp = mcch_cfg_;
  mcch_cfg_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::mcch_cfg_t* mbsfn_area_info_t::_internal_mutable_mcch_cfg() {
  
  if (mcch_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::mcch_cfg_t>(GetArena());
    mcch_cfg_ = p;
  }
  return mcch_cfg_;
}
inline ::fs::mac_rrc::mcch_cfg_t* mbsfn_area_info_t::mutable_mcch_cfg() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.mbsfn_area_info_t.mcch_cfg)
  return _internal_mutable_mcch_cfg();
}
inline void mbsfn_area_info_t::set_allocated_mcch_cfg(::fs::mac_rrc::mcch_cfg_t* mcch_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mcch_cfg_;
  }
  if (mcch_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mcch_cfg);
    if (message_arena != submessage_arena) {
      mcch_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mcch_cfg, submessage_arena);
    }
    
  } else {
    
  }
  mcch_cfg_ = mcch_cfg;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.mbsfn_area_info_t.mcch_cfg)
}

// .fs.mac_rrc.region_len_t non_mbsfn_region_len = 4;
inline void mbsfn_area_info_t::clear_non_mbsfn_region_len() {
  non_mbsfn_region_len_ = 0;
}
inline ::fs::mac_rrc::region_len_t mbsfn_area_info_t::_internal_non_mbsfn_region_len() const {
  return static_cast< ::fs::mac_rrc::region_len_t >(non_mbsfn_region_len_);
}
inline ::fs::mac_rrc::region_len_t mbsfn_area_info_t::non_mbsfn_region_len() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.mbsfn_area_info_t.non_mbsfn_region_len)
  return _internal_non_mbsfn_region_len();
}
inline void mbsfn_area_info_t::_internal_set_non_mbsfn_region_len(::fs::mac_rrc::region_len_t value) {
  
  non_mbsfn_region_len_ = value;
}
inline void mbsfn_area_info_t::set_non_mbsfn_region_len(::fs::mac_rrc::region_len_t value) {
  _internal_set_non_mbsfn_region_len(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.mbsfn_area_info_t.non_mbsfn_region_len)
}

// -------------------------------------------------------------------

// sib13_t

// uint32 max_mbsfn_area = 1;
inline void sib13_t::clear_max_mbsfn_area() {
  max_mbsfn_area_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sib13_t::_internal_max_mbsfn_area() const {
  return max_mbsfn_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sib13_t::max_mbsfn_area() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib13_t.max_mbsfn_area)
  return _internal_max_mbsfn_area();
}
inline void sib13_t::_internal_set_max_mbsfn_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_mbsfn_area_ = value;
}
inline void sib13_t::set_max_mbsfn_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_mbsfn_area(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.sib13_t.max_mbsfn_area)
}

// uint32 nof_mbsfn_area_info = 2;
inline void sib13_t::clear_nof_mbsfn_area_info() {
  nof_mbsfn_area_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sib13_t::_internal_nof_mbsfn_area_info() const {
  return nof_mbsfn_area_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sib13_t::nof_mbsfn_area_info() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib13_t.nof_mbsfn_area_info)
  return _internal_nof_mbsfn_area_info();
}
inline void sib13_t::_internal_set_nof_mbsfn_area_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_mbsfn_area_info_ = value;
}
inline void sib13_t::set_nof_mbsfn_area_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_mbsfn_area_info(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.sib13_t.nof_mbsfn_area_info)
}

// .fs.mac_rrc.mbms_notif_cfg_t notif_cfg = 3;
inline bool sib13_t::_internal_has_notif_cfg() const {
  return this != internal_default_instance() && notif_cfg_ != nullptr;
}
inline bool sib13_t::has_notif_cfg() const {
  return _internal_has_notif_cfg();
}
inline void sib13_t::clear_notif_cfg() {
  if (GetArena() == nullptr && notif_cfg_ != nullptr) {
    delete notif_cfg_;
  }
  notif_cfg_ = nullptr;
}
inline const ::fs::mac_rrc::mbms_notif_cfg_t& sib13_t::_internal_notif_cfg() const {
  const ::fs::mac_rrc::mbms_notif_cfg_t* p = notif_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::mbms_notif_cfg_t*>(
      &::fs::mac_rrc::_mbms_notif_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::mbms_notif_cfg_t& sib13_t::notif_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib13_t.notif_cfg)
  return _internal_notif_cfg();
}
inline void sib13_t::unsafe_arena_set_allocated_notif_cfg(
    ::fs::mac_rrc::mbms_notif_cfg_t* notif_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notif_cfg_);
  }
  notif_cfg_ = notif_cfg;
  if (notif_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.sib13_t.notif_cfg)
}
inline ::fs::mac_rrc::mbms_notif_cfg_t* sib13_t::release_notif_cfg() {
  auto temp = unsafe_arena_release_notif_cfg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::mbms_notif_cfg_t* sib13_t::unsafe_arena_release_notif_cfg() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.sib13_t.notif_cfg)
  
  ::fs::mac_rrc::mbms_notif_cfg_t* temp = notif_cfg_;
  notif_cfg_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::mbms_notif_cfg_t* sib13_t::_internal_mutable_notif_cfg() {
  
  if (notif_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::mbms_notif_cfg_t>(GetArena());
    notif_cfg_ = p;
  }
  return notif_cfg_;
}
inline ::fs::mac_rrc::mbms_notif_cfg_t* sib13_t::mutable_notif_cfg() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.sib13_t.notif_cfg)
  return _internal_mutable_notif_cfg();
}
inline void sib13_t::set_allocated_notif_cfg(::fs::mac_rrc::mbms_notif_cfg_t* notif_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete notif_cfg_;
  }
  if (notif_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notif_cfg);
    if (message_arena != submessage_arena) {
      notif_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notif_cfg, submessage_arena);
    }
    
  } else {
    
  }
  notif_cfg_ = notif_cfg;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.sib13_t.notif_cfg)
}

// repeated .fs.mac_rrc.mbsfn_area_info_t mbsfn_area_info_list = 4;
inline int sib13_t::_internal_mbsfn_area_info_list_size() const {
  return mbsfn_area_info_list_.size();
}
inline int sib13_t::mbsfn_area_info_list_size() const {
  return _internal_mbsfn_area_info_list_size();
}
inline void sib13_t::clear_mbsfn_area_info_list() {
  mbsfn_area_info_list_.Clear();
}
inline ::fs::mac_rrc::mbsfn_area_info_t* sib13_t::mutable_mbsfn_area_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.sib13_t.mbsfn_area_info_list)
  return mbsfn_area_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_area_info_t >*
sib13_t::mutable_mbsfn_area_info_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.sib13_t.mbsfn_area_info_list)
  return &mbsfn_area_info_list_;
}
inline const ::fs::mac_rrc::mbsfn_area_info_t& sib13_t::_internal_mbsfn_area_info_list(int index) const {
  return mbsfn_area_info_list_.Get(index);
}
inline const ::fs::mac_rrc::mbsfn_area_info_t& sib13_t::mbsfn_area_info_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib13_t.mbsfn_area_info_list)
  return _internal_mbsfn_area_info_list(index);
}
inline ::fs::mac_rrc::mbsfn_area_info_t* sib13_t::_internal_add_mbsfn_area_info_list() {
  return mbsfn_area_info_list_.Add();
}
inline ::fs::mac_rrc::mbsfn_area_info_t* sib13_t::add_mbsfn_area_info_list() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.sib13_t.mbsfn_area_info_list)
  return _internal_add_mbsfn_area_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_area_info_t >&
sib13_t::mbsfn_area_info_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.sib13_t.mbsfn_area_info_list)
  return mbsfn_area_info_list_;
}

// -------------------------------------------------------------------

// sib2_mbms_t

// int32 nof_mbsfn_sf_cfg = 1;
inline void sib2_mbms_t::clear_nof_mbsfn_sf_cfg() {
  nof_mbsfn_sf_cfg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sib2_mbms_t::_internal_nof_mbsfn_sf_cfg() const {
  return nof_mbsfn_sf_cfg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sib2_mbms_t::nof_mbsfn_sf_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib2_mbms_t.nof_mbsfn_sf_cfg)
  return _internal_nof_mbsfn_sf_cfg();
}
inline void sib2_mbms_t::_internal_set_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nof_mbsfn_sf_cfg_ = value;
}
inline void sib2_mbms_t::set_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nof_mbsfn_sf_cfg(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.sib2_mbms_t.nof_mbsfn_sf_cfg)
}

// bool mbsfn_sf_cfg_list_present = 2;
inline void sib2_mbms_t::clear_mbsfn_sf_cfg_list_present() {
  mbsfn_sf_cfg_list_present_ = false;
}
inline bool sib2_mbms_t::_internal_mbsfn_sf_cfg_list_present() const {
  return mbsfn_sf_cfg_list_present_;
}
inline bool sib2_mbms_t::mbsfn_sf_cfg_list_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list_present)
  return _internal_mbsfn_sf_cfg_list_present();
}
inline void sib2_mbms_t::_internal_set_mbsfn_sf_cfg_list_present(bool value) {
  
  mbsfn_sf_cfg_list_present_ = value;
}
inline void sib2_mbms_t::set_mbsfn_sf_cfg_list_present(bool value) {
  _internal_set_mbsfn_sf_cfg_list_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list_present)
}

// uint32 max_nof_mbsfn_sf_cfg = 3;
inline void sib2_mbms_t::clear_max_nof_mbsfn_sf_cfg() {
  max_nof_mbsfn_sf_cfg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sib2_mbms_t::_internal_max_nof_mbsfn_sf_cfg() const {
  return max_nof_mbsfn_sf_cfg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sib2_mbms_t::max_nof_mbsfn_sf_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib2_mbms_t.max_nof_mbsfn_sf_cfg)
  return _internal_max_nof_mbsfn_sf_cfg();
}
inline void sib2_mbms_t::_internal_set_max_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_nof_mbsfn_sf_cfg_ = value;
}
inline void sib2_mbms_t::set_max_nof_mbsfn_sf_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_nof_mbsfn_sf_cfg(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.sib2_mbms_t.max_nof_mbsfn_sf_cfg)
}

// repeated .fs.mac_rrc.mbsfn_sf_cfg_t mbsfn_sf_cfg_list = 4;
inline int sib2_mbms_t::_internal_mbsfn_sf_cfg_list_size() const {
  return mbsfn_sf_cfg_list_.size();
}
inline int sib2_mbms_t::mbsfn_sf_cfg_list_size() const {
  return _internal_mbsfn_sf_cfg_list_size();
}
inline void sib2_mbms_t::clear_mbsfn_sf_cfg_list() {
  mbsfn_sf_cfg_list_.Clear();
}
inline ::fs::mac_rrc::mbsfn_sf_cfg_t* sib2_mbms_t::mutable_mbsfn_sf_cfg_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list)
  return mbsfn_sf_cfg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >*
sib2_mbms_t::mutable_mbsfn_sf_cfg_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list)
  return &mbsfn_sf_cfg_list_;
}
inline const ::fs::mac_rrc::mbsfn_sf_cfg_t& sib2_mbms_t::_internal_mbsfn_sf_cfg_list(int index) const {
  return mbsfn_sf_cfg_list_.Get(index);
}
inline const ::fs::mac_rrc::mbsfn_sf_cfg_t& sib2_mbms_t::mbsfn_sf_cfg_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list)
  return _internal_mbsfn_sf_cfg_list(index);
}
inline ::fs::mac_rrc::mbsfn_sf_cfg_t* sib2_mbms_t::_internal_add_mbsfn_sf_cfg_list() {
  return mbsfn_sf_cfg_list_.Add();
}
inline ::fs::mac_rrc::mbsfn_sf_cfg_t* sib2_mbms_t::add_mbsfn_sf_cfg_list() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list)
  return _internal_add_mbsfn_sf_cfg_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::mbsfn_sf_cfg_t >&
sib2_mbms_t::mbsfn_sf_cfg_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.sib2_mbms_t.mbsfn_sf_cfg_list)
  return mbsfn_sf_cfg_list_;
}

// -------------------------------------------------------------------

// buffer

// repeated uint32 data = 1;
inline int buffer::_internal_data_size() const {
  return data_.size();
}
inline int buffer::data_size() const {
  return _internal_data_size();
}
inline void buffer::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 buffer::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 buffer::data(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.buffer.data)
  return _internal_data(index);
}
inline void buffer::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.buffer.data)
}
inline void buffer::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void buffer::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.buffer.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
buffer::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
buffer::data() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.buffer.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
buffer::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
buffer::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.buffer.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mac_rrc
}  // namespace fs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fs::mac_rrc::repeat_period_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::repeat_period_t>() {
  return ::fs::mac_rrc::repeat_period_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::mod_period_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::mod_period_t>() {
  return ::fs::mac_rrc::mod_period_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::sig_mcs_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::sig_mcs_t>() {
  return ::fs::mac_rrc::sig_mcs_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::coeff_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::coeff_t>() {
  return ::fs::mac_rrc::coeff_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::region_len_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::region_len_t>() {
  return ::fs::mac_rrc::region_len_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::plmn_id_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::plmn_id_type_t>() {
  return ::fs::mac_rrc::plmn_id_type_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::mch_sched_period_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::mch_sched_period_t>() {
  return ::fs::mac_rrc::mch_sched_period_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::alloc_period_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::alloc_period_t>() {
  return ::fs::mac_rrc::alloc_period_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::sf_alloc_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::sf_alloc_type_t>() {
  return ::fs::mac_rrc::sf_alloc_type_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::common_sf_alloc_period_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::common_sf_alloc_period_t>() {
  return ::fs::mac_rrc::common_sf_alloc_period_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rrc_5fmcch_5ft_2eproto
