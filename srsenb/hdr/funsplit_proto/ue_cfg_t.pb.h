// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ue_cfg_t.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ue_5fcfg_5ft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ue_5fcfg_5ft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ue_5fcfg_5ft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ue_5fcfg_5ft_2eproto;
namespace fs {
namespace mac_rrc {
class ant_info_ded_t;
class ant_info_ded_tDefaultTypeInternal;
extern ant_info_ded_tDefaultTypeInternal _ant_info_ded_t_default_instance_;
class cc_cfg_t;
class cc_cfg_tDefaultTypeInternal;
extern cc_cfg_tDefaultTypeInternal _cc_cfg_t_default_instance_;
class srsran_cqi_cfg_t;
class srsran_cqi_cfg_tDefaultTypeInternal;
extern srsran_cqi_cfg_tDefaultTypeInternal _srsran_cqi_cfg_t_default_instance_;
class srsran_cqi_report_cfg_t;
class srsran_cqi_report_cfg_tDefaultTypeInternal;
extern srsran_cqi_report_cfg_tDefaultTypeInternal _srsran_cqi_report_cfg_t_default_instance_;
class srsran_dci_cfg_t;
class srsran_dci_cfg_tDefaultTypeInternal;
extern srsran_dci_cfg_tDefaultTypeInternal _srsran_dci_cfg_t_default_instance_;
class srsran_dl_cfg_t;
class srsran_dl_cfg_tDefaultTypeInternal;
extern srsran_dl_cfg_tDefaultTypeInternal _srsran_dl_cfg_t_default_instance_;
class srsran_pdsch_cfg_t;
class srsran_pdsch_cfg_tDefaultTypeInternal;
extern srsran_pdsch_cfg_tDefaultTypeInternal _srsran_pdsch_cfg_t_default_instance_;
class srsran_pdsch_grant_t;
class srsran_pdsch_grant_tDefaultTypeInternal;
extern srsran_pdsch_grant_tDefaultTypeInternal _srsran_pdsch_grant_t_default_instance_;
class srsran_pucch_cfg_t;
class srsran_pucch_cfg_tDefaultTypeInternal;
extern srsran_pucch_cfg_tDefaultTypeInternal _srsran_pucch_cfg_t_default_instance_;
class srsran_ra_tb_t;
class srsran_ra_tb_tDefaultTypeInternal;
extern srsran_ra_tb_tDefaultTypeInternal _srsran_ra_tb_t_default_instance_;
class srsran_softbuffer_rx_t;
class srsran_softbuffer_rx_tDefaultTypeInternal;
extern srsran_softbuffer_rx_tDefaultTypeInternal _srsran_softbuffer_rx_t_default_instance_;
class srsran_softbuffer_tx_t;
class srsran_softbuffer_tx_tDefaultTypeInternal;
extern srsran_softbuffer_tx_tDefaultTypeInternal _srsran_softbuffer_tx_t_default_instance_;
class srsran_uci_cfg_ack_t;
class srsran_uci_cfg_ack_tDefaultTypeInternal;
extern srsran_uci_cfg_ack_tDefaultTypeInternal _srsran_uci_cfg_ack_t_default_instance_;
class srsran_uci_cfg_t;
class srsran_uci_cfg_tDefaultTypeInternal;
extern srsran_uci_cfg_tDefaultTypeInternal _srsran_uci_cfg_t_default_instance_;
class srsran_uci_offset_cfg_t;
class srsran_uci_offset_cfg_tDefaultTypeInternal;
extern srsran_uci_offset_cfg_tDefaultTypeInternal _srsran_uci_offset_cfg_t_default_instance_;
class ue_bearer_cfg_t;
class ue_bearer_cfg_tDefaultTypeInternal;
extern ue_bearer_cfg_tDefaultTypeInternal _ue_bearer_cfg_t_default_instance_;
class ue_cfg_t;
class ue_cfg_tDefaultTypeInternal;
extern ue_cfg_tDefaultTypeInternal _ue_cfg_t_default_instance_;
}  // namespace mac_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::mac_rrc::ant_info_ded_t* Arena::CreateMaybeMessage<::fs::mac_rrc::ant_info_ded_t>(Arena*);
template<> ::fs::mac_rrc::cc_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::cc_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_cqi_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_cqi_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_cqi_report_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_cqi_report_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_dci_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_dci_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_dl_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_dl_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_pdsch_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_pdsch_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_pdsch_grant_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_pdsch_grant_t>(Arena*);
template<> ::fs::mac_rrc::srsran_pucch_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_pucch_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_ra_tb_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_ra_tb_t>(Arena*);
template<> ::fs::mac_rrc::srsran_softbuffer_rx_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_softbuffer_rx_t>(Arena*);
template<> ::fs::mac_rrc::srsran_softbuffer_tx_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_softbuffer_tx_t>(Arena*);
template<> ::fs::mac_rrc::srsran_uci_cfg_ack_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_uci_cfg_ack_t>(Arena*);
template<> ::fs::mac_rrc::srsran_uci_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_uci_cfg_t>(Arena*);
template<> ::fs::mac_rrc::srsran_uci_offset_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::srsran_uci_offset_cfg_t>(Arena*);
template<> ::fs::mac_rrc::ue_bearer_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::ue_bearer_cfg_t>(Arena*);
template<> ::fs::mac_rrc::ue_cfg_t* Arena::CreateMaybeMessage<::fs::mac_rrc::ue_cfg_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {
namespace mac_rrc {

enum DIRECTION_T : int {
  DIRECTION_T_IDLE = 0,
  DIRECTION_T_UL = 1,
  DIRECTION_T_DL = 2,
  DIRECTION_T_BOTH = 3,
  DIRECTION_T_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DIRECTION_T_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DIRECTION_T_IsValid(int value);
constexpr DIRECTION_T DIRECTION_T_MIN = DIRECTION_T_IDLE;
constexpr DIRECTION_T DIRECTION_T_MAX = DIRECTION_T_BOTH;
constexpr int DIRECTION_T_ARRAYSIZE = DIRECTION_T_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DIRECTION_T_descriptor();
template<typename T>
inline const std::string& DIRECTION_T_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DIRECTION_T>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DIRECTION_T_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DIRECTION_T_descriptor(), enum_t_value);
}
inline bool DIRECTION_T_Parse(
    const std::string& name, DIRECTION_T* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DIRECTION_T>(
    DIRECTION_T_descriptor(), name, value);
}
enum srsran_pucch_format_t : int {
  SRSRAN_PUCCH_FORMAT_1 = 0,
  SRSRAN_PUCCH_FORMAT_1A = 1,
  SRSRAN_PUCCH_FORMAT_1B = 2,
  SRSRAN_PUCCH_FORMAT_2 = 3,
  SRSRAN_PUCCH_FORMAT_2A = 4,
  SRSRAN_PUCCH_FORMAT_2B = 5,
  SRSRAN_PUCCH_FORMAT_3 = 6,
  SRSRAN_PUCCH_FORMAT_ERROR = 7,
  srsran_pucch_format_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_pucch_format_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_pucch_format_t_IsValid(int value);
constexpr srsran_pucch_format_t srsran_pucch_format_t_MIN = SRSRAN_PUCCH_FORMAT_1;
constexpr srsran_pucch_format_t srsran_pucch_format_t_MAX = SRSRAN_PUCCH_FORMAT_ERROR;
constexpr int srsran_pucch_format_t_ARRAYSIZE = srsran_pucch_format_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_pucch_format_t_descriptor();
template<typename T>
inline const std::string& srsran_pucch_format_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_pucch_format_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_pucch_format_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_pucch_format_t_descriptor(), enum_t_value);
}
inline bool srsran_pucch_format_t_Parse(
    const std::string& name, srsran_pucch_format_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_pucch_format_t>(
    srsran_pucch_format_t_descriptor(), name, value);
}
enum srsran_ack_nack_feedback_mode_t : int {
  SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_NORMAL = 0,
  SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_CS = 1,
  SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_PUCCH3 = 2,
  SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_ERROR = 3,
  srsran_ack_nack_feedback_mode_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_ack_nack_feedback_mode_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_ack_nack_feedback_mode_t_IsValid(int value);
constexpr srsran_ack_nack_feedback_mode_t srsran_ack_nack_feedback_mode_t_MIN = SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_NORMAL;
constexpr srsran_ack_nack_feedback_mode_t srsran_ack_nack_feedback_mode_t_MAX = SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_ERROR;
constexpr int srsran_ack_nack_feedback_mode_t_ARRAYSIZE = srsran_ack_nack_feedback_mode_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_ack_nack_feedback_mode_t_descriptor();
template<typename T>
inline const std::string& srsran_ack_nack_feedback_mode_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_ack_nack_feedback_mode_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_ack_nack_feedback_mode_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_ack_nack_feedback_mode_t_descriptor(), enum_t_value);
}
inline bool srsran_ack_nack_feedback_mode_t_Parse(
    const std::string& name, srsran_ack_nack_feedback_mode_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_ack_nack_feedback_mode_t>(
    srsran_ack_nack_feedback_mode_t_descriptor(), name, value);
}
enum srsran_cqi_type_t : int {
  SRSRAN_CQI_TYPE_WIDEBAND = 0,
  SRSRAN_CQI_TYPE_SUBBAND = 1,
  SRSRAN_CQI_TYPE_SUBBAND_UE = 2,
  SRSRAN_CQI_TYPE_SUBBAND_HL = 3,
  srsran_cqi_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_cqi_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_cqi_type_t_IsValid(int value);
constexpr srsran_cqi_type_t srsran_cqi_type_t_MIN = SRSRAN_CQI_TYPE_WIDEBAND;
constexpr srsran_cqi_type_t srsran_cqi_type_t_MAX = SRSRAN_CQI_TYPE_SUBBAND_HL;
constexpr int srsran_cqi_type_t_ARRAYSIZE = srsran_cqi_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_cqi_type_t_descriptor();
template<typename T>
inline const std::string& srsran_cqi_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_cqi_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_cqi_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_cqi_type_t_descriptor(), enum_t_value);
}
inline bool srsran_cqi_type_t_Parse(
    const std::string& name, srsran_cqi_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_cqi_type_t>(
    srsran_cqi_type_t_descriptor(), name, value);
}
enum srsran_tm_t : int {
  SRSRAN_TM1 = 0,
  SRSRAN_TM2 = 1,
  SRSRAN_TM3 = 2,
  SRSRAN_TM4 = 3,
  SRSRAN_TM5 = 4,
  SRSRAN_TM6 = 5,
  SRSRAN_TM7 = 6,
  SRSRAN_TM8 = 7,
  SRSRAN_TMINV = 8,
  srsran_tm_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_tm_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_tm_t_IsValid(int value);
constexpr srsran_tm_t srsran_tm_t_MIN = SRSRAN_TM1;
constexpr srsran_tm_t srsran_tm_t_MAX = SRSRAN_TMINV;
constexpr int srsran_tm_t_ARRAYSIZE = srsran_tm_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_tm_t_descriptor();
template<typename T>
inline const std::string& srsran_tm_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_tm_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_tm_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_tm_t_descriptor(), enum_t_value);
}
inline bool srsran_tm_t_Parse(
    const std::string& name, srsran_tm_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_tm_t>(
    srsran_tm_t_descriptor(), name, value);
}
enum srsran_mimo_decoder_t : int {
  SRSRAN_MIMO_DECODER_ZF = 0,
  SRSRAN_MIMO_DECODER_MMSE = 1,
  srsran_mimo_decoder_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_mimo_decoder_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_mimo_decoder_t_IsValid(int value);
constexpr srsran_mimo_decoder_t srsran_mimo_decoder_t_MIN = SRSRAN_MIMO_DECODER_ZF;
constexpr srsran_mimo_decoder_t srsran_mimo_decoder_t_MAX = SRSRAN_MIMO_DECODER_MMSE;
constexpr int srsran_mimo_decoder_t_ARRAYSIZE = srsran_mimo_decoder_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_mimo_decoder_t_descriptor();
template<typename T>
inline const std::string& srsran_mimo_decoder_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_mimo_decoder_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_mimo_decoder_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_mimo_decoder_t_descriptor(), enum_t_value);
}
inline bool srsran_mimo_decoder_t_Parse(
    const std::string& name, srsran_mimo_decoder_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_mimo_decoder_t>(
    srsran_mimo_decoder_t_descriptor(), name, value);
}
enum srsran_mod_t : int {
  SRSRAN_MOD_BPSK = 0,
  SRSRAN_MOD_QPSK = 1,
  SRSRAN_MOD_16QAM = 2,
  SRSRAN_MOD_64QAM = 3,
  SRSRAN_MOD_256QAM = 4,
  SRSRAN_MOD_NITEMS = 5,
  srsran_mod_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_mod_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_mod_t_IsValid(int value);
constexpr srsran_mod_t srsran_mod_t_MIN = SRSRAN_MOD_BPSK;
constexpr srsran_mod_t srsran_mod_t_MAX = SRSRAN_MOD_NITEMS;
constexpr int srsran_mod_t_ARRAYSIZE = srsran_mod_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_mod_t_descriptor();
template<typename T>
inline const std::string& srsran_mod_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_mod_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_mod_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_mod_t_descriptor(), enum_t_value);
}
inline bool srsran_mod_t_Parse(
    const std::string& name, srsran_mod_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_mod_t>(
    srsran_mod_t_descriptor(), name, value);
}
enum srsran_tx_scheme_t : int {
  SRSRAN_TXSCHEME_PORT0 = 0,
  SRSRAN_TXSCHEME_DIVERSITY = 1,
  SRSRAN_TXSCHEME_SPATIALMUX = 2,
  SRSRAN_TXSCHEME_CDD = 3,
  srsran_tx_scheme_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_tx_scheme_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_tx_scheme_t_IsValid(int value);
constexpr srsran_tx_scheme_t srsran_tx_scheme_t_MIN = SRSRAN_TXSCHEME_PORT0;
constexpr srsran_tx_scheme_t srsran_tx_scheme_t_MAX = SRSRAN_TXSCHEME_CDD;
constexpr int srsran_tx_scheme_t_ARRAYSIZE = srsran_tx_scheme_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_tx_scheme_t_descriptor();
template<typename T>
inline const std::string& srsran_tx_scheme_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_tx_scheme_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_tx_scheme_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_tx_scheme_t_descriptor(), enum_t_value);
}
inline bool srsran_tx_scheme_t_Parse(
    const std::string& name, srsran_tx_scheme_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_tx_scheme_t>(
    srsran_tx_scheme_t_descriptor(), name, value);
}
enum srsran_cqi_report_mode_t : int {
  SRSRAN_CQI_MODE_10 = 0,
  SRSRAN_CQI_MODE_11 = 1,
  SRSRAN_CQI_MODE_12 = 2,
  SRSRAN_CQI_MODE_20 = 3,
  SRSRAN_CQI_MODE_21 = 4,
  SRSRAN_CQI_MODE_22 = 5,
  SRSRAN_CQI_MODE_30 = 6,
  SRSRAN_CQI_MODE_31 = 7,
  SRSRAN_CQI_MODE_NA = 8,
  srsran_cqi_report_mode_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  srsran_cqi_report_mode_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool srsran_cqi_report_mode_t_IsValid(int value);
constexpr srsran_cqi_report_mode_t srsran_cqi_report_mode_t_MIN = SRSRAN_CQI_MODE_10;
constexpr srsran_cqi_report_mode_t srsran_cqi_report_mode_t_MAX = SRSRAN_CQI_MODE_NA;
constexpr int srsran_cqi_report_mode_t_ARRAYSIZE = srsran_cqi_report_mode_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_cqi_report_mode_t_descriptor();
template<typename T>
inline const std::string& srsran_cqi_report_mode_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, srsran_cqi_report_mode_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function srsran_cqi_report_mode_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    srsran_cqi_report_mode_t_descriptor(), enum_t_value);
}
inline bool srsran_cqi_report_mode_t_Parse(
    const std::string& name, srsran_cqi_report_mode_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<srsran_cqi_report_mode_t>(
    srsran_cqi_report_mode_t_descriptor(), name, value);
}
enum UL64QAM_CAP : int {
  UL64QAM_CAP_UNDEFINED = 0,
  UL64QAM_CAP_DISABLED = 1,
  UL64QAM_CAP_ENABLED = 2,
  UL64QAM_CAP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UL64QAM_CAP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UL64QAM_CAP_IsValid(int value);
constexpr UL64QAM_CAP UL64QAM_CAP_MIN = UL64QAM_CAP_UNDEFINED;
constexpr UL64QAM_CAP UL64QAM_CAP_MAX = UL64QAM_CAP_ENABLED;
constexpr int UL64QAM_CAP_ARRAYSIZE = UL64QAM_CAP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UL64QAM_CAP_descriptor();
template<typename T>
inline const std::string& UL64QAM_CAP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UL64QAM_CAP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UL64QAM_CAP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UL64QAM_CAP_descriptor(), enum_t_value);
}
inline bool UL64QAM_CAP_Parse(
    const std::string& name, UL64QAM_CAP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UL64QAM_CAP>(
    UL64QAM_CAP_descriptor(), name, value);
}
enum TX_MODE_T : int {
  TM1 = 0,
  TM2 = 1,
  TM3 = 2,
  TM4 = 3,
  TM5 = 4,
  TM6 = 5,
  TM7 = 6,
  TM8_V920 = 7,
  TX_MODE_T_NULLTYPE = 8,
  TX_MODE_T_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TX_MODE_T_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TX_MODE_T_IsValid(int value);
constexpr TX_MODE_T TX_MODE_T_MIN = TM1;
constexpr TX_MODE_T TX_MODE_T_MAX = TX_MODE_T_NULLTYPE;
constexpr int TX_MODE_T_ARRAYSIZE = TX_MODE_T_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TX_MODE_T_descriptor();
template<typename T>
inline const std::string& TX_MODE_T_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TX_MODE_T>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TX_MODE_T_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TX_MODE_T_descriptor(), enum_t_value);
}
inline bool TX_MODE_T_Parse(
    const std::string& name, TX_MODE_T* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TX_MODE_T>(
    TX_MODE_T_descriptor(), name, value);
}
enum CODEBOOK_T : int {
  N2_TX_ANT_TM3 = 0,
  N4_TX_ANT_TM3 = 1,
  N2_TX_ANT_TM4 = 2,
  N4_TX_ANT_TM4 = 3,
  N2_TX_ANT_TM5 = 4,
  N4_TX_ANT_TM5 = 5,
  N2_TX_ANT_TM6 = 6,
  N4_TX_ANT_TM6 = 7,
  CODEBOOK_T_NONE = 8,
  CODEBOOK_T_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CODEBOOK_T_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CODEBOOK_T_IsValid(int value);
constexpr CODEBOOK_T CODEBOOK_T_MIN = N2_TX_ANT_TM3;
constexpr CODEBOOK_T CODEBOOK_T_MAX = CODEBOOK_T_NONE;
constexpr int CODEBOOK_T_ARRAYSIZE = CODEBOOK_T_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CODEBOOK_T_descriptor();
template<typename T>
inline const std::string& CODEBOOK_T_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CODEBOOK_T>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CODEBOOK_T_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CODEBOOK_T_descriptor(), enum_t_value);
}
inline bool CODEBOOK_T_Parse(
    const std::string& name, CODEBOOK_T* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CODEBOOK_T>(
    CODEBOOK_T_descriptor(), name, value);
}
enum UE_TX_ANT_SEL_T : int {
  UE_TX_ANT_SEL_T_RELEASE = 0,
  UE_TX_ANT_SEL_T_CLOSED_LOOP = 1,
  UE_TX_ANT_SEL_T_OPEN_LOOP = 2,
  UE_TX_ANT_SEL_T_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UE_TX_ANT_SEL_T_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UE_TX_ANT_SEL_T_IsValid(int value);
constexpr UE_TX_ANT_SEL_T UE_TX_ANT_SEL_T_MIN = UE_TX_ANT_SEL_T_RELEASE;
constexpr UE_TX_ANT_SEL_T UE_TX_ANT_SEL_T_MAX = UE_TX_ANT_SEL_T_OPEN_LOOP;
constexpr int UE_TX_ANT_SEL_T_ARRAYSIZE = UE_TX_ANT_SEL_T_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UE_TX_ANT_SEL_T_descriptor();
template<typename T>
inline const std::string& UE_TX_ANT_SEL_T_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UE_TX_ANT_SEL_T>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UE_TX_ANT_SEL_T_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UE_TX_ANT_SEL_T_descriptor(), enum_t_value);
}
inline bool UE_TX_ANT_SEL_T_Parse(
    const std::string& name, UE_TX_ANT_SEL_T* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UE_TX_ANT_SEL_T>(
    UE_TX_ANT_SEL_T_descriptor(), name, value);
}
// ===================================================================

class ant_info_ded_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.ant_info_ded_t) */ {
 public:
  inline ant_info_ded_t() : ant_info_ded_t(nullptr) {};
  virtual ~ant_info_ded_t();

  ant_info_ded_t(const ant_info_ded_t& from);
  ant_info_ded_t(ant_info_ded_t&& from) noexcept
    : ant_info_ded_t() {
    *this = ::std::move(from);
  }

  inline ant_info_ded_t& operator=(const ant_info_ded_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ant_info_ded_t& operator=(ant_info_ded_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ant_info_ded_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ant_info_ded_t* internal_default_instance() {
    return reinterpret_cast<const ant_info_ded_t*>(
               &_ant_info_ded_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ant_info_ded_t& a, ant_info_ded_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ant_info_ded_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ant_info_ded_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ant_info_ded_t* New() const final {
    return CreateMaybeMessage<ant_info_ded_t>(nullptr);
  }

  ant_info_ded_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ant_info_ded_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ant_info_ded_t& from);
  void MergeFrom(const ant_info_ded_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ant_info_ded_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.ant_info_ded_t";
  }
  protected:
  explicit ant_info_ded_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxModeFieldNumber = 1,
    kCookbookSubsetTypeFieldNumber = 2,
    kCodebookSubsetRestrictFieldNumber = 3,
    kUeTxAntSelFieldNumber = 4,
  };
  // .fs.mac_rrc.TX_MODE_T tx_mode = 1;
  void clear_tx_mode();
  ::fs::mac_rrc::TX_MODE_T tx_mode() const;
  void set_tx_mode(::fs::mac_rrc::TX_MODE_T value);
  private:
  ::fs::mac_rrc::TX_MODE_T _internal_tx_mode() const;
  void _internal_set_tx_mode(::fs::mac_rrc::TX_MODE_T value);
  public:

  // .fs.mac_rrc.CODEBOOK_T cookbook_subset_type = 2;
  void clear_cookbook_subset_type();
  ::fs::mac_rrc::CODEBOOK_T cookbook_subset_type() const;
  void set_cookbook_subset_type(::fs::mac_rrc::CODEBOOK_T value);
  private:
  ::fs::mac_rrc::CODEBOOK_T _internal_cookbook_subset_type() const;
  void _internal_set_cookbook_subset_type(::fs::mac_rrc::CODEBOOK_T value);
  public:

  // uint64 codebook_subset_restrict = 3;
  void clear_codebook_subset_restrict();
  ::PROTOBUF_NAMESPACE_ID::uint64 codebook_subset_restrict() const;
  void set_codebook_subset_restrict(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_codebook_subset_restrict() const;
  void _internal_set_codebook_subset_restrict(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .fs.mac_rrc.UE_TX_ANT_SEL_T ue_tx_ant_sel = 4;
  void clear_ue_tx_ant_sel();
  ::fs::mac_rrc::UE_TX_ANT_SEL_T ue_tx_ant_sel() const;
  void set_ue_tx_ant_sel(::fs::mac_rrc::UE_TX_ANT_SEL_T value);
  private:
  ::fs::mac_rrc::UE_TX_ANT_SEL_T _internal_ue_tx_ant_sel() const;
  void _internal_set_ue_tx_ant_sel(::fs::mac_rrc::UE_TX_ANT_SEL_T value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.ant_info_ded_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int tx_mode_;
  int cookbook_subset_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 codebook_subset_restrict_;
  int ue_tx_ant_sel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class ue_bearer_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.ue_bearer_cfg_t) */ {
 public:
  inline ue_bearer_cfg_t() : ue_bearer_cfg_t(nullptr) {};
  virtual ~ue_bearer_cfg_t();

  ue_bearer_cfg_t(const ue_bearer_cfg_t& from);
  ue_bearer_cfg_t(ue_bearer_cfg_t&& from) noexcept
    : ue_bearer_cfg_t() {
    *this = ::std::move(from);
  }

  inline ue_bearer_cfg_t& operator=(const ue_bearer_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ue_bearer_cfg_t& operator=(ue_bearer_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ue_bearer_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ue_bearer_cfg_t* internal_default_instance() {
    return reinterpret_cast<const ue_bearer_cfg_t*>(
               &_ue_bearer_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ue_bearer_cfg_t& a, ue_bearer_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ue_bearer_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ue_bearer_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ue_bearer_cfg_t* New() const final {
    return CreateMaybeMessage<ue_bearer_cfg_t>(nullptr);
  }

  ue_bearer_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ue_bearer_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ue_bearer_cfg_t& from);
  void MergeFrom(const ue_bearer_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ue_bearer_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.ue_bearer_cfg_t";
  }
  protected:
  explicit ue_bearer_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
    kBsdFieldNumber = 2,
    kPbrFieldNumber = 3,
    kGroupFieldNumber = 4,
    kDirectionFieldNumber = 5,
  };
  // int32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 bsd = 2;
  void clear_bsd();
  ::PROTOBUF_NAMESPACE_ID::uint32 bsd() const;
  void set_bsd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bsd() const;
  void _internal_set_bsd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pbr = 3;
  void clear_pbr();
  ::PROTOBUF_NAMESPACE_ID::uint32 pbr() const;
  void set_pbr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pbr() const;
  void _internal_set_pbr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 group = 4;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::int32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .fs.mac_rrc.DIRECTION_T direction = 5;
  void clear_direction();
  ::fs::mac_rrc::DIRECTION_T direction() const;
  void set_direction(::fs::mac_rrc::DIRECTION_T value);
  private:
  ::fs::mac_rrc::DIRECTION_T _internal_direction() const;
  void _internal_set_direction(::fs::mac_rrc::DIRECTION_T value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.ue_bearer_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bsd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pbr_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_cqi_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_cqi_cfg_t) */ {
 public:
  inline srsran_cqi_cfg_t() : srsran_cqi_cfg_t(nullptr) {};
  virtual ~srsran_cqi_cfg_t();

  srsran_cqi_cfg_t(const srsran_cqi_cfg_t& from);
  srsran_cqi_cfg_t(srsran_cqi_cfg_t&& from) noexcept
    : srsran_cqi_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_cqi_cfg_t& operator=(const srsran_cqi_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_cqi_cfg_t& operator=(srsran_cqi_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_cqi_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_cqi_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_cqi_cfg_t*>(
               &_srsran_cqi_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(srsran_cqi_cfg_t& a, srsran_cqi_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_cqi_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_cqi_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_cqi_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_cqi_cfg_t>(nullptr);
  }

  srsran_cqi_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_cqi_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_cqi_cfg_t& from);
  void MergeFrom(const srsran_cqi_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_cqi_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_cqi_cfg_t";
  }
  protected:
  explicit srsran_cqi_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataEnableFieldNumber = 1,
    kPmiPresentFieldNumber = 2,
    kFourAntennaPortsFieldNumber = 3,
    kRankIsNotOneFieldNumber = 4,
    kSubbandLabel2BitsFieldNumber = 5,
    kScellIndexFieldNumber = 6,
    kLFieldNumber = 7,
    kNFieldNumber = 8,
    kTypeFieldNumber = 9,
    kRiLenFieldNumber = 10,
  };
  // bool data_enable = 1;
  void clear_data_enable();
  bool data_enable() const;
  void set_data_enable(bool value);
  private:
  bool _internal_data_enable() const;
  void _internal_set_data_enable(bool value);
  public:

  // bool pmi_present = 2;
  void clear_pmi_present();
  bool pmi_present() const;
  void set_pmi_present(bool value);
  private:
  bool _internal_pmi_present() const;
  void _internal_set_pmi_present(bool value);
  public:

  // bool four_antenna_ports = 3;
  void clear_four_antenna_ports();
  bool four_antenna_ports() const;
  void set_four_antenna_ports(bool value);
  private:
  bool _internal_four_antenna_ports() const;
  void _internal_set_four_antenna_ports(bool value);
  public:

  // bool rank_is_not_one = 4;
  void clear_rank_is_not_one();
  bool rank_is_not_one() const;
  void set_rank_is_not_one(bool value);
  private:
  bool _internal_rank_is_not_one() const;
  void _internal_set_rank_is_not_one(bool value);
  public:

  // bool subband_label_2_bits = 5;
  void clear_subband_label_2_bits();
  bool subband_label_2_bits() const;
  void set_subband_label_2_bits(bool value);
  private:
  bool _internal_subband_label_2_bits() const;
  void _internal_set_subband_label_2_bits(bool value);
  public:

  // uint32 scell_index = 6;
  void clear_scell_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 scell_index() const;
  void set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scell_index() const;
  void _internal_set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 L = 7;
  void clear_l();
  ::PROTOBUF_NAMESPACE_ID::uint32 l() const;
  void set_l(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l() const;
  void _internal_set_l(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 N = 8;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.srsran_cqi_type_t type = 9;
  void clear_type();
  ::fs::mac_rrc::srsran_cqi_type_t type() const;
  void set_type(::fs::mac_rrc::srsran_cqi_type_t value);
  private:
  ::fs::mac_rrc::srsran_cqi_type_t _internal_type() const;
  void _internal_set_type(::fs::mac_rrc::srsran_cqi_type_t value);
  public:

  // uint32 ri_len = 10;
  void clear_ri_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ri_len() const;
  void set_ri_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ri_len() const;
  void _internal_set_ri_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_cqi_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool data_enable_;
  bool pmi_present_;
  bool four_antenna_ports_;
  bool rank_is_not_one_;
  bool subband_label_2_bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scell_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ri_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_uci_cfg_ack_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_uci_cfg_ack_t) */ {
 public:
  inline srsran_uci_cfg_ack_t() : srsran_uci_cfg_ack_t(nullptr) {};
  virtual ~srsran_uci_cfg_ack_t();

  srsran_uci_cfg_ack_t(const srsran_uci_cfg_ack_t& from);
  srsran_uci_cfg_ack_t(srsran_uci_cfg_ack_t&& from) noexcept
    : srsran_uci_cfg_ack_t() {
    *this = ::std::move(from);
  }

  inline srsran_uci_cfg_ack_t& operator=(const srsran_uci_cfg_ack_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_uci_cfg_ack_t& operator=(srsran_uci_cfg_ack_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_uci_cfg_ack_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_uci_cfg_ack_t* internal_default_instance() {
    return reinterpret_cast<const srsran_uci_cfg_ack_t*>(
               &_srsran_uci_cfg_ack_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(srsran_uci_cfg_ack_t& a, srsran_uci_cfg_ack_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_uci_cfg_ack_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_uci_cfg_ack_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_uci_cfg_ack_t* New() const final {
    return CreateMaybeMessage<srsran_uci_cfg_ack_t>(nullptr);
  }

  srsran_uci_cfg_ack_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_uci_cfg_ack_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_uci_cfg_ack_t& from);
  void MergeFrom(const srsran_uci_cfg_ack_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_uci_cfg_ack_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_uci_cfg_ack_t";
  }
  protected:
  explicit srsran_uci_cfg_ack_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingTbFieldNumber = 1,
    kNcceFieldNumber = 3,
    kNofAcksFieldNumber = 2,
    kNBundleFieldNumber = 4,
    kTddAckFieldNumber = 5,
    kTddAckMFieldNumber = 6,
    kTddIsMultiplexFieldNumber = 7,
    kTpcForPucchFieldNumber = 8,
    kGrantCcIdxFieldNumber = 9,
  };
  // repeated bool pending_tb = 1;
  int pending_tb_size() const;
  private:
  int _internal_pending_tb_size() const;
  public:
  void clear_pending_tb();
  private:
  bool _internal_pending_tb(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_pending_tb() const;
  void _internal_add_pending_tb(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_pending_tb();
  public:
  bool pending_tb(int index) const;
  void set_pending_tb(int index, bool value);
  void add_pending_tb(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      pending_tb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_pending_tb();

  // repeated uint32 ncce = 3;
  int ncce_size() const;
  private:
  int _internal_ncce_size() const;
  public:
  void clear_ncce();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncce(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ncce() const;
  void _internal_add_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ncce();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ncce(int index) const;
  void set_ncce(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ncce() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ncce();

  // uint32 nof_acks = 2;
  void clear_nof_acks();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_acks() const;
  void set_nof_acks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_acks() const;
  void _internal_set_nof_acks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 N_bundle = 4;
  void clear_n_bundle();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_bundle() const;
  void set_n_bundle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_bundle() const;
  void _internal_set_n_bundle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tdd_ack = 5;
  void clear_tdd_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 tdd_ack() const;
  void set_tdd_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tdd_ack() const;
  void _internal_set_tdd_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tdd_ack_m = 6;
  void clear_tdd_ack_m();
  ::PROTOBUF_NAMESPACE_ID::uint32 tdd_ack_m() const;
  void set_tdd_ack_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tdd_ack_m() const;
  void _internal_set_tdd_ack_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool tdd_is_multiplex = 7;
  void clear_tdd_is_multiplex();
  bool tdd_is_multiplex() const;
  void set_tdd_is_multiplex(bool value);
  private:
  bool _internal_tdd_is_multiplex() const;
  void _internal_set_tdd_is_multiplex(bool value);
  public:

  // uint32 tpc_for_pucch = 8;
  void clear_tpc_for_pucch();
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_for_pucch() const;
  void set_tpc_for_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tpc_for_pucch() const;
  void _internal_set_tpc_for_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grant_cc_idx = 9;
  void clear_grant_cc_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 grant_cc_idx() const;
  void set_grant_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grant_cc_idx() const;
  void _internal_set_grant_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_uci_cfg_ack_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > pending_tb_;
  mutable std::atomic<int> _pending_tb_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ncce_;
  mutable std::atomic<int> _ncce_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_acks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_bundle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tdd_ack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tdd_ack_m_;
  bool tdd_is_multiplex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_for_pucch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grant_cc_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_uci_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_uci_cfg_t) */ {
 public:
  inline srsran_uci_cfg_t() : srsran_uci_cfg_t(nullptr) {};
  virtual ~srsran_uci_cfg_t();

  srsran_uci_cfg_t(const srsran_uci_cfg_t& from);
  srsran_uci_cfg_t(srsran_uci_cfg_t&& from) noexcept
    : srsran_uci_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_uci_cfg_t& operator=(const srsran_uci_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_uci_cfg_t& operator=(srsran_uci_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_uci_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_uci_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_uci_cfg_t*>(
               &_srsran_uci_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(srsran_uci_cfg_t& a, srsran_uci_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_uci_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_uci_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_uci_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_uci_cfg_t>(nullptr);
  }

  srsran_uci_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_uci_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_uci_cfg_t& from);
  void MergeFrom(const srsran_uci_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_uci_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_uci_cfg_t";
  }
  protected:
  explicit srsran_uci_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
    kCqiFieldNumber = 2,
    kIsSchedulingRequestTtiFieldNumber = 3,
  };
  // repeated .fs.mac_rrc.srsran_uci_cfg_ack_t ack = 1;
  int ack_size() const;
  private:
  int _internal_ack_size() const;
  public:
  void clear_ack();
  ::fs::mac_rrc::srsran_uci_cfg_ack_t* mutable_ack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_uci_cfg_ack_t >*
      mutable_ack();
  private:
  const ::fs::mac_rrc::srsran_uci_cfg_ack_t& _internal_ack(int index) const;
  ::fs::mac_rrc::srsran_uci_cfg_ack_t* _internal_add_ack();
  public:
  const ::fs::mac_rrc::srsran_uci_cfg_ack_t& ack(int index) const;
  ::fs::mac_rrc::srsran_uci_cfg_ack_t* add_ack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_uci_cfg_ack_t >&
      ack() const;

  // .fs.mac_rrc.srsran_cqi_cfg_t cqi = 2;
  bool has_cqi() const;
  private:
  bool _internal_has_cqi() const;
  public:
  void clear_cqi();
  const ::fs::mac_rrc::srsran_cqi_cfg_t& cqi() const;
  ::fs::mac_rrc::srsran_cqi_cfg_t* release_cqi();
  ::fs::mac_rrc::srsran_cqi_cfg_t* mutable_cqi();
  void set_allocated_cqi(::fs::mac_rrc::srsran_cqi_cfg_t* cqi);
  private:
  const ::fs::mac_rrc::srsran_cqi_cfg_t& _internal_cqi() const;
  ::fs::mac_rrc::srsran_cqi_cfg_t* _internal_mutable_cqi();
  public:
  void unsafe_arena_set_allocated_cqi(
      ::fs::mac_rrc::srsran_cqi_cfg_t* cqi);
  ::fs::mac_rrc::srsran_cqi_cfg_t* unsafe_arena_release_cqi();

  // bool is_scheduling_request_tti = 3;
  void clear_is_scheduling_request_tti();
  bool is_scheduling_request_tti() const;
  void set_is_scheduling_request_tti(bool value);
  private:
  bool _internal_is_scheduling_request_tti() const;
  void _internal_set_is_scheduling_request_tti(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_uci_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_uci_cfg_ack_t > ack_;
  ::fs::mac_rrc::srsran_cqi_cfg_t* cqi_;
  bool is_scheduling_request_tti_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_pucch_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_pucch_cfg_t) */ {
 public:
  inline srsran_pucch_cfg_t() : srsran_pucch_cfg_t(nullptr) {};
  virtual ~srsran_pucch_cfg_t();

  srsran_pucch_cfg_t(const srsran_pucch_cfg_t& from);
  srsran_pucch_cfg_t(srsran_pucch_cfg_t&& from) noexcept
    : srsran_pucch_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_pucch_cfg_t& operator=(const srsran_pucch_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_pucch_cfg_t& operator=(srsran_pucch_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_pucch_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_pucch_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_pucch_cfg_t*>(
               &_srsran_pucch_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(srsran_pucch_cfg_t& a, srsran_pucch_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_pucch_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_pucch_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_pucch_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_pucch_cfg_t>(nullptr);
  }

  srsran_pucch_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_pucch_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_pucch_cfg_t& from);
  void MergeFrom(const srsran_pucch_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_pucch_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_pucch_cfg_t";
  }
  protected:
  explicit srsran_pucch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNPucch1FieldNumber = 10,
    kN1PucchAnCsFieldNumber = 17,
    kN3PucchAnListFieldNumber = 18,
    kPucch2DrsBitsFieldNumber = 27,
    kUciCfgFieldNumber = 2,
    kRntiFieldNumber = 1,
    kDeltaPucchShiftFieldNumber = 3,
    kNRb2FieldNumber = 4,
    kNCsFieldNumber = 5,
    kNPucchVFieldNumber = 6,
    kISrFieldNumber = 8,
    kGroupHoppingEnFieldNumber = 7,
    kSrConfiguredFieldNumber = 9,
    kSimulCqiAckFieldNumber = 13,
    kTddAckMultiplexFieldNumber = 14,
    kNPucch2FieldNumber = 11,
    kNPucchSrFieldNumber = 12,
    kAckNackFeedbackModeFieldNumber = 16,
    kThresholdFormat1FieldNumber = 19,
    kSpsEnabledFieldNumber = 15,
    kMeasTaEnFieldNumber = 24,
    kThresholdDataValidFormat1AFieldNumber = 20,
    kThresholdDataValidFormat2FieldNumber = 21,
    kThresholdDataValidFormat3FieldNumber = 22,
    kThresholdDmrsDetectionFieldNumber = 23,
    kFormatFieldNumber = 25,
    kNPucchFieldNumber = 26,
  };
  // repeated uint32 n_pucch_1 = 10;
  int n_pucch_1_size() const;
  private:
  int _internal_n_pucch_1_size() const;
  public:
  void clear_n_pucch_1();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_pucch_1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_n_pucch_1() const;
  void _internal_add_n_pucch_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_n_pucch_1();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_1(int index) const;
  void set_n_pucch_1(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_n_pucch_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      n_pucch_1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_n_pucch_1();

  // repeated uint32 n1_pucch_an_cs = 17;
  int n1_pucch_an_cs_size() const;
  private:
  int _internal_n1_pucch_an_cs_size() const;
  public:
  void clear_n1_pucch_an_cs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n1_pucch_an_cs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_n1_pucch_an_cs() const;
  void _internal_add_n1_pucch_an_cs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_n1_pucch_an_cs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 n1_pucch_an_cs(int index) const;
  void set_n1_pucch_an_cs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_n1_pucch_an_cs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      n1_pucch_an_cs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_n1_pucch_an_cs();

  // repeated uint32 n3_pucch_an_list = 18;
  int n3_pucch_an_list_size() const;
  private:
  int _internal_n3_pucch_an_list_size() const;
  public:
  void clear_n3_pucch_an_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n3_pucch_an_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_n3_pucch_an_list() const;
  void _internal_add_n3_pucch_an_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_n3_pucch_an_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 n3_pucch_an_list(int index) const;
  void set_n3_pucch_an_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_n3_pucch_an_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      n3_pucch_an_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_n3_pucch_an_list();

  // repeated uint32 pucch2_drs_bits = 27;
  int pucch2_drs_bits_size() const;
  private:
  int _internal_pucch2_drs_bits_size() const;
  public:
  void clear_pucch2_drs_bits();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pucch2_drs_bits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_pucch2_drs_bits() const;
  void _internal_add_pucch2_drs_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_pucch2_drs_bits();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 pucch2_drs_bits(int index) const;
  void set_pucch2_drs_bits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pucch2_drs_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pucch2_drs_bits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pucch2_drs_bits();

  // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 2;
  bool has_uci_cfg() const;
  private:
  bool _internal_has_uci_cfg() const;
  public:
  void clear_uci_cfg();
  const ::fs::mac_rrc::srsran_uci_cfg_t& uci_cfg() const;
  ::fs::mac_rrc::srsran_uci_cfg_t* release_uci_cfg();
  ::fs::mac_rrc::srsran_uci_cfg_t* mutable_uci_cfg();
  void set_allocated_uci_cfg(::fs::mac_rrc::srsran_uci_cfg_t* uci_cfg);
  private:
  const ::fs::mac_rrc::srsran_uci_cfg_t& _internal_uci_cfg() const;
  ::fs::mac_rrc::srsran_uci_cfg_t* _internal_mutable_uci_cfg();
  public:
  void unsafe_arena_set_allocated_uci_cfg(
      ::fs::mac_rrc::srsran_uci_cfg_t* uci_cfg);
  ::fs::mac_rrc::srsran_uci_cfg_t* unsafe_arena_release_uci_cfg();

  // uint32 rnti = 1;
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 delta_pucch_shift = 3;
  void clear_delta_pucch_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 delta_pucch_shift() const;
  void set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delta_pucch_shift() const;
  void _internal_set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_rb_2 = 4;
  void clear_n_rb_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_rb_2() const;
  void set_n_rb_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_rb_2() const;
  void _internal_set_n_rb_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 N_cs = 5;
  void clear_n_cs();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_cs() const;
  void set_n_cs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_cs() const;
  void _internal_set_n_cs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 N_pucch_v = 6;
  void clear_n_pucch_v();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_v() const;
  void set_n_pucch_v(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_pucch_v() const;
  void _internal_set_n_pucch_v(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 I_sr = 8;
  void clear_i_sr();
  ::PROTOBUF_NAMESPACE_ID::uint32 i_sr() const;
  void set_i_sr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_i_sr() const;
  void _internal_set_i_sr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool group_hopping_en = 7;
  void clear_group_hopping_en();
  bool group_hopping_en() const;
  void set_group_hopping_en(bool value);
  private:
  bool _internal_group_hopping_en() const;
  void _internal_set_group_hopping_en(bool value);
  public:

  // bool sr_configured = 9;
  void clear_sr_configured();
  bool sr_configured() const;
  void set_sr_configured(bool value);
  private:
  bool _internal_sr_configured() const;
  void _internal_set_sr_configured(bool value);
  public:

  // bool simul_cqi_ack = 13;
  void clear_simul_cqi_ack();
  bool simul_cqi_ack() const;
  void set_simul_cqi_ack(bool value);
  private:
  bool _internal_simul_cqi_ack() const;
  void _internal_set_simul_cqi_ack(bool value);
  public:

  // bool tdd_ack_multiplex = 14;
  void clear_tdd_ack_multiplex();
  bool tdd_ack_multiplex() const;
  void set_tdd_ack_multiplex(bool value);
  private:
  bool _internal_tdd_ack_multiplex() const;
  void _internal_set_tdd_ack_multiplex(bool value);
  public:

  // uint32 n_pucch_2 = 11;
  void clear_n_pucch_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_2() const;
  void set_n_pucch_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_pucch_2() const;
  void _internal_set_n_pucch_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_pucch_sr = 12;
  void clear_n_pucch_sr();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_sr() const;
  void set_n_pucch_sr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_pucch_sr() const;
  void _internal_set_n_pucch_sr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode = 16;
  void clear_ack_nack_feedback_mode();
  ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode() const;
  void set_ack_nack_feedback_mode(::fs::mac_rrc::srsran_ack_nack_feedback_mode_t value);
  private:
  ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t _internal_ack_nack_feedback_mode() const;
  void _internal_set_ack_nack_feedback_mode(::fs::mac_rrc::srsran_ack_nack_feedback_mode_t value);
  public:

  // float threshold_format1 = 19;
  void clear_threshold_format1();
  float threshold_format1() const;
  void set_threshold_format1(float value);
  private:
  float _internal_threshold_format1() const;
  void _internal_set_threshold_format1(float value);
  public:

  // bool sps_enabled = 15;
  void clear_sps_enabled();
  bool sps_enabled() const;
  void set_sps_enabled(bool value);
  private:
  bool _internal_sps_enabled() const;
  void _internal_set_sps_enabled(bool value);
  public:

  // bool meas_ta_en = 24;
  void clear_meas_ta_en();
  bool meas_ta_en() const;
  void set_meas_ta_en(bool value);
  private:
  bool _internal_meas_ta_en() const;
  void _internal_set_meas_ta_en(bool value);
  public:

  // float threshold_data_valid_format1a = 20;
  void clear_threshold_data_valid_format1a();
  float threshold_data_valid_format1a() const;
  void set_threshold_data_valid_format1a(float value);
  private:
  float _internal_threshold_data_valid_format1a() const;
  void _internal_set_threshold_data_valid_format1a(float value);
  public:

  // float threshold_data_valid_format2 = 21;
  void clear_threshold_data_valid_format2();
  float threshold_data_valid_format2() const;
  void set_threshold_data_valid_format2(float value);
  private:
  float _internal_threshold_data_valid_format2() const;
  void _internal_set_threshold_data_valid_format2(float value);
  public:

  // float threshold_data_valid_format3 = 22;
  void clear_threshold_data_valid_format3();
  float threshold_data_valid_format3() const;
  void set_threshold_data_valid_format3(float value);
  private:
  float _internal_threshold_data_valid_format3() const;
  void _internal_set_threshold_data_valid_format3(float value);
  public:

  // float threshold_dmrs_detection = 23;
  void clear_threshold_dmrs_detection();
  float threshold_dmrs_detection() const;
  void set_threshold_dmrs_detection(float value);
  private:
  float _internal_threshold_dmrs_detection() const;
  void _internal_set_threshold_dmrs_detection(float value);
  public:

  // .fs.mac_rrc.srsran_pucch_format_t format = 25;
  void clear_format();
  ::fs::mac_rrc::srsran_pucch_format_t format() const;
  void set_format(::fs::mac_rrc::srsran_pucch_format_t value);
  private:
  ::fs::mac_rrc::srsran_pucch_format_t _internal_format() const;
  void _internal_set_format(::fs::mac_rrc::srsran_pucch_format_t value);
  public:

  // uint32 n_pucch = 26;
  void clear_n_pucch();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch() const;
  void set_n_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_pucch() const;
  void _internal_set_n_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_pucch_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > n_pucch_1_;
  mutable std::atomic<int> _n_pucch_1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > n1_pucch_an_cs_;
  mutable std::atomic<int> _n1_pucch_an_cs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > n3_pucch_an_list_;
  mutable std::atomic<int> _n3_pucch_an_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pucch2_drs_bits_;
  mutable std::atomic<int> _pucch2_drs_bits_cached_byte_size_;
  ::fs::mac_rrc::srsran_uci_cfg_t* uci_cfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delta_pucch_shift_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_rb_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_cs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 i_sr_;
  bool group_hopping_en_;
  bool sr_configured_;
  bool simul_cqi_ack_;
  bool tdd_ack_multiplex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_sr_;
  int ack_nack_feedback_mode_;
  float threshold_format1_;
  bool sps_enabled_;
  bool meas_ta_en_;
  float threshold_data_valid_format1a_;
  float threshold_data_valid_format2_;
  float threshold_data_valid_format3_;
  float threshold_dmrs_detection_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_pucch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_uci_offset_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_uci_offset_cfg_t) */ {
 public:
  inline srsran_uci_offset_cfg_t() : srsran_uci_offset_cfg_t(nullptr) {};
  virtual ~srsran_uci_offset_cfg_t();

  srsran_uci_offset_cfg_t(const srsran_uci_offset_cfg_t& from);
  srsran_uci_offset_cfg_t(srsran_uci_offset_cfg_t&& from) noexcept
    : srsran_uci_offset_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_uci_offset_cfg_t& operator=(const srsran_uci_offset_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_uci_offset_cfg_t& operator=(srsran_uci_offset_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_uci_offset_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_uci_offset_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_uci_offset_cfg_t*>(
               &_srsran_uci_offset_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(srsran_uci_offset_cfg_t& a, srsran_uci_offset_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_uci_offset_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_uci_offset_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_uci_offset_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_uci_offset_cfg_t>(nullptr);
  }

  srsran_uci_offset_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_uci_offset_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_uci_offset_cfg_t& from);
  void MergeFrom(const srsran_uci_offset_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_uci_offset_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_uci_offset_cfg_t";
  }
  protected:
  explicit srsran_uci_offset_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIOffsetCqiFieldNumber = 1,
    kIOffsetRiFieldNumber = 2,
    kIOffsetAckFieldNumber = 3,
  };
  // uint32 I_offset_cqi = 1;
  void clear_i_offset_cqi();
  ::PROTOBUF_NAMESPACE_ID::uint32 i_offset_cqi() const;
  void set_i_offset_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_i_offset_cqi() const;
  void _internal_set_i_offset_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 I_offset_ri = 2;
  void clear_i_offset_ri();
  ::PROTOBUF_NAMESPACE_ID::uint32 i_offset_ri() const;
  void set_i_offset_ri(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_i_offset_ri() const;
  void _internal_set_i_offset_ri(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 I_offset_ack = 3;
  void clear_i_offset_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 i_offset_ack() const;
  void set_i_offset_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_i_offset_ack() const;
  void _internal_set_i_offset_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_uci_offset_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 i_offset_cqi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 i_offset_ri_;
  ::PROTOBUF_NAMESPACE_ID::uint32 i_offset_ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_dci_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_dci_cfg_t) */ {
 public:
  inline srsran_dci_cfg_t() : srsran_dci_cfg_t(nullptr) {};
  virtual ~srsran_dci_cfg_t();

  srsran_dci_cfg_t(const srsran_dci_cfg_t& from);
  srsran_dci_cfg_t(srsran_dci_cfg_t&& from) noexcept
    : srsran_dci_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_dci_cfg_t& operator=(const srsran_dci_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_dci_cfg_t& operator=(srsran_dci_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_dci_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_dci_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_dci_cfg_t*>(
               &_srsran_dci_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(srsran_dci_cfg_t& a, srsran_dci_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_dci_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_dci_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_dci_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_dci_cfg_t>(nullptr);
  }

  srsran_dci_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_dci_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_dci_cfg_t& from);
  void MergeFrom(const srsran_dci_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_dci_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_dci_cfg_t";
  }
  protected:
  explicit srsran_dci_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultipleCsiRequestEnabledFieldNumber = 1,
    kCifEnabledFieldNumber = 2,
    kCifPresentFieldNumber = 3,
    kSrsRequestEnabledFieldNumber = 4,
    kRaFormatEnabledFieldNumber = 5,
    kIsNotUeSsFieldNumber = 6,
  };
  // bool multiple_csi_request_enabled = 1;
  void clear_multiple_csi_request_enabled();
  bool multiple_csi_request_enabled() const;
  void set_multiple_csi_request_enabled(bool value);
  private:
  bool _internal_multiple_csi_request_enabled() const;
  void _internal_set_multiple_csi_request_enabled(bool value);
  public:

  // bool cif_enabled = 2;
  void clear_cif_enabled();
  bool cif_enabled() const;
  void set_cif_enabled(bool value);
  private:
  bool _internal_cif_enabled() const;
  void _internal_set_cif_enabled(bool value);
  public:

  // bool cif_present = 3;
  void clear_cif_present();
  bool cif_present() const;
  void set_cif_present(bool value);
  private:
  bool _internal_cif_present() const;
  void _internal_set_cif_present(bool value);
  public:

  // bool srs_request_enabled = 4;
  void clear_srs_request_enabled();
  bool srs_request_enabled() const;
  void set_srs_request_enabled(bool value);
  private:
  bool _internal_srs_request_enabled() const;
  void _internal_set_srs_request_enabled(bool value);
  public:

  // bool ra_format_enabled = 5;
  void clear_ra_format_enabled();
  bool ra_format_enabled() const;
  void set_ra_format_enabled(bool value);
  private:
  bool _internal_ra_format_enabled() const;
  void _internal_set_ra_format_enabled(bool value);
  public:

  // bool is_not_ue_ss = 6;
  void clear_is_not_ue_ss();
  bool is_not_ue_ss() const;
  void set_is_not_ue_ss(bool value);
  private:
  bool _internal_is_not_ue_ss() const;
  void _internal_set_is_not_ue_ss(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_dci_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool multiple_csi_request_enabled_;
  bool cif_enabled_;
  bool cif_present_;
  bool srs_request_enabled_;
  bool ra_format_enabled_;
  bool is_not_ue_ss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_ra_tb_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_ra_tb_t) */ {
 public:
  inline srsran_ra_tb_t() : srsran_ra_tb_t(nullptr) {};
  virtual ~srsran_ra_tb_t();

  srsran_ra_tb_t(const srsran_ra_tb_t& from);
  srsran_ra_tb_t(srsran_ra_tb_t&& from) noexcept
    : srsran_ra_tb_t() {
    *this = ::std::move(from);
  }

  inline srsran_ra_tb_t& operator=(const srsran_ra_tb_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_ra_tb_t& operator=(srsran_ra_tb_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_ra_tb_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_ra_tb_t* internal_default_instance() {
    return reinterpret_cast<const srsran_ra_tb_t*>(
               &_srsran_ra_tb_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(srsran_ra_tb_t& a, srsran_ra_tb_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_ra_tb_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_ra_tb_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_ra_tb_t* New() const final {
    return CreateMaybeMessage<srsran_ra_tb_t>(nullptr);
  }

  srsran_ra_tb_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_ra_tb_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_ra_tb_t& from);
  void MergeFrom(const srsran_ra_tb_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_ra_tb_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_ra_tb_t";
  }
  protected:
  explicit srsran_ra_tb_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModFieldNumber = 1,
    kTbsFieldNumber = 2,
    kRvFieldNumber = 3,
    kNofBitsFieldNumber = 4,
    kCwIdxFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kMcsIdxFieldNumber = 7,
  };
  // .fs.mac_rrc.srsran_mod_t mod = 1;
  void clear_mod();
  ::fs::mac_rrc::srsran_mod_t mod() const;
  void set_mod(::fs::mac_rrc::srsran_mod_t value);
  private:
  ::fs::mac_rrc::srsran_mod_t _internal_mod() const;
  void _internal_set_mod(::fs::mac_rrc::srsran_mod_t value);
  public:

  // int32 tbs = 2;
  void clear_tbs();
  ::PROTOBUF_NAMESPACE_ID::int32 tbs() const;
  void set_tbs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tbs() const;
  void _internal_set_tbs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rv = 3;
  void clear_rv();
  ::PROTOBUF_NAMESPACE_ID::int32 rv() const;
  void set_rv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rv() const;
  void _internal_set_rv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 nof_bits = 4;
  void clear_nof_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_bits() const;
  void set_nof_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_bits() const;
  void _internal_set_nof_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cw_idx = 5;
  void clear_cw_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 cw_idx() const;
  void set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cw_idx() const;
  void _internal_set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enabled = 6;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 mcs_idx = 7;
  void clear_mcs_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs_idx() const;
  void set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcs_idx() const;
  void _internal_set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_ra_tb_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mod_;
  ::PROTOBUF_NAMESPACE_ID::int32 tbs_;
  ::PROTOBUF_NAMESPACE_ID::int32 rv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cw_idx_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_pdsch_grant_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_pdsch_grant_t) */ {
 public:
  inline srsran_pdsch_grant_t() : srsran_pdsch_grant_t(nullptr) {};
  virtual ~srsran_pdsch_grant_t();

  srsran_pdsch_grant_t(const srsran_pdsch_grant_t& from);
  srsran_pdsch_grant_t(srsran_pdsch_grant_t&& from) noexcept
    : srsran_pdsch_grant_t() {
    *this = ::std::move(from);
  }

  inline srsran_pdsch_grant_t& operator=(const srsran_pdsch_grant_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_pdsch_grant_t& operator=(srsran_pdsch_grant_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_pdsch_grant_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_pdsch_grant_t* internal_default_instance() {
    return reinterpret_cast<const srsran_pdsch_grant_t*>(
               &_srsran_pdsch_grant_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(srsran_pdsch_grant_t& a, srsran_pdsch_grant_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_pdsch_grant_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_pdsch_grant_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_pdsch_grant_t* New() const final {
    return CreateMaybeMessage<srsran_pdsch_grant_t>(nullptr);
  }

  srsran_pdsch_grant_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_pdsch_grant_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_pdsch_grant_t& from);
  void MergeFrom(const srsran_pdsch_grant_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_pdsch_grant_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_pdsch_grant_t";
  }
  protected:
  explicit srsran_pdsch_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrbIdxFieldNumber = 3,
    kNofSymbSlotFieldNumber = 6,
    kTbFieldNumber = 7,
    kLastTbsFieldNumber = 8,
    kTxSchemeFieldNumber = 1,
    kPmiFieldNumber = 2,
    kNofPrbFieldNumber = 4,
    kNofReFieldNumber = 5,
    kNofTbFieldNumber = 9,
    kNofLayersFieldNumber = 10,
  };
  // repeated bool prb_idx = 3;
  int prb_idx_size() const;
  private:
  int _internal_prb_idx_size() const;
  public:
  void clear_prb_idx();
  private:
  bool _internal_prb_idx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_prb_idx() const;
  void _internal_add_prb_idx(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_prb_idx();
  public:
  bool prb_idx(int index) const;
  void set_prb_idx(int index, bool value);
  void add_prb_idx(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      prb_idx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_prb_idx();

  // repeated uint32 nof_symb_slot = 6;
  int nof_symb_slot_size() const;
  private:
  int _internal_nof_symb_slot_size() const;
  public:
  void clear_nof_symb_slot();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_symb_slot(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nof_symb_slot() const;
  void _internal_add_nof_symb_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nof_symb_slot();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_symb_slot(int index) const;
  void set_nof_symb_slot(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nof_symb_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nof_symb_slot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nof_symb_slot();

  // repeated .fs.mac_rrc.srsran_ra_tb_t tb = 7;
  int tb_size() const;
  private:
  int _internal_tb_size() const;
  public:
  void clear_tb();
  ::fs::mac_rrc::srsran_ra_tb_t* mutable_tb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_ra_tb_t >*
      mutable_tb();
  private:
  const ::fs::mac_rrc::srsran_ra_tb_t& _internal_tb(int index) const;
  ::fs::mac_rrc::srsran_ra_tb_t* _internal_add_tb();
  public:
  const ::fs::mac_rrc::srsran_ra_tb_t& tb(int index) const;
  ::fs::mac_rrc::srsran_ra_tb_t* add_tb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_ra_tb_t >&
      tb() const;

  // repeated int32 last_tbs = 8;
  int last_tbs_size() const;
  private:
  int _internal_last_tbs_size() const;
  public:
  void clear_last_tbs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_tbs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_last_tbs() const;
  void _internal_add_last_tbs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_last_tbs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 last_tbs(int index) const;
  void set_last_tbs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_last_tbs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      last_tbs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_last_tbs();

  // .fs.mac_rrc.srsran_tx_scheme_t tx_scheme = 1;
  void clear_tx_scheme();
  ::fs::mac_rrc::srsran_tx_scheme_t tx_scheme() const;
  void set_tx_scheme(::fs::mac_rrc::srsran_tx_scheme_t value);
  private:
  ::fs::mac_rrc::srsran_tx_scheme_t _internal_tx_scheme() const;
  void _internal_set_tx_scheme(::fs::mac_rrc::srsran_tx_scheme_t value);
  public:

  // uint32 pmi = 2;
  void clear_pmi();
  ::PROTOBUF_NAMESPACE_ID::uint32 pmi() const;
  void set_pmi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pmi() const;
  void _internal_set_pmi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_prb = 4;
  void clear_nof_prb();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_prb() const;
  void set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_prb() const;
  void _internal_set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_re = 5;
  void clear_nof_re();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_re() const;
  void set_nof_re(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_re() const;
  void _internal_set_nof_re(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_tb = 9;
  void clear_nof_tb();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_tb() const;
  void set_nof_tb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_tb() const;
  void _internal_set_nof_tb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_layers = 10;
  void clear_nof_layers();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_layers() const;
  void set_nof_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_layers() const;
  void _internal_set_nof_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_pdsch_grant_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > prb_idx_;
  mutable std::atomic<int> _prb_idx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nof_symb_slot_;
  mutable std::atomic<int> _nof_symb_slot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_ra_tb_t > tb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > last_tbs_;
  mutable std::atomic<int> _last_tbs_cached_byte_size_;
  int tx_scheme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pmi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_prb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_re_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_tb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_cqi_report_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_cqi_report_cfg_t) */ {
 public:
  inline srsran_cqi_report_cfg_t() : srsran_cqi_report_cfg_t(nullptr) {};
  virtual ~srsran_cqi_report_cfg_t();

  srsran_cqi_report_cfg_t(const srsran_cqi_report_cfg_t& from);
  srsran_cqi_report_cfg_t(srsran_cqi_report_cfg_t&& from) noexcept
    : srsran_cqi_report_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_cqi_report_cfg_t& operator=(const srsran_cqi_report_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_cqi_report_cfg_t& operator=(srsran_cqi_report_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_cqi_report_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_cqi_report_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_cqi_report_cfg_t*>(
               &_srsran_cqi_report_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(srsran_cqi_report_cfg_t& a, srsran_cqi_report_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_cqi_report_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_cqi_report_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_cqi_report_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_cqi_report_cfg_t>(nullptr);
  }

  srsran_cqi_report_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_cqi_report_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_cqi_report_cfg_t& from);
  void MergeFrom(const srsran_cqi_report_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_cqi_report_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_cqi_report_cfg_t";
  }
  protected:
  explicit srsran_cqi_report_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPmiIdxFieldNumber = 3,
    kPeriodicConfiguredFieldNumber = 1,
    kAperiodicConfiguredFieldNumber = 2,
    kRiIdxPresentFieldNumber = 5,
    kFormatIsSubbandFieldNumber = 6,
    kRiIdxFieldNumber = 4,
    kSubbandSizeFieldNumber = 7,
    kPeriodicModeFieldNumber = 8,
    kAperiodicModeFieldNumber = 9,
  };
  // uint32 pmi_idx = 3;
  void clear_pmi_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 pmi_idx() const;
  void set_pmi_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pmi_idx() const;
  void _internal_set_pmi_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool periodic_configured = 1;
  void clear_periodic_configured();
  bool periodic_configured() const;
  void set_periodic_configured(bool value);
  private:
  bool _internal_periodic_configured() const;
  void _internal_set_periodic_configured(bool value);
  public:

  // bool aperiodic_configured = 2;
  void clear_aperiodic_configured();
  bool aperiodic_configured() const;
  void set_aperiodic_configured(bool value);
  private:
  bool _internal_aperiodic_configured() const;
  void _internal_set_aperiodic_configured(bool value);
  public:

  // bool ri_idx_present = 5;
  void clear_ri_idx_present();
  bool ri_idx_present() const;
  void set_ri_idx_present(bool value);
  private:
  bool _internal_ri_idx_present() const;
  void _internal_set_ri_idx_present(bool value);
  public:

  // bool format_is_subband = 6;
  void clear_format_is_subband();
  bool format_is_subband() const;
  void set_format_is_subband(bool value);
  private:
  bool _internal_format_is_subband() const;
  void _internal_set_format_is_subband(bool value);
  public:

  // uint32 ri_idx = 4;
  void clear_ri_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 ri_idx() const;
  void set_ri_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ri_idx() const;
  void _internal_set_ri_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 subband_size = 7;
  void clear_subband_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 subband_size() const;
  void set_subband_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subband_size() const;
  void _internal_set_subband_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.srsran_cqi_report_mode_t periodic_mode = 8;
  void clear_periodic_mode();
  ::fs::mac_rrc::srsran_cqi_report_mode_t periodic_mode() const;
  void set_periodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value);
  private:
  ::fs::mac_rrc::srsran_cqi_report_mode_t _internal_periodic_mode() const;
  void _internal_set_periodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value);
  public:

  // .fs.mac_rrc.srsran_cqi_report_mode_t aperiodic_mode = 9;
  void clear_aperiodic_mode();
  ::fs::mac_rrc::srsran_cqi_report_mode_t aperiodic_mode() const;
  void set_aperiodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value);
  private:
  ::fs::mac_rrc::srsran_cqi_report_mode_t _internal_aperiodic_mode() const;
  void _internal_set_aperiodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_cqi_report_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pmi_idx_;
  bool periodic_configured_;
  bool aperiodic_configured_;
  bool ri_idx_present_;
  bool format_is_subband_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ri_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subband_size_;
  int periodic_mode_;
  int aperiodic_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_softbuffer_rx_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_softbuffer_rx_t) */ {
 public:
  inline srsran_softbuffer_rx_t() : srsran_softbuffer_rx_t(nullptr) {};
  virtual ~srsran_softbuffer_rx_t();

  srsran_softbuffer_rx_t(const srsran_softbuffer_rx_t& from);
  srsran_softbuffer_rx_t(srsran_softbuffer_rx_t&& from) noexcept
    : srsran_softbuffer_rx_t() {
    *this = ::std::move(from);
  }

  inline srsran_softbuffer_rx_t& operator=(const srsran_softbuffer_rx_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_softbuffer_rx_t& operator=(srsran_softbuffer_rx_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_softbuffer_rx_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_softbuffer_rx_t* internal_default_instance() {
    return reinterpret_cast<const srsran_softbuffer_rx_t*>(
               &_srsran_softbuffer_rx_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(srsran_softbuffer_rx_t& a, srsran_softbuffer_rx_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_softbuffer_rx_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_softbuffer_rx_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_softbuffer_rx_t* New() const final {
    return CreateMaybeMessage<srsran_softbuffer_rx_t>(nullptr);
  }

  srsran_softbuffer_rx_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_softbuffer_rx_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_softbuffer_rx_t& from);
  void MergeFrom(const srsran_softbuffer_rx_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_softbuffer_rx_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_softbuffer_rx_t";
  }
  protected:
  explicit srsran_softbuffer_rx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFFieldNumber = 3,
    kDataFieldNumber = 4,
    kCbCrcFieldNumber = 5,
    kMaxCbFieldNumber = 1,
    kMaxCbSizeFieldNumber = 2,
    kTbCrcFieldNumber = 6,
  };
  // repeated int32 buffer_f = 3;
  int buffer_f_size() const;
  private:
  int _internal_buffer_f_size() const;
  public:
  void clear_buffer_f();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_f(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buffer_f() const;
  void _internal_add_buffer_f(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buffer_f();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_f(int index) const;
  void set_buffer_f(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buffer_f(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buffer_f() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buffer_f();

  // repeated uint32 data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // repeated bool cb_crc = 5;
  int cb_crc_size() const;
  private:
  int _internal_cb_crc_size() const;
  public:
  void clear_cb_crc();
  private:
  bool _internal_cb_crc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_cb_crc() const;
  void _internal_add_cb_crc(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_cb_crc();
  public:
  bool cb_crc(int index) const;
  void set_cb_crc(int index, bool value);
  void add_cb_crc(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      cb_crc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_cb_crc();

  // uint32 max_cb = 1;
  void clear_max_cb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb() const;
  void set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb() const;
  void _internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_cb_size = 2;
  void clear_max_cb_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size() const;
  void set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb_size() const;
  void _internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool tb_crc = 6;
  void clear_tb_crc();
  bool tb_crc() const;
  void set_tb_crc(bool value);
  private:
  bool _internal_tb_crc() const;
  void _internal_set_tb_crc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_softbuffer_rx_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buffer_f_;
  mutable std::atomic<int> _buffer_f_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > cb_crc_;
  mutable std::atomic<int> _cb_crc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size_;
  bool tb_crc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_softbuffer_tx_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_softbuffer_tx_t) */ {
 public:
  inline srsran_softbuffer_tx_t() : srsran_softbuffer_tx_t(nullptr) {};
  virtual ~srsran_softbuffer_tx_t();

  srsran_softbuffer_tx_t(const srsran_softbuffer_tx_t& from);
  srsran_softbuffer_tx_t(srsran_softbuffer_tx_t&& from) noexcept
    : srsran_softbuffer_tx_t() {
    *this = ::std::move(from);
  }

  inline srsran_softbuffer_tx_t& operator=(const srsran_softbuffer_tx_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_softbuffer_tx_t& operator=(srsran_softbuffer_tx_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_softbuffer_tx_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_softbuffer_tx_t* internal_default_instance() {
    return reinterpret_cast<const srsran_softbuffer_tx_t*>(
               &_srsran_softbuffer_tx_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(srsran_softbuffer_tx_t& a, srsran_softbuffer_tx_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_softbuffer_tx_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_softbuffer_tx_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_softbuffer_tx_t* New() const final {
    return CreateMaybeMessage<srsran_softbuffer_tx_t>(nullptr);
  }

  srsran_softbuffer_tx_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_softbuffer_tx_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_softbuffer_tx_t& from);
  void MergeFrom(const srsran_softbuffer_tx_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_softbuffer_tx_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_softbuffer_tx_t";
  }
  protected:
  explicit srsran_softbuffer_tx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferBFieldNumber = 3,
    kMaxCbFieldNumber = 1,
    kMaxCbSizeFieldNumber = 2,
  };
  // repeated uint32 buffer_b = 3;
  int buffer_b_size() const;
  private:
  int _internal_buffer_b_size() const;
  public:
  void clear_buffer_b();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buffer_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_buffer_b() const;
  void _internal_add_buffer_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_buffer_b();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 buffer_b(int index) const;
  void set_buffer_b(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_buffer_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      buffer_b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_buffer_b();

  // uint32 max_cb = 1;
  void clear_max_cb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb() const;
  void set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb() const;
  void _internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_cb_size = 2;
  void clear_max_cb_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size() const;
  void set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb_size() const;
  void _internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_softbuffer_tx_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > buffer_b_;
  mutable std::atomic<int> _buffer_b_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_pdsch_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_pdsch_cfg_t) */ {
 public:
  inline srsran_pdsch_cfg_t() : srsran_pdsch_cfg_t(nullptr) {};
  virtual ~srsran_pdsch_cfg_t();

  srsran_pdsch_cfg_t(const srsran_pdsch_cfg_t& from);
  srsran_pdsch_cfg_t(srsran_pdsch_cfg_t&& from) noexcept
    : srsran_pdsch_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_pdsch_cfg_t& operator=(const srsran_pdsch_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_pdsch_cfg_t& operator=(srsran_pdsch_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_pdsch_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_pdsch_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_pdsch_cfg_t*>(
               &_srsran_pdsch_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(srsran_pdsch_cfg_t& a, srsran_pdsch_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_pdsch_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_pdsch_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_pdsch_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_pdsch_cfg_t>(nullptr);
  }

  srsran_pdsch_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_pdsch_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_pdsch_cfg_t& from);
  void MergeFrom(const srsran_pdsch_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_pdsch_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_pdsch_cfg_t";
  }
  protected:
  explicit srsran_pdsch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 11,
    kRxFieldNumber = 12,
    kGrantFieldNumber = 1,
    kRntiFieldNumber = 2,
    kMaxNofIterationsFieldNumber = 3,
    kDecoderTypeFieldNumber = 4,
    kPAFieldNumber = 5,
    kPBFieldNumber = 6,
    kRsPowerFieldNumber = 7,
    kPowerScaleFieldNumber = 8,
    kCsiEnableFieldNumber = 9,
    kUseTbsIndexAltFieldNumber = 10,
    kMeasEvmEnFieldNumber = 13,
    kMeasTimeEnFieldNumber = 14,
    kMeasTimeValueFieldNumber = 15,
  };
  // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 11;
  int tx_size() const;
  private:
  int _internal_tx_size() const;
  public:
  void clear_tx();
  ::fs::mac_rrc::srsran_softbuffer_tx_t* mutable_tx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_tx_t >*
      mutable_tx();
  private:
  const ::fs::mac_rrc::srsran_softbuffer_tx_t& _internal_tx(int index) const;
  ::fs::mac_rrc::srsran_softbuffer_tx_t* _internal_add_tx();
  public:
  const ::fs::mac_rrc::srsran_softbuffer_tx_t& tx(int index) const;
  ::fs::mac_rrc::srsran_softbuffer_tx_t* add_tx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_tx_t >&
      tx() const;

  // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 12;
  int rx_size() const;
  private:
  int _internal_rx_size() const;
  public:
  void clear_rx();
  ::fs::mac_rrc::srsran_softbuffer_rx_t* mutable_rx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_rx_t >*
      mutable_rx();
  private:
  const ::fs::mac_rrc::srsran_softbuffer_rx_t& _internal_rx(int index) const;
  ::fs::mac_rrc::srsran_softbuffer_rx_t* _internal_add_rx();
  public:
  const ::fs::mac_rrc::srsran_softbuffer_rx_t& rx(int index) const;
  ::fs::mac_rrc::srsran_softbuffer_rx_t* add_rx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_rx_t >&
      rx() const;

  // .fs.mac_rrc.srsran_pdsch_grant_t grant = 1;
  bool has_grant() const;
  private:
  bool _internal_has_grant() const;
  public:
  void clear_grant();
  const ::fs::mac_rrc::srsran_pdsch_grant_t& grant() const;
  ::fs::mac_rrc::srsran_pdsch_grant_t* release_grant();
  ::fs::mac_rrc::srsran_pdsch_grant_t* mutable_grant();
  void set_allocated_grant(::fs::mac_rrc::srsran_pdsch_grant_t* grant);
  private:
  const ::fs::mac_rrc::srsran_pdsch_grant_t& _internal_grant() const;
  ::fs::mac_rrc::srsran_pdsch_grant_t* _internal_mutable_grant();
  public:
  void unsafe_arena_set_allocated_grant(
      ::fs::mac_rrc::srsran_pdsch_grant_t* grant);
  ::fs::mac_rrc::srsran_pdsch_grant_t* unsafe_arena_release_grant();

  // uint32 rnti = 2;
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_nof_iterations = 3;
  void clear_max_nof_iterations();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nof_iterations() const;
  void set_max_nof_iterations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_nof_iterations() const;
  void _internal_set_max_nof_iterations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.srsran_mimo_decoder_t decoder_type = 4;
  void clear_decoder_type();
  ::fs::mac_rrc::srsran_mimo_decoder_t decoder_type() const;
  void set_decoder_type(::fs::mac_rrc::srsran_mimo_decoder_t value);
  private:
  ::fs::mac_rrc::srsran_mimo_decoder_t _internal_decoder_type() const;
  void _internal_set_decoder_type(::fs::mac_rrc::srsran_mimo_decoder_t value);
  public:

  // float p_a = 5;
  void clear_p_a();
  float p_a() const;
  void set_p_a(float value);
  private:
  float _internal_p_a() const;
  void _internal_set_p_a(float value);
  public:

  // uint32 p_b = 6;
  void clear_p_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 p_b() const;
  void set_p_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_b() const;
  void _internal_set_p_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float rs_power = 7;
  void clear_rs_power();
  float rs_power() const;
  void set_rs_power(float value);
  private:
  float _internal_rs_power() const;
  void _internal_set_rs_power(float value);
  public:

  // bool power_scale = 8;
  void clear_power_scale();
  bool power_scale() const;
  void set_power_scale(bool value);
  private:
  bool _internal_power_scale() const;
  void _internal_set_power_scale(bool value);
  public:

  // bool csi_enable = 9;
  void clear_csi_enable();
  bool csi_enable() const;
  void set_csi_enable(bool value);
  private:
  bool _internal_csi_enable() const;
  void _internal_set_csi_enable(bool value);
  public:

  // bool use_tbs_index_alt = 10;
  void clear_use_tbs_index_alt();
  bool use_tbs_index_alt() const;
  void set_use_tbs_index_alt(bool value);
  private:
  bool _internal_use_tbs_index_alt() const;
  void _internal_set_use_tbs_index_alt(bool value);
  public:

  // bool meas_evm_en = 13;
  void clear_meas_evm_en();
  bool meas_evm_en() const;
  void set_meas_evm_en(bool value);
  private:
  bool _internal_meas_evm_en() const;
  void _internal_set_meas_evm_en(bool value);
  public:

  // bool meas_time_en = 14;
  void clear_meas_time_en();
  bool meas_time_en() const;
  void set_meas_time_en(bool value);
  private:
  bool _internal_meas_time_en() const;
  void _internal_set_meas_time_en(bool value);
  public:

  // uint32 meas_time_value = 15;
  void clear_meas_time_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 meas_time_value() const;
  void set_meas_time_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meas_time_value() const;
  void _internal_set_meas_time_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_pdsch_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_tx_t > tx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_rx_t > rx_;
  ::fs::mac_rrc::srsran_pdsch_grant_t* grant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nof_iterations_;
  int decoder_type_;
  float p_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_b_;
  float rs_power_;
  bool power_scale_;
  bool csi_enable_;
  bool use_tbs_index_alt_;
  bool meas_evm_en_;
  bool meas_time_en_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meas_time_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class srsran_dl_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.srsran_dl_cfg_t) */ {
 public:
  inline srsran_dl_cfg_t() : srsran_dl_cfg_t(nullptr) {};
  virtual ~srsran_dl_cfg_t();

  srsran_dl_cfg_t(const srsran_dl_cfg_t& from);
  srsran_dl_cfg_t(srsran_dl_cfg_t&& from) noexcept
    : srsran_dl_cfg_t() {
    *this = ::std::move(from);
  }

  inline srsran_dl_cfg_t& operator=(const srsran_dl_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_dl_cfg_t& operator=(srsran_dl_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_dl_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_dl_cfg_t* internal_default_instance() {
    return reinterpret_cast<const srsran_dl_cfg_t*>(
               &_srsran_dl_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(srsran_dl_cfg_t& a, srsran_dl_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_dl_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_dl_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_dl_cfg_t* New() const final {
    return CreateMaybeMessage<srsran_dl_cfg_t>(nullptr);
  }

  srsran_dl_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_dl_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_dl_cfg_t& from);
  void MergeFrom(const srsran_dl_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_dl_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.srsran_dl_cfg_t";
  }
  protected:
  explicit srsran_dl_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCqiReportFieldNumber = 1,
    kPdschFieldNumber = 2,
    kDciFieldNumber = 3,
    kTmFieldNumber = 4,
    kDciCommonSsFieldNumber = 5,
  };
  // .fs.mac_rrc.srsran_cqi_report_cfg_t cqi_report = 1;
  bool has_cqi_report() const;
  private:
  bool _internal_has_cqi_report() const;
  public:
  void clear_cqi_report();
  const ::fs::mac_rrc::srsran_cqi_report_cfg_t& cqi_report() const;
  ::fs::mac_rrc::srsran_cqi_report_cfg_t* release_cqi_report();
  ::fs::mac_rrc::srsran_cqi_report_cfg_t* mutable_cqi_report();
  void set_allocated_cqi_report(::fs::mac_rrc::srsran_cqi_report_cfg_t* cqi_report);
  private:
  const ::fs::mac_rrc::srsran_cqi_report_cfg_t& _internal_cqi_report() const;
  ::fs::mac_rrc::srsran_cqi_report_cfg_t* _internal_mutable_cqi_report();
  public:
  void unsafe_arena_set_allocated_cqi_report(
      ::fs::mac_rrc::srsran_cqi_report_cfg_t* cqi_report);
  ::fs::mac_rrc::srsran_cqi_report_cfg_t* unsafe_arena_release_cqi_report();

  // .fs.mac_rrc.srsran_pdsch_cfg_t pdsch = 2;
  bool has_pdsch() const;
  private:
  bool _internal_has_pdsch() const;
  public:
  void clear_pdsch();
  const ::fs::mac_rrc::srsran_pdsch_cfg_t& pdsch() const;
  ::fs::mac_rrc::srsran_pdsch_cfg_t* release_pdsch();
  ::fs::mac_rrc::srsran_pdsch_cfg_t* mutable_pdsch();
  void set_allocated_pdsch(::fs::mac_rrc::srsran_pdsch_cfg_t* pdsch);
  private:
  const ::fs::mac_rrc::srsran_pdsch_cfg_t& _internal_pdsch() const;
  ::fs::mac_rrc::srsran_pdsch_cfg_t* _internal_mutable_pdsch();
  public:
  void unsafe_arena_set_allocated_pdsch(
      ::fs::mac_rrc::srsran_pdsch_cfg_t* pdsch);
  ::fs::mac_rrc::srsran_pdsch_cfg_t* unsafe_arena_release_pdsch();

  // .fs.mac_rrc.srsran_dci_cfg_t dci = 3;
  bool has_dci() const;
  private:
  bool _internal_has_dci() const;
  public:
  void clear_dci();
  const ::fs::mac_rrc::srsran_dci_cfg_t& dci() const;
  ::fs::mac_rrc::srsran_dci_cfg_t* release_dci();
  ::fs::mac_rrc::srsran_dci_cfg_t* mutable_dci();
  void set_allocated_dci(::fs::mac_rrc::srsran_dci_cfg_t* dci);
  private:
  const ::fs::mac_rrc::srsran_dci_cfg_t& _internal_dci() const;
  ::fs::mac_rrc::srsran_dci_cfg_t* _internal_mutable_dci();
  public:
  void unsafe_arena_set_allocated_dci(
      ::fs::mac_rrc::srsran_dci_cfg_t* dci);
  ::fs::mac_rrc::srsran_dci_cfg_t* unsafe_arena_release_dci();

  // .fs.mac_rrc.srsran_tm_t tm = 4;
  void clear_tm();
  ::fs::mac_rrc::srsran_tm_t tm() const;
  void set_tm(::fs::mac_rrc::srsran_tm_t value);
  private:
  ::fs::mac_rrc::srsran_tm_t _internal_tm() const;
  void _internal_set_tm(::fs::mac_rrc::srsran_tm_t value);
  public:

  // bool dci_common_ss = 5;
  void clear_dci_common_ss();
  bool dci_common_ss() const;
  void set_dci_common_ss(bool value);
  private:
  bool _internal_dci_common_ss() const;
  void _internal_set_dci_common_ss(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.srsran_dl_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::mac_rrc::srsran_cqi_report_cfg_t* cqi_report_;
  ::fs::mac_rrc::srsran_pdsch_cfg_t* pdsch_;
  ::fs::mac_rrc::srsran_dci_cfg_t* dci_;
  int tm_;
  bool dci_common_ss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class cc_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.cc_cfg_t) */ {
 public:
  inline cc_cfg_t() : cc_cfg_t(nullptr) {};
  virtual ~cc_cfg_t();

  cc_cfg_t(const cc_cfg_t& from);
  cc_cfg_t(cc_cfg_t&& from) noexcept
    : cc_cfg_t() {
    *this = ::std::move(from);
  }

  inline cc_cfg_t& operator=(const cc_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline cc_cfg_t& operator=(cc_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cc_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cc_cfg_t* internal_default_instance() {
    return reinterpret_cast<const cc_cfg_t*>(
               &_cc_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(cc_cfg_t& a, cc_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(cc_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cc_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cc_cfg_t* New() const final {
    return CreateMaybeMessage<cc_cfg_t>(nullptr);
  }

  cc_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cc_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cc_cfg_t& from);
  void MergeFrom(const cc_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cc_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.cc_cfg_t";
  }
  protected:
  explicit cc_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDlCfgFieldNumber = 3,
    kActiveFieldNumber = 1,
    kEnbCcIdxFieldNumber = 2,
    kAperiodicCqiPeriodFieldNumber = 4,
  };
  // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 3;
  bool has_dl_cfg() const;
  private:
  bool _internal_has_dl_cfg() const;
  public:
  void clear_dl_cfg();
  const ::fs::mac_rrc::srsran_dl_cfg_t& dl_cfg() const;
  ::fs::mac_rrc::srsran_dl_cfg_t* release_dl_cfg();
  ::fs::mac_rrc::srsran_dl_cfg_t* mutable_dl_cfg();
  void set_allocated_dl_cfg(::fs::mac_rrc::srsran_dl_cfg_t* dl_cfg);
  private:
  const ::fs::mac_rrc::srsran_dl_cfg_t& _internal_dl_cfg() const;
  ::fs::mac_rrc::srsran_dl_cfg_t* _internal_mutable_dl_cfg();
  public:
  void unsafe_arena_set_allocated_dl_cfg(
      ::fs::mac_rrc::srsran_dl_cfg_t* dl_cfg);
  ::fs::mac_rrc::srsran_dl_cfg_t* unsafe_arena_release_dl_cfg();

  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // uint32 enb_cc_idx = 2;
  void clear_enb_cc_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 enb_cc_idx() const;
  void set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enb_cc_idx() const;
  void _internal_set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 aperiodic_cqi_period = 4;
  void clear_aperiodic_cqi_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 aperiodic_cqi_period() const;
  void set_aperiodic_cqi_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aperiodic_cqi_period() const;
  void _internal_set_aperiodic_cqi_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.cc_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::mac_rrc::srsran_dl_cfg_t* dl_cfg_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enb_cc_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 aperiodic_cqi_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// -------------------------------------------------------------------

class ue_cfg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_rrc.ue_cfg_t) */ {
 public:
  inline ue_cfg_t() : ue_cfg_t(nullptr) {};
  virtual ~ue_cfg_t();

  ue_cfg_t(const ue_cfg_t& from);
  ue_cfg_t(ue_cfg_t&& from) noexcept
    : ue_cfg_t() {
    *this = ::std::move(from);
  }

  inline ue_cfg_t& operator=(const ue_cfg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ue_cfg_t& operator=(ue_cfg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ue_cfg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ue_cfg_t* internal_default_instance() {
    return reinterpret_cast<const ue_cfg_t*>(
               &_ue_cfg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ue_cfg_t& a, ue_cfg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ue_cfg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ue_cfg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ue_cfg_t* New() const final {
    return CreateMaybeMessage<ue_cfg_t>(nullptr);
  }

  ue_cfg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ue_cfg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ue_cfg_t& from);
  void MergeFrom(const ue_cfg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ue_cfg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_rrc.ue_cfg_t";
  }
  protected:
  explicit ue_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ue_5fcfg_5ft_2eproto);
    return ::descriptor_table_ue_5fcfg_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeBearersFieldNumber = 5,
    kSupportedCcListFieldNumber = 6,
    kUciOffsetFieldNumber = 3,
    kPucchCfgFieldNumber = 4,
    kDlAntInfoFieldNumber = 7,
    kMaxharqTxFieldNumber = 1,
    kContinuousPuschFieldNumber = 2,
    kUseTbsIndexAltFieldNumber = 8,
    kMeasgapPeriodFieldNumber = 9,
    kMeasgapOffsetFieldNumber = 10,
    kSupportUl64QamFieldNumber = 11,
  };
  // repeated .fs.mac_rrc.ue_bearer_cfg_t ue_bearers = 5;
  int ue_bearers_size() const;
  private:
  int _internal_ue_bearers_size() const;
  public:
  void clear_ue_bearers();
  ::fs::mac_rrc::ue_bearer_cfg_t* mutable_ue_bearers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::ue_bearer_cfg_t >*
      mutable_ue_bearers();
  private:
  const ::fs::mac_rrc::ue_bearer_cfg_t& _internal_ue_bearers(int index) const;
  ::fs::mac_rrc::ue_bearer_cfg_t* _internal_add_ue_bearers();
  public:
  const ::fs::mac_rrc::ue_bearer_cfg_t& ue_bearers(int index) const;
  ::fs::mac_rrc::ue_bearer_cfg_t* add_ue_bearers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::ue_bearer_cfg_t >&
      ue_bearers() const;

  // repeated .fs.mac_rrc.cc_cfg_t supported_cc_list = 6;
  int supported_cc_list_size() const;
  private:
  int _internal_supported_cc_list_size() const;
  public:
  void clear_supported_cc_list();
  ::fs::mac_rrc::cc_cfg_t* mutable_supported_cc_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cc_cfg_t >*
      mutable_supported_cc_list();
  private:
  const ::fs::mac_rrc::cc_cfg_t& _internal_supported_cc_list(int index) const;
  ::fs::mac_rrc::cc_cfg_t* _internal_add_supported_cc_list();
  public:
  const ::fs::mac_rrc::cc_cfg_t& supported_cc_list(int index) const;
  ::fs::mac_rrc::cc_cfg_t* add_supported_cc_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cc_cfg_t >&
      supported_cc_list() const;

  // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 3;
  bool has_uci_offset() const;
  private:
  bool _internal_has_uci_offset() const;
  public:
  void clear_uci_offset();
  const ::fs::mac_rrc::srsran_uci_offset_cfg_t& uci_offset() const;
  ::fs::mac_rrc::srsran_uci_offset_cfg_t* release_uci_offset();
  ::fs::mac_rrc::srsran_uci_offset_cfg_t* mutable_uci_offset();
  void set_allocated_uci_offset(::fs::mac_rrc::srsran_uci_offset_cfg_t* uci_offset);
  private:
  const ::fs::mac_rrc::srsran_uci_offset_cfg_t& _internal_uci_offset() const;
  ::fs::mac_rrc::srsran_uci_offset_cfg_t* _internal_mutable_uci_offset();
  public:
  void unsafe_arena_set_allocated_uci_offset(
      ::fs::mac_rrc::srsran_uci_offset_cfg_t* uci_offset);
  ::fs::mac_rrc::srsran_uci_offset_cfg_t* unsafe_arena_release_uci_offset();

  // .fs.mac_rrc.srsran_pucch_cfg_t pucch_cfg = 4;
  bool has_pucch_cfg() const;
  private:
  bool _internal_has_pucch_cfg() const;
  public:
  void clear_pucch_cfg();
  const ::fs::mac_rrc::srsran_pucch_cfg_t& pucch_cfg() const;
  ::fs::mac_rrc::srsran_pucch_cfg_t* release_pucch_cfg();
  ::fs::mac_rrc::srsran_pucch_cfg_t* mutable_pucch_cfg();
  void set_allocated_pucch_cfg(::fs::mac_rrc::srsran_pucch_cfg_t* pucch_cfg);
  private:
  const ::fs::mac_rrc::srsran_pucch_cfg_t& _internal_pucch_cfg() const;
  ::fs::mac_rrc::srsran_pucch_cfg_t* _internal_mutable_pucch_cfg();
  public:
  void unsafe_arena_set_allocated_pucch_cfg(
      ::fs::mac_rrc::srsran_pucch_cfg_t* pucch_cfg);
  ::fs::mac_rrc::srsran_pucch_cfg_t* unsafe_arena_release_pucch_cfg();

  // .fs.mac_rrc.ant_info_ded_t dl_ant_info = 7;
  bool has_dl_ant_info() const;
  private:
  bool _internal_has_dl_ant_info() const;
  public:
  void clear_dl_ant_info();
  const ::fs::mac_rrc::ant_info_ded_t& dl_ant_info() const;
  ::fs::mac_rrc::ant_info_ded_t* release_dl_ant_info();
  ::fs::mac_rrc::ant_info_ded_t* mutable_dl_ant_info();
  void set_allocated_dl_ant_info(::fs::mac_rrc::ant_info_ded_t* dl_ant_info);
  private:
  const ::fs::mac_rrc::ant_info_ded_t& _internal_dl_ant_info() const;
  ::fs::mac_rrc::ant_info_ded_t* _internal_mutable_dl_ant_info();
  public:
  void unsafe_arena_set_allocated_dl_ant_info(
      ::fs::mac_rrc::ant_info_ded_t* dl_ant_info);
  ::fs::mac_rrc::ant_info_ded_t* unsafe_arena_release_dl_ant_info();

  // uint32 maxharq_tx = 1;
  void clear_maxharq_tx();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxharq_tx() const;
  void set_maxharq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxharq_tx() const;
  void _internal_set_maxharq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool continuous_pusch = 2;
  void clear_continuous_pusch();
  bool continuous_pusch() const;
  void set_continuous_pusch(bool value);
  private:
  bool _internal_continuous_pusch() const;
  void _internal_set_continuous_pusch(bool value);
  public:

  // bool use_tbs_index_alt = 8;
  void clear_use_tbs_index_alt();
  bool use_tbs_index_alt() const;
  void set_use_tbs_index_alt(bool value);
  private:
  bool _internal_use_tbs_index_alt() const;
  void _internal_set_use_tbs_index_alt(bool value);
  public:

  // uint32 measgap_period = 9;
  void clear_measgap_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 measgap_period() const;
  void set_measgap_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_measgap_period() const;
  void _internal_set_measgap_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 measgap_offset = 10;
  void clear_measgap_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 measgap_offset() const;
  void set_measgap_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_measgap_offset() const;
  void _internal_set_measgap_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fs.mac_rrc.UL64QAM_CAP support_ul64qam = 11;
  void clear_support_ul64qam();
  ::fs::mac_rrc::UL64QAM_CAP support_ul64qam() const;
  void set_support_ul64qam(::fs::mac_rrc::UL64QAM_CAP value);
  private:
  ::fs::mac_rrc::UL64QAM_CAP _internal_support_ul64qam() const;
  void _internal_set_support_ul64qam(::fs::mac_rrc::UL64QAM_CAP value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_rrc.ue_cfg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::ue_bearer_cfg_t > ue_bearers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cc_cfg_t > supported_cc_list_;
  ::fs::mac_rrc::srsran_uci_offset_cfg_t* uci_offset_;
  ::fs::mac_rrc::srsran_pucch_cfg_t* pucch_cfg_;
  ::fs::mac_rrc::ant_info_ded_t* dl_ant_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxharq_tx_;
  bool continuous_pusch_;
  bool use_tbs_index_alt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 measgap_period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 measgap_offset_;
  int support_ul64qam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ue_5fcfg_5ft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ant_info_ded_t

// .fs.mac_rrc.TX_MODE_T tx_mode = 1;
inline void ant_info_ded_t::clear_tx_mode() {
  tx_mode_ = 0;
}
inline ::fs::mac_rrc::TX_MODE_T ant_info_ded_t::_internal_tx_mode() const {
  return static_cast< ::fs::mac_rrc::TX_MODE_T >(tx_mode_);
}
inline ::fs::mac_rrc::TX_MODE_T ant_info_ded_t::tx_mode() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ant_info_ded_t.tx_mode)
  return _internal_tx_mode();
}
inline void ant_info_ded_t::_internal_set_tx_mode(::fs::mac_rrc::TX_MODE_T value) {
  
  tx_mode_ = value;
}
inline void ant_info_ded_t::set_tx_mode(::fs::mac_rrc::TX_MODE_T value) {
  _internal_set_tx_mode(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ant_info_ded_t.tx_mode)
}

// .fs.mac_rrc.CODEBOOK_T cookbook_subset_type = 2;
inline void ant_info_ded_t::clear_cookbook_subset_type() {
  cookbook_subset_type_ = 0;
}
inline ::fs::mac_rrc::CODEBOOK_T ant_info_ded_t::_internal_cookbook_subset_type() const {
  return static_cast< ::fs::mac_rrc::CODEBOOK_T >(cookbook_subset_type_);
}
inline ::fs::mac_rrc::CODEBOOK_T ant_info_ded_t::cookbook_subset_type() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ant_info_ded_t.cookbook_subset_type)
  return _internal_cookbook_subset_type();
}
inline void ant_info_ded_t::_internal_set_cookbook_subset_type(::fs::mac_rrc::CODEBOOK_T value) {
  
  cookbook_subset_type_ = value;
}
inline void ant_info_ded_t::set_cookbook_subset_type(::fs::mac_rrc::CODEBOOK_T value) {
  _internal_set_cookbook_subset_type(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ant_info_ded_t.cookbook_subset_type)
}

// uint64 codebook_subset_restrict = 3;
inline void ant_info_ded_t::clear_codebook_subset_restrict() {
  codebook_subset_restrict_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ant_info_ded_t::_internal_codebook_subset_restrict() const {
  return codebook_subset_restrict_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ant_info_ded_t::codebook_subset_restrict() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ant_info_ded_t.codebook_subset_restrict)
  return _internal_codebook_subset_restrict();
}
inline void ant_info_ded_t::_internal_set_codebook_subset_restrict(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  codebook_subset_restrict_ = value;
}
inline void ant_info_ded_t::set_codebook_subset_restrict(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_codebook_subset_restrict(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ant_info_ded_t.codebook_subset_restrict)
}

// .fs.mac_rrc.UE_TX_ANT_SEL_T ue_tx_ant_sel = 4;
inline void ant_info_ded_t::clear_ue_tx_ant_sel() {
  ue_tx_ant_sel_ = 0;
}
inline ::fs::mac_rrc::UE_TX_ANT_SEL_T ant_info_ded_t::_internal_ue_tx_ant_sel() const {
  return static_cast< ::fs::mac_rrc::UE_TX_ANT_SEL_T >(ue_tx_ant_sel_);
}
inline ::fs::mac_rrc::UE_TX_ANT_SEL_T ant_info_ded_t::ue_tx_ant_sel() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ant_info_ded_t.ue_tx_ant_sel)
  return _internal_ue_tx_ant_sel();
}
inline void ant_info_ded_t::_internal_set_ue_tx_ant_sel(::fs::mac_rrc::UE_TX_ANT_SEL_T value) {
  
  ue_tx_ant_sel_ = value;
}
inline void ant_info_ded_t::set_ue_tx_ant_sel(::fs::mac_rrc::UE_TX_ANT_SEL_T value) {
  _internal_set_ue_tx_ant_sel(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ant_info_ded_t.ue_tx_ant_sel)
}

// -------------------------------------------------------------------

// ue_bearer_cfg_t

// int32 priority = 1;
inline void ue_bearer_cfg_t::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ue_bearer_cfg_t::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ue_bearer_cfg_t::priority() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_bearer_cfg_t.priority)
  return _internal_priority();
}
inline void ue_bearer_cfg_t::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void ue_bearer_cfg_t::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_bearer_cfg_t.priority)
}

// uint32 bsd = 2;
inline void ue_bearer_cfg_t::clear_bsd() {
  bsd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_bearer_cfg_t::_internal_bsd() const {
  return bsd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_bearer_cfg_t::bsd() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_bearer_cfg_t.bsd)
  return _internal_bsd();
}
inline void ue_bearer_cfg_t::_internal_set_bsd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bsd_ = value;
}
inline void ue_bearer_cfg_t::set_bsd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bsd(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_bearer_cfg_t.bsd)
}

// uint32 pbr = 3;
inline void ue_bearer_cfg_t::clear_pbr() {
  pbr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_bearer_cfg_t::_internal_pbr() const {
  return pbr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_bearer_cfg_t::pbr() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_bearer_cfg_t.pbr)
  return _internal_pbr();
}
inline void ue_bearer_cfg_t::_internal_set_pbr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pbr_ = value;
}
inline void ue_bearer_cfg_t::set_pbr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pbr(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_bearer_cfg_t.pbr)
}

// int32 group = 4;
inline void ue_bearer_cfg_t::clear_group() {
  group_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ue_bearer_cfg_t::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ue_bearer_cfg_t::group() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_bearer_cfg_t.group)
  return _internal_group();
}
inline void ue_bearer_cfg_t::_internal_set_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_ = value;
}
inline void ue_bearer_cfg_t::set_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_bearer_cfg_t.group)
}

// .fs.mac_rrc.DIRECTION_T direction = 5;
inline void ue_bearer_cfg_t::clear_direction() {
  direction_ = 0;
}
inline ::fs::mac_rrc::DIRECTION_T ue_bearer_cfg_t::_internal_direction() const {
  return static_cast< ::fs::mac_rrc::DIRECTION_T >(direction_);
}
inline ::fs::mac_rrc::DIRECTION_T ue_bearer_cfg_t::direction() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_bearer_cfg_t.direction)
  return _internal_direction();
}
inline void ue_bearer_cfg_t::_internal_set_direction(::fs::mac_rrc::DIRECTION_T value) {
  
  direction_ = value;
}
inline void ue_bearer_cfg_t::set_direction(::fs::mac_rrc::DIRECTION_T value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_bearer_cfg_t.direction)
}

// -------------------------------------------------------------------

// srsran_cqi_cfg_t

// bool data_enable = 1;
inline void srsran_cqi_cfg_t::clear_data_enable() {
  data_enable_ = false;
}
inline bool srsran_cqi_cfg_t::_internal_data_enable() const {
  return data_enable_;
}
inline bool srsran_cqi_cfg_t::data_enable() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.data_enable)
  return _internal_data_enable();
}
inline void srsran_cqi_cfg_t::_internal_set_data_enable(bool value) {
  
  data_enable_ = value;
}
inline void srsran_cqi_cfg_t::set_data_enable(bool value) {
  _internal_set_data_enable(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.data_enable)
}

// bool pmi_present = 2;
inline void srsran_cqi_cfg_t::clear_pmi_present() {
  pmi_present_ = false;
}
inline bool srsran_cqi_cfg_t::_internal_pmi_present() const {
  return pmi_present_;
}
inline bool srsran_cqi_cfg_t::pmi_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.pmi_present)
  return _internal_pmi_present();
}
inline void srsran_cqi_cfg_t::_internal_set_pmi_present(bool value) {
  
  pmi_present_ = value;
}
inline void srsran_cqi_cfg_t::set_pmi_present(bool value) {
  _internal_set_pmi_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.pmi_present)
}

// bool four_antenna_ports = 3;
inline void srsran_cqi_cfg_t::clear_four_antenna_ports() {
  four_antenna_ports_ = false;
}
inline bool srsran_cqi_cfg_t::_internal_four_antenna_ports() const {
  return four_antenna_ports_;
}
inline bool srsran_cqi_cfg_t::four_antenna_ports() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.four_antenna_ports)
  return _internal_four_antenna_ports();
}
inline void srsran_cqi_cfg_t::_internal_set_four_antenna_ports(bool value) {
  
  four_antenna_ports_ = value;
}
inline void srsran_cqi_cfg_t::set_four_antenna_ports(bool value) {
  _internal_set_four_antenna_ports(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.four_antenna_ports)
}

// bool rank_is_not_one = 4;
inline void srsran_cqi_cfg_t::clear_rank_is_not_one() {
  rank_is_not_one_ = false;
}
inline bool srsran_cqi_cfg_t::_internal_rank_is_not_one() const {
  return rank_is_not_one_;
}
inline bool srsran_cqi_cfg_t::rank_is_not_one() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.rank_is_not_one)
  return _internal_rank_is_not_one();
}
inline void srsran_cqi_cfg_t::_internal_set_rank_is_not_one(bool value) {
  
  rank_is_not_one_ = value;
}
inline void srsran_cqi_cfg_t::set_rank_is_not_one(bool value) {
  _internal_set_rank_is_not_one(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.rank_is_not_one)
}

// bool subband_label_2_bits = 5;
inline void srsran_cqi_cfg_t::clear_subband_label_2_bits() {
  subband_label_2_bits_ = false;
}
inline bool srsran_cqi_cfg_t::_internal_subband_label_2_bits() const {
  return subband_label_2_bits_;
}
inline bool srsran_cqi_cfg_t::subband_label_2_bits() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.subband_label_2_bits)
  return _internal_subband_label_2_bits();
}
inline void srsran_cqi_cfg_t::_internal_set_subband_label_2_bits(bool value) {
  
  subband_label_2_bits_ = value;
}
inline void srsran_cqi_cfg_t::set_subband_label_2_bits(bool value) {
  _internal_set_subband_label_2_bits(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.subband_label_2_bits)
}

// uint32 scell_index = 6;
inline void srsran_cqi_cfg_t::clear_scell_index() {
  scell_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::_internal_scell_index() const {
  return scell_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::scell_index() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.scell_index)
  return _internal_scell_index();
}
inline void srsran_cqi_cfg_t::_internal_set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  scell_index_ = value;
}
inline void srsran_cqi_cfg_t::set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scell_index(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.scell_index)
}

// uint32 L = 7;
inline void srsran_cqi_cfg_t::clear_l() {
  l_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::_internal_l() const {
  return l_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::l() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.L)
  return _internal_l();
}
inline void srsran_cqi_cfg_t::_internal_set_l(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l_ = value;
}
inline void srsran_cqi_cfg_t::set_l(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.L)
}

// uint32 N = 8;
inline void srsran_cqi_cfg_t::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::n() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.N)
  return _internal_n();
}
inline void srsran_cqi_cfg_t::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void srsran_cqi_cfg_t::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.N)
}

// .fs.mac_rrc.srsran_cqi_type_t type = 9;
inline void srsran_cqi_cfg_t::clear_type() {
  type_ = 0;
}
inline ::fs::mac_rrc::srsran_cqi_type_t srsran_cqi_cfg_t::_internal_type() const {
  return static_cast< ::fs::mac_rrc::srsran_cqi_type_t >(type_);
}
inline ::fs::mac_rrc::srsran_cqi_type_t srsran_cqi_cfg_t::type() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.type)
  return _internal_type();
}
inline void srsran_cqi_cfg_t::_internal_set_type(::fs::mac_rrc::srsran_cqi_type_t value) {
  
  type_ = value;
}
inline void srsran_cqi_cfg_t::set_type(::fs::mac_rrc::srsran_cqi_type_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.type)
}

// uint32 ri_len = 10;
inline void srsran_cqi_cfg_t::clear_ri_len() {
  ri_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::_internal_ri_len() const {
  return ri_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_cfg_t::ri_len() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_cfg_t.ri_len)
  return _internal_ri_len();
}
inline void srsran_cqi_cfg_t::_internal_set_ri_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ri_len_ = value;
}
inline void srsran_cqi_cfg_t::set_ri_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ri_len(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_cfg_t.ri_len)
}

// -------------------------------------------------------------------

// srsran_uci_cfg_ack_t

// repeated bool pending_tb = 1;
inline int srsran_uci_cfg_ack_t::_internal_pending_tb_size() const {
  return pending_tb_.size();
}
inline int srsran_uci_cfg_ack_t::pending_tb_size() const {
  return _internal_pending_tb_size();
}
inline void srsran_uci_cfg_ack_t::clear_pending_tb() {
  pending_tb_.Clear();
}
inline bool srsran_uci_cfg_ack_t::_internal_pending_tb(int index) const {
  return pending_tb_.Get(index);
}
inline bool srsran_uci_cfg_ack_t::pending_tb(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.pending_tb)
  return _internal_pending_tb(index);
}
inline void srsran_uci_cfg_ack_t::set_pending_tb(int index, bool value) {
  pending_tb_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.pending_tb)
}
inline void srsran_uci_cfg_ack_t::_internal_add_pending_tb(bool value) {
  pending_tb_.Add(value);
}
inline void srsran_uci_cfg_ack_t::add_pending_tb(bool value) {
  _internal_add_pending_tb(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_uci_cfg_ack_t.pending_tb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_uci_cfg_ack_t::_internal_pending_tb() const {
  return pending_tb_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_uci_cfg_ack_t::pending_tb() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_uci_cfg_ack_t.pending_tb)
  return _internal_pending_tb();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_uci_cfg_ack_t::_internal_mutable_pending_tb() {
  return &pending_tb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_uci_cfg_ack_t::mutable_pending_tb() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_uci_cfg_ack_t.pending_tb)
  return _internal_mutable_pending_tb();
}

// uint32 nof_acks = 2;
inline void srsran_uci_cfg_ack_t::clear_nof_acks() {
  nof_acks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_nof_acks() const {
  return nof_acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::nof_acks() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.nof_acks)
  return _internal_nof_acks();
}
inline void srsran_uci_cfg_ack_t::_internal_set_nof_acks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_acks_ = value;
}
inline void srsran_uci_cfg_ack_t::set_nof_acks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_acks(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.nof_acks)
}

// repeated uint32 ncce = 3;
inline int srsran_uci_cfg_ack_t::_internal_ncce_size() const {
  return ncce_.size();
}
inline int srsran_uci_cfg_ack_t::ncce_size() const {
  return _internal_ncce_size();
}
inline void srsran_uci_cfg_ack_t::clear_ncce() {
  ncce_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_ncce(int index) const {
  return ncce_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::ncce(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.ncce)
  return _internal_ncce(index);
}
inline void srsran_uci_cfg_ack_t::set_ncce(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncce_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.ncce)
}
inline void srsran_uci_cfg_ack_t::_internal_add_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncce_.Add(value);
}
inline void srsran_uci_cfg_ack_t::add_ncce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ncce(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_uci_cfg_ack_t.ncce)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_uci_cfg_ack_t::_internal_ncce() const {
  return ncce_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_uci_cfg_ack_t::ncce() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_uci_cfg_ack_t.ncce)
  return _internal_ncce();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_uci_cfg_ack_t::_internal_mutable_ncce() {
  return &ncce_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_uci_cfg_ack_t::mutable_ncce() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_uci_cfg_ack_t.ncce)
  return _internal_mutable_ncce();
}

// uint32 N_bundle = 4;
inline void srsran_uci_cfg_ack_t::clear_n_bundle() {
  n_bundle_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_n_bundle() const {
  return n_bundle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::n_bundle() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.N_bundle)
  return _internal_n_bundle();
}
inline void srsran_uci_cfg_ack_t::_internal_set_n_bundle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_bundle_ = value;
}
inline void srsran_uci_cfg_ack_t::set_n_bundle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_bundle(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.N_bundle)
}

// uint32 tdd_ack = 5;
inline void srsran_uci_cfg_ack_t::clear_tdd_ack() {
  tdd_ack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_tdd_ack() const {
  return tdd_ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::tdd_ack() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.tdd_ack)
  return _internal_tdd_ack();
}
inline void srsran_uci_cfg_ack_t::_internal_set_tdd_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tdd_ack_ = value;
}
inline void srsran_uci_cfg_ack_t::set_tdd_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tdd_ack(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.tdd_ack)
}

// uint32 tdd_ack_m = 6;
inline void srsran_uci_cfg_ack_t::clear_tdd_ack_m() {
  tdd_ack_m_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_tdd_ack_m() const {
  return tdd_ack_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::tdd_ack_m() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.tdd_ack_m)
  return _internal_tdd_ack_m();
}
inline void srsran_uci_cfg_ack_t::_internal_set_tdd_ack_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tdd_ack_m_ = value;
}
inline void srsran_uci_cfg_ack_t::set_tdd_ack_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tdd_ack_m(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.tdd_ack_m)
}

// bool tdd_is_multiplex = 7;
inline void srsran_uci_cfg_ack_t::clear_tdd_is_multiplex() {
  tdd_is_multiplex_ = false;
}
inline bool srsran_uci_cfg_ack_t::_internal_tdd_is_multiplex() const {
  return tdd_is_multiplex_;
}
inline bool srsran_uci_cfg_ack_t::tdd_is_multiplex() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.tdd_is_multiplex)
  return _internal_tdd_is_multiplex();
}
inline void srsran_uci_cfg_ack_t::_internal_set_tdd_is_multiplex(bool value) {
  
  tdd_is_multiplex_ = value;
}
inline void srsran_uci_cfg_ack_t::set_tdd_is_multiplex(bool value) {
  _internal_set_tdd_is_multiplex(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.tdd_is_multiplex)
}

// uint32 tpc_for_pucch = 8;
inline void srsran_uci_cfg_ack_t::clear_tpc_for_pucch() {
  tpc_for_pucch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_tpc_for_pucch() const {
  return tpc_for_pucch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::tpc_for_pucch() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.tpc_for_pucch)
  return _internal_tpc_for_pucch();
}
inline void srsran_uci_cfg_ack_t::_internal_set_tpc_for_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tpc_for_pucch_ = value;
}
inline void srsran_uci_cfg_ack_t::set_tpc_for_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tpc_for_pucch(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.tpc_for_pucch)
}

// uint32 grant_cc_idx = 9;
inline void srsran_uci_cfg_ack_t::clear_grant_cc_idx() {
  grant_cc_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::_internal_grant_cc_idx() const {
  return grant_cc_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_cfg_ack_t::grant_cc_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_ack_t.grant_cc_idx)
  return _internal_grant_cc_idx();
}
inline void srsran_uci_cfg_ack_t::_internal_set_grant_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grant_cc_idx_ = value;
}
inline void srsran_uci_cfg_ack_t::set_grant_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grant_cc_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_ack_t.grant_cc_idx)
}

// -------------------------------------------------------------------

// srsran_uci_cfg_t

// repeated .fs.mac_rrc.srsran_uci_cfg_ack_t ack = 1;
inline int srsran_uci_cfg_t::_internal_ack_size() const {
  return ack_.size();
}
inline int srsran_uci_cfg_t::ack_size() const {
  return _internal_ack_size();
}
inline void srsran_uci_cfg_t::clear_ack() {
  ack_.Clear();
}
inline ::fs::mac_rrc::srsran_uci_cfg_ack_t* srsran_uci_cfg_t::mutable_ack(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_uci_cfg_t.ack)
  return ack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_uci_cfg_ack_t >*
srsran_uci_cfg_t::mutable_ack() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_uci_cfg_t.ack)
  return &ack_;
}
inline const ::fs::mac_rrc::srsran_uci_cfg_ack_t& srsran_uci_cfg_t::_internal_ack(int index) const {
  return ack_.Get(index);
}
inline const ::fs::mac_rrc::srsran_uci_cfg_ack_t& srsran_uci_cfg_t::ack(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_t.ack)
  return _internal_ack(index);
}
inline ::fs::mac_rrc::srsran_uci_cfg_ack_t* srsran_uci_cfg_t::_internal_add_ack() {
  return ack_.Add();
}
inline ::fs::mac_rrc::srsran_uci_cfg_ack_t* srsran_uci_cfg_t::add_ack() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_uci_cfg_t.ack)
  return _internal_add_ack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_uci_cfg_ack_t >&
srsran_uci_cfg_t::ack() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_uci_cfg_t.ack)
  return ack_;
}

// .fs.mac_rrc.srsran_cqi_cfg_t cqi = 2;
inline bool srsran_uci_cfg_t::_internal_has_cqi() const {
  return this != internal_default_instance() && cqi_ != nullptr;
}
inline bool srsran_uci_cfg_t::has_cqi() const {
  return _internal_has_cqi();
}
inline void srsran_uci_cfg_t::clear_cqi() {
  if (GetArena() == nullptr && cqi_ != nullptr) {
    delete cqi_;
  }
  cqi_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_cqi_cfg_t& srsran_uci_cfg_t::_internal_cqi() const {
  const ::fs::mac_rrc::srsran_cqi_cfg_t* p = cqi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_cqi_cfg_t*>(
      &::fs::mac_rrc::_srsran_cqi_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_cqi_cfg_t& srsran_uci_cfg_t::cqi() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_t.cqi)
  return _internal_cqi();
}
inline void srsran_uci_cfg_t::unsafe_arena_set_allocated_cqi(
    ::fs::mac_rrc::srsran_cqi_cfg_t* cqi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cqi_);
  }
  cqi_ = cqi;
  if (cqi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.srsran_uci_cfg_t.cqi)
}
inline ::fs::mac_rrc::srsran_cqi_cfg_t* srsran_uci_cfg_t::release_cqi() {
  auto temp = unsafe_arena_release_cqi();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_cqi_cfg_t* srsran_uci_cfg_t::unsafe_arena_release_cqi() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.srsran_uci_cfg_t.cqi)
  
  ::fs::mac_rrc::srsran_cqi_cfg_t* temp = cqi_;
  cqi_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_cqi_cfg_t* srsran_uci_cfg_t::_internal_mutable_cqi() {
  
  if (cqi_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_cqi_cfg_t>(GetArena());
    cqi_ = p;
  }
  return cqi_;
}
inline ::fs::mac_rrc::srsran_cqi_cfg_t* srsran_uci_cfg_t::mutable_cqi() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_uci_cfg_t.cqi)
  return _internal_mutable_cqi();
}
inline void srsran_uci_cfg_t::set_allocated_cqi(::fs::mac_rrc::srsran_cqi_cfg_t* cqi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cqi_;
  }
  if (cqi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cqi);
    if (message_arena != submessage_arena) {
      cqi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cqi, submessage_arena);
    }
    
  } else {
    
  }
  cqi_ = cqi;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.srsran_uci_cfg_t.cqi)
}

// bool is_scheduling_request_tti = 3;
inline void srsran_uci_cfg_t::clear_is_scheduling_request_tti() {
  is_scheduling_request_tti_ = false;
}
inline bool srsran_uci_cfg_t::_internal_is_scheduling_request_tti() const {
  return is_scheduling_request_tti_;
}
inline bool srsran_uci_cfg_t::is_scheduling_request_tti() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_cfg_t.is_scheduling_request_tti)
  return _internal_is_scheduling_request_tti();
}
inline void srsran_uci_cfg_t::_internal_set_is_scheduling_request_tti(bool value) {
  
  is_scheduling_request_tti_ = value;
}
inline void srsran_uci_cfg_t::set_is_scheduling_request_tti(bool value) {
  _internal_set_is_scheduling_request_tti(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_cfg_t.is_scheduling_request_tti)
}

// -------------------------------------------------------------------

// srsran_pucch_cfg_t

// uint32 rnti = 1;
inline void srsran_pucch_cfg_t::clear_rnti() {
  rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::rnti() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.rnti)
  return _internal_rnti();
}
inline void srsran_pucch_cfg_t::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rnti_ = value;
}
inline void srsran_pucch_cfg_t::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.rnti)
}

// .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 2;
inline bool srsran_pucch_cfg_t::_internal_has_uci_cfg() const {
  return this != internal_default_instance() && uci_cfg_ != nullptr;
}
inline bool srsran_pucch_cfg_t::has_uci_cfg() const {
  return _internal_has_uci_cfg();
}
inline void srsran_pucch_cfg_t::clear_uci_cfg() {
  if (GetArena() == nullptr && uci_cfg_ != nullptr) {
    delete uci_cfg_;
  }
  uci_cfg_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_uci_cfg_t& srsran_pucch_cfg_t::_internal_uci_cfg() const {
  const ::fs::mac_rrc::srsran_uci_cfg_t* p = uci_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_uci_cfg_t*>(
      &::fs::mac_rrc::_srsran_uci_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_uci_cfg_t& srsran_pucch_cfg_t::uci_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.uci_cfg)
  return _internal_uci_cfg();
}
inline void srsran_pucch_cfg_t::unsafe_arena_set_allocated_uci_cfg(
    ::fs::mac_rrc::srsran_uci_cfg_t* uci_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uci_cfg_);
  }
  uci_cfg_ = uci_cfg;
  if (uci_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.srsran_pucch_cfg_t.uci_cfg)
}
inline ::fs::mac_rrc::srsran_uci_cfg_t* srsran_pucch_cfg_t::release_uci_cfg() {
  auto temp = unsafe_arena_release_uci_cfg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_uci_cfg_t* srsran_pucch_cfg_t::unsafe_arena_release_uci_cfg() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.srsran_pucch_cfg_t.uci_cfg)
  
  ::fs::mac_rrc::srsran_uci_cfg_t* temp = uci_cfg_;
  uci_cfg_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_uci_cfg_t* srsran_pucch_cfg_t::_internal_mutable_uci_cfg() {
  
  if (uci_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_uci_cfg_t>(GetArena());
    uci_cfg_ = p;
  }
  return uci_cfg_;
}
inline ::fs::mac_rrc::srsran_uci_cfg_t* srsran_pucch_cfg_t::mutable_uci_cfg() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_pucch_cfg_t.uci_cfg)
  return _internal_mutable_uci_cfg();
}
inline void srsran_pucch_cfg_t::set_allocated_uci_cfg(::fs::mac_rrc::srsran_uci_cfg_t* uci_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uci_cfg_;
  }
  if (uci_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uci_cfg);
    if (message_arena != submessage_arena) {
      uci_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uci_cfg, submessage_arena);
    }
    
  } else {
    
  }
  uci_cfg_ = uci_cfg;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.srsran_pucch_cfg_t.uci_cfg)
}

// uint32 delta_pucch_shift = 3;
inline void srsran_pucch_cfg_t::clear_delta_pucch_shift() {
  delta_pucch_shift_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_delta_pucch_shift() const {
  return delta_pucch_shift_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::delta_pucch_shift() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.delta_pucch_shift)
  return _internal_delta_pucch_shift();
}
inline void srsran_pucch_cfg_t::_internal_set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  delta_pucch_shift_ = value;
}
inline void srsran_pucch_cfg_t::set_delta_pucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delta_pucch_shift(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.delta_pucch_shift)
}

// uint32 n_rb_2 = 4;
inline void srsran_pucch_cfg_t::clear_n_rb_2() {
  n_rb_2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_rb_2() const {
  return n_rb_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_rb_2() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n_rb_2)
  return _internal_n_rb_2();
}
inline void srsran_pucch_cfg_t::_internal_set_n_rb_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_rb_2_ = value;
}
inline void srsran_pucch_cfg_t::set_n_rb_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_rb_2(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n_rb_2)
}

// uint32 N_cs = 5;
inline void srsran_pucch_cfg_t::clear_n_cs() {
  n_cs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_cs() const {
  return n_cs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_cs() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.N_cs)
  return _internal_n_cs();
}
inline void srsran_pucch_cfg_t::_internal_set_n_cs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_cs_ = value;
}
inline void srsran_pucch_cfg_t::set_n_cs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_cs(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.N_cs)
}

// uint32 N_pucch_v = 6;
inline void srsran_pucch_cfg_t::clear_n_pucch_v() {
  n_pucch_v_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_pucch_v() const {
  return n_pucch_v_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_pucch_v() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.N_pucch_v)
  return _internal_n_pucch_v();
}
inline void srsran_pucch_cfg_t::_internal_set_n_pucch_v(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_pucch_v_ = value;
}
inline void srsran_pucch_cfg_t::set_n_pucch_v(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_pucch_v(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.N_pucch_v)
}

// bool group_hopping_en = 7;
inline void srsran_pucch_cfg_t::clear_group_hopping_en() {
  group_hopping_en_ = false;
}
inline bool srsran_pucch_cfg_t::_internal_group_hopping_en() const {
  return group_hopping_en_;
}
inline bool srsran_pucch_cfg_t::group_hopping_en() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.group_hopping_en)
  return _internal_group_hopping_en();
}
inline void srsran_pucch_cfg_t::_internal_set_group_hopping_en(bool value) {
  
  group_hopping_en_ = value;
}
inline void srsran_pucch_cfg_t::set_group_hopping_en(bool value) {
  _internal_set_group_hopping_en(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.group_hopping_en)
}

// uint32 I_sr = 8;
inline void srsran_pucch_cfg_t::clear_i_sr() {
  i_sr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_i_sr() const {
  return i_sr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::i_sr() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.I_sr)
  return _internal_i_sr();
}
inline void srsran_pucch_cfg_t::_internal_set_i_sr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  i_sr_ = value;
}
inline void srsran_pucch_cfg_t::set_i_sr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_i_sr(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.I_sr)
}

// bool sr_configured = 9;
inline void srsran_pucch_cfg_t::clear_sr_configured() {
  sr_configured_ = false;
}
inline bool srsran_pucch_cfg_t::_internal_sr_configured() const {
  return sr_configured_;
}
inline bool srsran_pucch_cfg_t::sr_configured() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.sr_configured)
  return _internal_sr_configured();
}
inline void srsran_pucch_cfg_t::_internal_set_sr_configured(bool value) {
  
  sr_configured_ = value;
}
inline void srsran_pucch_cfg_t::set_sr_configured(bool value) {
  _internal_set_sr_configured(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.sr_configured)
}

// repeated uint32 n_pucch_1 = 10;
inline int srsran_pucch_cfg_t::_internal_n_pucch_1_size() const {
  return n_pucch_1_.size();
}
inline int srsran_pucch_cfg_t::n_pucch_1_size() const {
  return _internal_n_pucch_1_size();
}
inline void srsran_pucch_cfg_t::clear_n_pucch_1() {
  n_pucch_1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_pucch_1(int index) const {
  return n_pucch_1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_pucch_1(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_1)
  return _internal_n_pucch_1(index);
}
inline void srsran_pucch_cfg_t::set_n_pucch_1(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n_pucch_1_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_1)
}
inline void srsran_pucch_cfg_t::_internal_add_n_pucch_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n_pucch_1_.Add(value);
}
inline void srsran_pucch_cfg_t::add_n_pucch_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_n_pucch_1(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::_internal_n_pucch_1() const {
  return n_pucch_1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::n_pucch_1() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_1)
  return _internal_n_pucch_1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::_internal_mutable_n_pucch_1() {
  return &n_pucch_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::mutable_n_pucch_1() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_1)
  return _internal_mutable_n_pucch_1();
}

// uint32 n_pucch_2 = 11;
inline void srsran_pucch_cfg_t::clear_n_pucch_2() {
  n_pucch_2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_pucch_2() const {
  return n_pucch_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_pucch_2() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_2)
  return _internal_n_pucch_2();
}
inline void srsran_pucch_cfg_t::_internal_set_n_pucch_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_pucch_2_ = value;
}
inline void srsran_pucch_cfg_t::set_n_pucch_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_pucch_2(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_2)
}

// uint32 n_pucch_sr = 12;
inline void srsran_pucch_cfg_t::clear_n_pucch_sr() {
  n_pucch_sr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_pucch_sr() const {
  return n_pucch_sr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_pucch_sr() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_sr)
  return _internal_n_pucch_sr();
}
inline void srsran_pucch_cfg_t::_internal_set_n_pucch_sr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_pucch_sr_ = value;
}
inline void srsran_pucch_cfg_t::set_n_pucch_sr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_pucch_sr(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch_sr)
}

// bool simul_cqi_ack = 13;
inline void srsran_pucch_cfg_t::clear_simul_cqi_ack() {
  simul_cqi_ack_ = false;
}
inline bool srsran_pucch_cfg_t::_internal_simul_cqi_ack() const {
  return simul_cqi_ack_;
}
inline bool srsran_pucch_cfg_t::simul_cqi_ack() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.simul_cqi_ack)
  return _internal_simul_cqi_ack();
}
inline void srsran_pucch_cfg_t::_internal_set_simul_cqi_ack(bool value) {
  
  simul_cqi_ack_ = value;
}
inline void srsran_pucch_cfg_t::set_simul_cqi_ack(bool value) {
  _internal_set_simul_cqi_ack(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.simul_cqi_ack)
}

// bool tdd_ack_multiplex = 14;
inline void srsran_pucch_cfg_t::clear_tdd_ack_multiplex() {
  tdd_ack_multiplex_ = false;
}
inline bool srsran_pucch_cfg_t::_internal_tdd_ack_multiplex() const {
  return tdd_ack_multiplex_;
}
inline bool srsran_pucch_cfg_t::tdd_ack_multiplex() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.tdd_ack_multiplex)
  return _internal_tdd_ack_multiplex();
}
inline void srsran_pucch_cfg_t::_internal_set_tdd_ack_multiplex(bool value) {
  
  tdd_ack_multiplex_ = value;
}
inline void srsran_pucch_cfg_t::set_tdd_ack_multiplex(bool value) {
  _internal_set_tdd_ack_multiplex(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.tdd_ack_multiplex)
}

// bool sps_enabled = 15;
inline void srsran_pucch_cfg_t::clear_sps_enabled() {
  sps_enabled_ = false;
}
inline bool srsran_pucch_cfg_t::_internal_sps_enabled() const {
  return sps_enabled_;
}
inline bool srsran_pucch_cfg_t::sps_enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.sps_enabled)
  return _internal_sps_enabled();
}
inline void srsran_pucch_cfg_t::_internal_set_sps_enabled(bool value) {
  
  sps_enabled_ = value;
}
inline void srsran_pucch_cfg_t::set_sps_enabled(bool value) {
  _internal_set_sps_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.sps_enabled)
}

// .fs.mac_rrc.srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode = 16;
inline void srsran_pucch_cfg_t::clear_ack_nack_feedback_mode() {
  ack_nack_feedback_mode_ = 0;
}
inline ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t srsran_pucch_cfg_t::_internal_ack_nack_feedback_mode() const {
  return static_cast< ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t >(ack_nack_feedback_mode_);
}
inline ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t srsran_pucch_cfg_t::ack_nack_feedback_mode() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.ack_nack_feedback_mode)
  return _internal_ack_nack_feedback_mode();
}
inline void srsran_pucch_cfg_t::_internal_set_ack_nack_feedback_mode(::fs::mac_rrc::srsran_ack_nack_feedback_mode_t value) {
  
  ack_nack_feedback_mode_ = value;
}
inline void srsran_pucch_cfg_t::set_ack_nack_feedback_mode(::fs::mac_rrc::srsran_ack_nack_feedback_mode_t value) {
  _internal_set_ack_nack_feedback_mode(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.ack_nack_feedback_mode)
}

// repeated uint32 n1_pucch_an_cs = 17;
inline int srsran_pucch_cfg_t::_internal_n1_pucch_an_cs_size() const {
  return n1_pucch_an_cs_.size();
}
inline int srsran_pucch_cfg_t::n1_pucch_an_cs_size() const {
  return _internal_n1_pucch_an_cs_size();
}
inline void srsran_pucch_cfg_t::clear_n1_pucch_an_cs() {
  n1_pucch_an_cs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n1_pucch_an_cs(int index) const {
  return n1_pucch_an_cs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n1_pucch_an_cs(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n1_pucch_an_cs)
  return _internal_n1_pucch_an_cs(index);
}
inline void srsran_pucch_cfg_t::set_n1_pucch_an_cs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n1_pucch_an_cs_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n1_pucch_an_cs)
}
inline void srsran_pucch_cfg_t::_internal_add_n1_pucch_an_cs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n1_pucch_an_cs_.Add(value);
}
inline void srsran_pucch_cfg_t::add_n1_pucch_an_cs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_n1_pucch_an_cs(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pucch_cfg_t.n1_pucch_an_cs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::_internal_n1_pucch_an_cs() const {
  return n1_pucch_an_cs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::n1_pucch_an_cs() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pucch_cfg_t.n1_pucch_an_cs)
  return _internal_n1_pucch_an_cs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::_internal_mutable_n1_pucch_an_cs() {
  return &n1_pucch_an_cs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::mutable_n1_pucch_an_cs() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pucch_cfg_t.n1_pucch_an_cs)
  return _internal_mutable_n1_pucch_an_cs();
}

// repeated uint32 n3_pucch_an_list = 18;
inline int srsran_pucch_cfg_t::_internal_n3_pucch_an_list_size() const {
  return n3_pucch_an_list_.size();
}
inline int srsran_pucch_cfg_t::n3_pucch_an_list_size() const {
  return _internal_n3_pucch_an_list_size();
}
inline void srsran_pucch_cfg_t::clear_n3_pucch_an_list() {
  n3_pucch_an_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n3_pucch_an_list(int index) const {
  return n3_pucch_an_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n3_pucch_an_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n3_pucch_an_list)
  return _internal_n3_pucch_an_list(index);
}
inline void srsran_pucch_cfg_t::set_n3_pucch_an_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n3_pucch_an_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n3_pucch_an_list)
}
inline void srsran_pucch_cfg_t::_internal_add_n3_pucch_an_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n3_pucch_an_list_.Add(value);
}
inline void srsran_pucch_cfg_t::add_n3_pucch_an_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_n3_pucch_an_list(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pucch_cfg_t.n3_pucch_an_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::_internal_n3_pucch_an_list() const {
  return n3_pucch_an_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::n3_pucch_an_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pucch_cfg_t.n3_pucch_an_list)
  return _internal_n3_pucch_an_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::_internal_mutable_n3_pucch_an_list() {
  return &n3_pucch_an_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::mutable_n3_pucch_an_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pucch_cfg_t.n3_pucch_an_list)
  return _internal_mutable_n3_pucch_an_list();
}

// float threshold_format1 = 19;
inline void srsran_pucch_cfg_t::clear_threshold_format1() {
  threshold_format1_ = 0;
}
inline float srsran_pucch_cfg_t::_internal_threshold_format1() const {
  return threshold_format1_;
}
inline float srsran_pucch_cfg_t::threshold_format1() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.threshold_format1)
  return _internal_threshold_format1();
}
inline void srsran_pucch_cfg_t::_internal_set_threshold_format1(float value) {
  
  threshold_format1_ = value;
}
inline void srsran_pucch_cfg_t::set_threshold_format1(float value) {
  _internal_set_threshold_format1(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.threshold_format1)
}

// float threshold_data_valid_format1a = 20;
inline void srsran_pucch_cfg_t::clear_threshold_data_valid_format1a() {
  threshold_data_valid_format1a_ = 0;
}
inline float srsran_pucch_cfg_t::_internal_threshold_data_valid_format1a() const {
  return threshold_data_valid_format1a_;
}
inline float srsran_pucch_cfg_t::threshold_data_valid_format1a() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.threshold_data_valid_format1a)
  return _internal_threshold_data_valid_format1a();
}
inline void srsran_pucch_cfg_t::_internal_set_threshold_data_valid_format1a(float value) {
  
  threshold_data_valid_format1a_ = value;
}
inline void srsran_pucch_cfg_t::set_threshold_data_valid_format1a(float value) {
  _internal_set_threshold_data_valid_format1a(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.threshold_data_valid_format1a)
}

// float threshold_data_valid_format2 = 21;
inline void srsran_pucch_cfg_t::clear_threshold_data_valid_format2() {
  threshold_data_valid_format2_ = 0;
}
inline float srsran_pucch_cfg_t::_internal_threshold_data_valid_format2() const {
  return threshold_data_valid_format2_;
}
inline float srsran_pucch_cfg_t::threshold_data_valid_format2() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.threshold_data_valid_format2)
  return _internal_threshold_data_valid_format2();
}
inline void srsran_pucch_cfg_t::_internal_set_threshold_data_valid_format2(float value) {
  
  threshold_data_valid_format2_ = value;
}
inline void srsran_pucch_cfg_t::set_threshold_data_valid_format2(float value) {
  _internal_set_threshold_data_valid_format2(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.threshold_data_valid_format2)
}

// float threshold_data_valid_format3 = 22;
inline void srsran_pucch_cfg_t::clear_threshold_data_valid_format3() {
  threshold_data_valid_format3_ = 0;
}
inline float srsran_pucch_cfg_t::_internal_threshold_data_valid_format3() const {
  return threshold_data_valid_format3_;
}
inline float srsran_pucch_cfg_t::threshold_data_valid_format3() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.threshold_data_valid_format3)
  return _internal_threshold_data_valid_format3();
}
inline void srsran_pucch_cfg_t::_internal_set_threshold_data_valid_format3(float value) {
  
  threshold_data_valid_format3_ = value;
}
inline void srsran_pucch_cfg_t::set_threshold_data_valid_format3(float value) {
  _internal_set_threshold_data_valid_format3(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.threshold_data_valid_format3)
}

// float threshold_dmrs_detection = 23;
inline void srsran_pucch_cfg_t::clear_threshold_dmrs_detection() {
  threshold_dmrs_detection_ = 0;
}
inline float srsran_pucch_cfg_t::_internal_threshold_dmrs_detection() const {
  return threshold_dmrs_detection_;
}
inline float srsran_pucch_cfg_t::threshold_dmrs_detection() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.threshold_dmrs_detection)
  return _internal_threshold_dmrs_detection();
}
inline void srsran_pucch_cfg_t::_internal_set_threshold_dmrs_detection(float value) {
  
  threshold_dmrs_detection_ = value;
}
inline void srsran_pucch_cfg_t::set_threshold_dmrs_detection(float value) {
  _internal_set_threshold_dmrs_detection(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.threshold_dmrs_detection)
}

// bool meas_ta_en = 24;
inline void srsran_pucch_cfg_t::clear_meas_ta_en() {
  meas_ta_en_ = false;
}
inline bool srsran_pucch_cfg_t::_internal_meas_ta_en() const {
  return meas_ta_en_;
}
inline bool srsran_pucch_cfg_t::meas_ta_en() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.meas_ta_en)
  return _internal_meas_ta_en();
}
inline void srsran_pucch_cfg_t::_internal_set_meas_ta_en(bool value) {
  
  meas_ta_en_ = value;
}
inline void srsran_pucch_cfg_t::set_meas_ta_en(bool value) {
  _internal_set_meas_ta_en(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.meas_ta_en)
}

// .fs.mac_rrc.srsran_pucch_format_t format = 25;
inline void srsran_pucch_cfg_t::clear_format() {
  format_ = 0;
}
inline ::fs::mac_rrc::srsran_pucch_format_t srsran_pucch_cfg_t::_internal_format() const {
  return static_cast< ::fs::mac_rrc::srsran_pucch_format_t >(format_);
}
inline ::fs::mac_rrc::srsran_pucch_format_t srsran_pucch_cfg_t::format() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.format)
  return _internal_format();
}
inline void srsran_pucch_cfg_t::_internal_set_format(::fs::mac_rrc::srsran_pucch_format_t value) {
  
  format_ = value;
}
inline void srsran_pucch_cfg_t::set_format(::fs::mac_rrc::srsran_pucch_format_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.format)
}

// uint32 n_pucch = 26;
inline void srsran_pucch_cfg_t::clear_n_pucch() {
  n_pucch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_n_pucch() const {
  return n_pucch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::n_pucch() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch)
  return _internal_n_pucch();
}
inline void srsran_pucch_cfg_t::_internal_set_n_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_pucch_ = value;
}
inline void srsran_pucch_cfg_t::set_n_pucch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_pucch(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.n_pucch)
}

// repeated uint32 pucch2_drs_bits = 27;
inline int srsran_pucch_cfg_t::_internal_pucch2_drs_bits_size() const {
  return pucch2_drs_bits_.size();
}
inline int srsran_pucch_cfg_t::pucch2_drs_bits_size() const {
  return _internal_pucch2_drs_bits_size();
}
inline void srsran_pucch_cfg_t::clear_pucch2_drs_bits() {
  pucch2_drs_bits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::_internal_pucch2_drs_bits(int index) const {
  return pucch2_drs_bits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pucch_cfg_t::pucch2_drs_bits(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pucch_cfg_t.pucch2_drs_bits)
  return _internal_pucch2_drs_bits(index);
}
inline void srsran_pucch_cfg_t::set_pucch2_drs_bits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pucch2_drs_bits_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pucch_cfg_t.pucch2_drs_bits)
}
inline void srsran_pucch_cfg_t::_internal_add_pucch2_drs_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pucch2_drs_bits_.Add(value);
}
inline void srsran_pucch_cfg_t::add_pucch2_drs_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_pucch2_drs_bits(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pucch_cfg_t.pucch2_drs_bits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::_internal_pucch2_drs_bits() const {
  return pucch2_drs_bits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pucch_cfg_t::pucch2_drs_bits() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pucch_cfg_t.pucch2_drs_bits)
  return _internal_pucch2_drs_bits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::_internal_mutable_pucch2_drs_bits() {
  return &pucch2_drs_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pucch_cfg_t::mutable_pucch2_drs_bits() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pucch_cfg_t.pucch2_drs_bits)
  return _internal_mutable_pucch2_drs_bits();
}

// -------------------------------------------------------------------

// srsran_uci_offset_cfg_t

// uint32 I_offset_cqi = 1;
inline void srsran_uci_offset_cfg_t::clear_i_offset_cqi() {
  i_offset_cqi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_offset_cfg_t::_internal_i_offset_cqi() const {
  return i_offset_cqi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_offset_cfg_t::i_offset_cqi() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_offset_cfg_t.I_offset_cqi)
  return _internal_i_offset_cqi();
}
inline void srsran_uci_offset_cfg_t::_internal_set_i_offset_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  i_offset_cqi_ = value;
}
inline void srsran_uci_offset_cfg_t::set_i_offset_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_i_offset_cqi(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_offset_cfg_t.I_offset_cqi)
}

// uint32 I_offset_ri = 2;
inline void srsran_uci_offset_cfg_t::clear_i_offset_ri() {
  i_offset_ri_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_offset_cfg_t::_internal_i_offset_ri() const {
  return i_offset_ri_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_offset_cfg_t::i_offset_ri() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_offset_cfg_t.I_offset_ri)
  return _internal_i_offset_ri();
}
inline void srsran_uci_offset_cfg_t::_internal_set_i_offset_ri(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  i_offset_ri_ = value;
}
inline void srsran_uci_offset_cfg_t::set_i_offset_ri(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_i_offset_ri(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_offset_cfg_t.I_offset_ri)
}

// uint32 I_offset_ack = 3;
inline void srsran_uci_offset_cfg_t::clear_i_offset_ack() {
  i_offset_ack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_offset_cfg_t::_internal_i_offset_ack() const {
  return i_offset_ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_uci_offset_cfg_t::i_offset_ack() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_uci_offset_cfg_t.I_offset_ack)
  return _internal_i_offset_ack();
}
inline void srsran_uci_offset_cfg_t::_internal_set_i_offset_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  i_offset_ack_ = value;
}
inline void srsran_uci_offset_cfg_t::set_i_offset_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_i_offset_ack(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_uci_offset_cfg_t.I_offset_ack)
}

// -------------------------------------------------------------------

// srsran_dci_cfg_t

// bool multiple_csi_request_enabled = 1;
inline void srsran_dci_cfg_t::clear_multiple_csi_request_enabled() {
  multiple_csi_request_enabled_ = false;
}
inline bool srsran_dci_cfg_t::_internal_multiple_csi_request_enabled() const {
  return multiple_csi_request_enabled_;
}
inline bool srsran_dci_cfg_t::multiple_csi_request_enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dci_cfg_t.multiple_csi_request_enabled)
  return _internal_multiple_csi_request_enabled();
}
inline void srsran_dci_cfg_t::_internal_set_multiple_csi_request_enabled(bool value) {
  
  multiple_csi_request_enabled_ = value;
}
inline void srsran_dci_cfg_t::set_multiple_csi_request_enabled(bool value) {
  _internal_set_multiple_csi_request_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dci_cfg_t.multiple_csi_request_enabled)
}

// bool cif_enabled = 2;
inline void srsran_dci_cfg_t::clear_cif_enabled() {
  cif_enabled_ = false;
}
inline bool srsran_dci_cfg_t::_internal_cif_enabled() const {
  return cif_enabled_;
}
inline bool srsran_dci_cfg_t::cif_enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dci_cfg_t.cif_enabled)
  return _internal_cif_enabled();
}
inline void srsran_dci_cfg_t::_internal_set_cif_enabled(bool value) {
  
  cif_enabled_ = value;
}
inline void srsran_dci_cfg_t::set_cif_enabled(bool value) {
  _internal_set_cif_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dci_cfg_t.cif_enabled)
}

// bool cif_present = 3;
inline void srsran_dci_cfg_t::clear_cif_present() {
  cif_present_ = false;
}
inline bool srsran_dci_cfg_t::_internal_cif_present() const {
  return cif_present_;
}
inline bool srsran_dci_cfg_t::cif_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dci_cfg_t.cif_present)
  return _internal_cif_present();
}
inline void srsran_dci_cfg_t::_internal_set_cif_present(bool value) {
  
  cif_present_ = value;
}
inline void srsran_dci_cfg_t::set_cif_present(bool value) {
  _internal_set_cif_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dci_cfg_t.cif_present)
}

// bool srs_request_enabled = 4;
inline void srsran_dci_cfg_t::clear_srs_request_enabled() {
  srs_request_enabled_ = false;
}
inline bool srsran_dci_cfg_t::_internal_srs_request_enabled() const {
  return srs_request_enabled_;
}
inline bool srsran_dci_cfg_t::srs_request_enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dci_cfg_t.srs_request_enabled)
  return _internal_srs_request_enabled();
}
inline void srsran_dci_cfg_t::_internal_set_srs_request_enabled(bool value) {
  
  srs_request_enabled_ = value;
}
inline void srsran_dci_cfg_t::set_srs_request_enabled(bool value) {
  _internal_set_srs_request_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dci_cfg_t.srs_request_enabled)
}

// bool ra_format_enabled = 5;
inline void srsran_dci_cfg_t::clear_ra_format_enabled() {
  ra_format_enabled_ = false;
}
inline bool srsran_dci_cfg_t::_internal_ra_format_enabled() const {
  return ra_format_enabled_;
}
inline bool srsran_dci_cfg_t::ra_format_enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dci_cfg_t.ra_format_enabled)
  return _internal_ra_format_enabled();
}
inline void srsran_dci_cfg_t::_internal_set_ra_format_enabled(bool value) {
  
  ra_format_enabled_ = value;
}
inline void srsran_dci_cfg_t::set_ra_format_enabled(bool value) {
  _internal_set_ra_format_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dci_cfg_t.ra_format_enabled)
}

// bool is_not_ue_ss = 6;
inline void srsran_dci_cfg_t::clear_is_not_ue_ss() {
  is_not_ue_ss_ = false;
}
inline bool srsran_dci_cfg_t::_internal_is_not_ue_ss() const {
  return is_not_ue_ss_;
}
inline bool srsran_dci_cfg_t::is_not_ue_ss() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dci_cfg_t.is_not_ue_ss)
  return _internal_is_not_ue_ss();
}
inline void srsran_dci_cfg_t::_internal_set_is_not_ue_ss(bool value) {
  
  is_not_ue_ss_ = value;
}
inline void srsran_dci_cfg_t::set_is_not_ue_ss(bool value) {
  _internal_set_is_not_ue_ss(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dci_cfg_t.is_not_ue_ss)
}

// -------------------------------------------------------------------

// srsran_ra_tb_t

// .fs.mac_rrc.srsran_mod_t mod = 1;
inline void srsran_ra_tb_t::clear_mod() {
  mod_ = 0;
}
inline ::fs::mac_rrc::srsran_mod_t srsran_ra_tb_t::_internal_mod() const {
  return static_cast< ::fs::mac_rrc::srsran_mod_t >(mod_);
}
inline ::fs::mac_rrc::srsran_mod_t srsran_ra_tb_t::mod() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.mod)
  return _internal_mod();
}
inline void srsran_ra_tb_t::_internal_set_mod(::fs::mac_rrc::srsran_mod_t value) {
  
  mod_ = value;
}
inline void srsran_ra_tb_t::set_mod(::fs::mac_rrc::srsran_mod_t value) {
  _internal_set_mod(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.mod)
}

// int32 tbs = 2;
inline void srsran_ra_tb_t::clear_tbs() {
  tbs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_ra_tb_t::_internal_tbs() const {
  return tbs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_ra_tb_t::tbs() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.tbs)
  return _internal_tbs();
}
inline void srsran_ra_tb_t::_internal_set_tbs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tbs_ = value;
}
inline void srsran_ra_tb_t::set_tbs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tbs(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.tbs)
}

// int32 rv = 3;
inline void srsran_ra_tb_t::clear_rv() {
  rv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_ra_tb_t::_internal_rv() const {
  return rv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_ra_tb_t::rv() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.rv)
  return _internal_rv();
}
inline void srsran_ra_tb_t::_internal_set_rv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rv_ = value;
}
inline void srsran_ra_tb_t::set_rv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rv(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.rv)
}

// uint32 nof_bits = 4;
inline void srsran_ra_tb_t::clear_nof_bits() {
  nof_bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_tb_t::_internal_nof_bits() const {
  return nof_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_tb_t::nof_bits() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.nof_bits)
  return _internal_nof_bits();
}
inline void srsran_ra_tb_t::_internal_set_nof_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_bits_ = value;
}
inline void srsran_ra_tb_t::set_nof_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_bits(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.nof_bits)
}

// uint32 cw_idx = 5;
inline void srsran_ra_tb_t::clear_cw_idx() {
  cw_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_tb_t::_internal_cw_idx() const {
  return cw_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_tb_t::cw_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.cw_idx)
  return _internal_cw_idx();
}
inline void srsran_ra_tb_t::_internal_set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cw_idx_ = value;
}
inline void srsran_ra_tb_t::set_cw_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cw_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.cw_idx)
}

// bool enabled = 6;
inline void srsran_ra_tb_t::clear_enabled() {
  enabled_ = false;
}
inline bool srsran_ra_tb_t::_internal_enabled() const {
  return enabled_;
}
inline bool srsran_ra_tb_t::enabled() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.enabled)
  return _internal_enabled();
}
inline void srsran_ra_tb_t::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void srsran_ra_tb_t::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.enabled)
}

// uint32 mcs_idx = 7;
inline void srsran_ra_tb_t::clear_mcs_idx() {
  mcs_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_tb_t::_internal_mcs_idx() const {
  return mcs_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_ra_tb_t::mcs_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_ra_tb_t.mcs_idx)
  return _internal_mcs_idx();
}
inline void srsran_ra_tb_t::_internal_set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mcs_idx_ = value;
}
inline void srsran_ra_tb_t::set_mcs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mcs_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_ra_tb_t.mcs_idx)
}

// -------------------------------------------------------------------

// srsran_pdsch_grant_t

// .fs.mac_rrc.srsran_tx_scheme_t tx_scheme = 1;
inline void srsran_pdsch_grant_t::clear_tx_scheme() {
  tx_scheme_ = 0;
}
inline ::fs::mac_rrc::srsran_tx_scheme_t srsran_pdsch_grant_t::_internal_tx_scheme() const {
  return static_cast< ::fs::mac_rrc::srsran_tx_scheme_t >(tx_scheme_);
}
inline ::fs::mac_rrc::srsran_tx_scheme_t srsran_pdsch_grant_t::tx_scheme() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.tx_scheme)
  return _internal_tx_scheme();
}
inline void srsran_pdsch_grant_t::_internal_set_tx_scheme(::fs::mac_rrc::srsran_tx_scheme_t value) {
  
  tx_scheme_ = value;
}
inline void srsran_pdsch_grant_t::set_tx_scheme(::fs::mac_rrc::srsran_tx_scheme_t value) {
  _internal_set_tx_scheme(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.tx_scheme)
}

// uint32 pmi = 2;
inline void srsran_pdsch_grant_t::clear_pmi() {
  pmi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::_internal_pmi() const {
  return pmi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::pmi() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.pmi)
  return _internal_pmi();
}
inline void srsran_pdsch_grant_t::_internal_set_pmi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pmi_ = value;
}
inline void srsran_pdsch_grant_t::set_pmi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pmi(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.pmi)
}

// uint32 nof_prb = 4;
inline void srsran_pdsch_grant_t::clear_nof_prb() {
  nof_prb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::_internal_nof_prb() const {
  return nof_prb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::nof_prb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.nof_prb)
  return _internal_nof_prb();
}
inline void srsran_pdsch_grant_t::_internal_set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_prb_ = value;
}
inline void srsran_pdsch_grant_t::set_nof_prb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_prb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.nof_prb)
}

// uint32 nof_re = 5;
inline void srsran_pdsch_grant_t::clear_nof_re() {
  nof_re_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::_internal_nof_re() const {
  return nof_re_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::nof_re() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.nof_re)
  return _internal_nof_re();
}
inline void srsran_pdsch_grant_t::_internal_set_nof_re(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_re_ = value;
}
inline void srsran_pdsch_grant_t::set_nof_re(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_re(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.nof_re)
}

// uint32 nof_tb = 9;
inline void srsran_pdsch_grant_t::clear_nof_tb() {
  nof_tb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::_internal_nof_tb() const {
  return nof_tb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::nof_tb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.nof_tb)
  return _internal_nof_tb();
}
inline void srsran_pdsch_grant_t::_internal_set_nof_tb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_tb_ = value;
}
inline void srsran_pdsch_grant_t::set_nof_tb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_tb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.nof_tb)
}

// uint32 nof_layers = 10;
inline void srsran_pdsch_grant_t::clear_nof_layers() {
  nof_layers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::_internal_nof_layers() const {
  return nof_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::nof_layers() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.nof_layers)
  return _internal_nof_layers();
}
inline void srsran_pdsch_grant_t::_internal_set_nof_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_layers_ = value;
}
inline void srsran_pdsch_grant_t::set_nof_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_layers(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.nof_layers)
}

// repeated bool prb_idx = 3;
inline int srsran_pdsch_grant_t::_internal_prb_idx_size() const {
  return prb_idx_.size();
}
inline int srsran_pdsch_grant_t::prb_idx_size() const {
  return _internal_prb_idx_size();
}
inline void srsran_pdsch_grant_t::clear_prb_idx() {
  prb_idx_.Clear();
}
inline bool srsran_pdsch_grant_t::_internal_prb_idx(int index) const {
  return prb_idx_.Get(index);
}
inline bool srsran_pdsch_grant_t::prb_idx(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.prb_idx)
  return _internal_prb_idx(index);
}
inline void srsran_pdsch_grant_t::set_prb_idx(int index, bool value) {
  prb_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.prb_idx)
}
inline void srsran_pdsch_grant_t::_internal_add_prb_idx(bool value) {
  prb_idx_.Add(value);
}
inline void srsran_pdsch_grant_t::add_prb_idx(bool value) {
  _internal_add_prb_idx(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pdsch_grant_t.prb_idx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_pdsch_grant_t::_internal_prb_idx() const {
  return prb_idx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_pdsch_grant_t::prb_idx() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pdsch_grant_t.prb_idx)
  return _internal_prb_idx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_pdsch_grant_t::_internal_mutable_prb_idx() {
  return &prb_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_pdsch_grant_t::mutable_prb_idx() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pdsch_grant_t.prb_idx)
  return _internal_mutable_prb_idx();
}

// repeated uint32 nof_symb_slot = 6;
inline int srsran_pdsch_grant_t::_internal_nof_symb_slot_size() const {
  return nof_symb_slot_.size();
}
inline int srsran_pdsch_grant_t::nof_symb_slot_size() const {
  return _internal_nof_symb_slot_size();
}
inline void srsran_pdsch_grant_t::clear_nof_symb_slot() {
  nof_symb_slot_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::_internal_nof_symb_slot(int index) const {
  return nof_symb_slot_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_grant_t::nof_symb_slot(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.nof_symb_slot)
  return _internal_nof_symb_slot(index);
}
inline void srsran_pdsch_grant_t::set_nof_symb_slot(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nof_symb_slot_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.nof_symb_slot)
}
inline void srsran_pdsch_grant_t::_internal_add_nof_symb_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nof_symb_slot_.Add(value);
}
inline void srsran_pdsch_grant_t::add_nof_symb_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nof_symb_slot(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pdsch_grant_t.nof_symb_slot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pdsch_grant_t::_internal_nof_symb_slot() const {
  return nof_symb_slot_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_pdsch_grant_t::nof_symb_slot() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pdsch_grant_t.nof_symb_slot)
  return _internal_nof_symb_slot();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pdsch_grant_t::_internal_mutable_nof_symb_slot() {
  return &nof_symb_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_pdsch_grant_t::mutable_nof_symb_slot() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pdsch_grant_t.nof_symb_slot)
  return _internal_mutable_nof_symb_slot();
}

// repeated int32 last_tbs = 8;
inline int srsran_pdsch_grant_t::_internal_last_tbs_size() const {
  return last_tbs_.size();
}
inline int srsran_pdsch_grant_t::last_tbs_size() const {
  return _internal_last_tbs_size();
}
inline void srsran_pdsch_grant_t::clear_last_tbs() {
  last_tbs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_pdsch_grant_t::_internal_last_tbs(int index) const {
  return last_tbs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_pdsch_grant_t::last_tbs(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.last_tbs)
  return _internal_last_tbs(index);
}
inline void srsran_pdsch_grant_t::set_last_tbs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  last_tbs_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_grant_t.last_tbs)
}
inline void srsran_pdsch_grant_t::_internal_add_last_tbs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  last_tbs_.Add(value);
}
inline void srsran_pdsch_grant_t::add_last_tbs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_last_tbs(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pdsch_grant_t.last_tbs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
srsran_pdsch_grant_t::_internal_last_tbs() const {
  return last_tbs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
srsran_pdsch_grant_t::last_tbs() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pdsch_grant_t.last_tbs)
  return _internal_last_tbs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
srsran_pdsch_grant_t::_internal_mutable_last_tbs() {
  return &last_tbs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
srsran_pdsch_grant_t::mutable_last_tbs() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pdsch_grant_t.last_tbs)
  return _internal_mutable_last_tbs();
}

// repeated .fs.mac_rrc.srsran_ra_tb_t tb = 7;
inline int srsran_pdsch_grant_t::_internal_tb_size() const {
  return tb_.size();
}
inline int srsran_pdsch_grant_t::tb_size() const {
  return _internal_tb_size();
}
inline void srsran_pdsch_grant_t::clear_tb() {
  tb_.Clear();
}
inline ::fs::mac_rrc::srsran_ra_tb_t* srsran_pdsch_grant_t::mutable_tb(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_pdsch_grant_t.tb)
  return tb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_ra_tb_t >*
srsran_pdsch_grant_t::mutable_tb() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pdsch_grant_t.tb)
  return &tb_;
}
inline const ::fs::mac_rrc::srsran_ra_tb_t& srsran_pdsch_grant_t::_internal_tb(int index) const {
  return tb_.Get(index);
}
inline const ::fs::mac_rrc::srsran_ra_tb_t& srsran_pdsch_grant_t::tb(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_grant_t.tb)
  return _internal_tb(index);
}
inline ::fs::mac_rrc::srsran_ra_tb_t* srsran_pdsch_grant_t::_internal_add_tb() {
  return tb_.Add();
}
inline ::fs::mac_rrc::srsran_ra_tb_t* srsran_pdsch_grant_t::add_tb() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pdsch_grant_t.tb)
  return _internal_add_tb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_ra_tb_t >&
srsran_pdsch_grant_t::tb() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pdsch_grant_t.tb)
  return tb_;
}

// -------------------------------------------------------------------

// srsran_cqi_report_cfg_t

// bool periodic_configured = 1;
inline void srsran_cqi_report_cfg_t::clear_periodic_configured() {
  periodic_configured_ = false;
}
inline bool srsran_cqi_report_cfg_t::_internal_periodic_configured() const {
  return periodic_configured_;
}
inline bool srsran_cqi_report_cfg_t::periodic_configured() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.periodic_configured)
  return _internal_periodic_configured();
}
inline void srsran_cqi_report_cfg_t::_internal_set_periodic_configured(bool value) {
  
  periodic_configured_ = value;
}
inline void srsran_cqi_report_cfg_t::set_periodic_configured(bool value) {
  _internal_set_periodic_configured(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.periodic_configured)
}

// bool aperiodic_configured = 2;
inline void srsran_cqi_report_cfg_t::clear_aperiodic_configured() {
  aperiodic_configured_ = false;
}
inline bool srsran_cqi_report_cfg_t::_internal_aperiodic_configured() const {
  return aperiodic_configured_;
}
inline bool srsran_cqi_report_cfg_t::aperiodic_configured() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.aperiodic_configured)
  return _internal_aperiodic_configured();
}
inline void srsran_cqi_report_cfg_t::_internal_set_aperiodic_configured(bool value) {
  
  aperiodic_configured_ = value;
}
inline void srsran_cqi_report_cfg_t::set_aperiodic_configured(bool value) {
  _internal_set_aperiodic_configured(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.aperiodic_configured)
}

// uint32 pmi_idx = 3;
inline void srsran_cqi_report_cfg_t::clear_pmi_idx() {
  pmi_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_report_cfg_t::_internal_pmi_idx() const {
  return pmi_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_report_cfg_t::pmi_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.pmi_idx)
  return _internal_pmi_idx();
}
inline void srsran_cqi_report_cfg_t::_internal_set_pmi_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pmi_idx_ = value;
}
inline void srsran_cqi_report_cfg_t::set_pmi_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pmi_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.pmi_idx)
}

// uint32 ri_idx = 4;
inline void srsran_cqi_report_cfg_t::clear_ri_idx() {
  ri_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_report_cfg_t::_internal_ri_idx() const {
  return ri_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_report_cfg_t::ri_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.ri_idx)
  return _internal_ri_idx();
}
inline void srsran_cqi_report_cfg_t::_internal_set_ri_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ri_idx_ = value;
}
inline void srsran_cqi_report_cfg_t::set_ri_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ri_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.ri_idx)
}

// bool ri_idx_present = 5;
inline void srsran_cqi_report_cfg_t::clear_ri_idx_present() {
  ri_idx_present_ = false;
}
inline bool srsran_cqi_report_cfg_t::_internal_ri_idx_present() const {
  return ri_idx_present_;
}
inline bool srsran_cqi_report_cfg_t::ri_idx_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.ri_idx_present)
  return _internal_ri_idx_present();
}
inline void srsran_cqi_report_cfg_t::_internal_set_ri_idx_present(bool value) {
  
  ri_idx_present_ = value;
}
inline void srsran_cqi_report_cfg_t::set_ri_idx_present(bool value) {
  _internal_set_ri_idx_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.ri_idx_present)
}

// bool format_is_subband = 6;
inline void srsran_cqi_report_cfg_t::clear_format_is_subband() {
  format_is_subband_ = false;
}
inline bool srsran_cqi_report_cfg_t::_internal_format_is_subband() const {
  return format_is_subband_;
}
inline bool srsran_cqi_report_cfg_t::format_is_subband() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.format_is_subband)
  return _internal_format_is_subband();
}
inline void srsran_cqi_report_cfg_t::_internal_set_format_is_subband(bool value) {
  
  format_is_subband_ = value;
}
inline void srsran_cqi_report_cfg_t::set_format_is_subband(bool value) {
  _internal_set_format_is_subband(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.format_is_subband)
}

// uint32 subband_size = 7;
inline void srsran_cqi_report_cfg_t::clear_subband_size() {
  subband_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_report_cfg_t::_internal_subband_size() const {
  return subband_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_cqi_report_cfg_t::subband_size() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.subband_size)
  return _internal_subband_size();
}
inline void srsran_cqi_report_cfg_t::_internal_set_subband_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subband_size_ = value;
}
inline void srsran_cqi_report_cfg_t::set_subband_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subband_size(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.subband_size)
}

// .fs.mac_rrc.srsran_cqi_report_mode_t periodic_mode = 8;
inline void srsran_cqi_report_cfg_t::clear_periodic_mode() {
  periodic_mode_ = 0;
}
inline ::fs::mac_rrc::srsran_cqi_report_mode_t srsran_cqi_report_cfg_t::_internal_periodic_mode() const {
  return static_cast< ::fs::mac_rrc::srsran_cqi_report_mode_t >(periodic_mode_);
}
inline ::fs::mac_rrc::srsran_cqi_report_mode_t srsran_cqi_report_cfg_t::periodic_mode() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.periodic_mode)
  return _internal_periodic_mode();
}
inline void srsran_cqi_report_cfg_t::_internal_set_periodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value) {
  
  periodic_mode_ = value;
}
inline void srsran_cqi_report_cfg_t::set_periodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value) {
  _internal_set_periodic_mode(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.periodic_mode)
}

// .fs.mac_rrc.srsran_cqi_report_mode_t aperiodic_mode = 9;
inline void srsran_cqi_report_cfg_t::clear_aperiodic_mode() {
  aperiodic_mode_ = 0;
}
inline ::fs::mac_rrc::srsran_cqi_report_mode_t srsran_cqi_report_cfg_t::_internal_aperiodic_mode() const {
  return static_cast< ::fs::mac_rrc::srsran_cqi_report_mode_t >(aperiodic_mode_);
}
inline ::fs::mac_rrc::srsran_cqi_report_mode_t srsran_cqi_report_cfg_t::aperiodic_mode() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_cqi_report_cfg_t.aperiodic_mode)
  return _internal_aperiodic_mode();
}
inline void srsran_cqi_report_cfg_t::_internal_set_aperiodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value) {
  
  aperiodic_mode_ = value;
}
inline void srsran_cqi_report_cfg_t::set_aperiodic_mode(::fs::mac_rrc::srsran_cqi_report_mode_t value) {
  _internal_set_aperiodic_mode(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_cqi_report_cfg_t.aperiodic_mode)
}

// -------------------------------------------------------------------

// srsran_softbuffer_rx_t

// uint32 max_cb = 1;
inline void srsran_softbuffer_rx_t::clear_max_cb() {
  max_cb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::_internal_max_cb() const {
  return max_cb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::max_cb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_rx_t.max_cb)
  return _internal_max_cb();
}
inline void srsran_softbuffer_rx_t::_internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_ = value;
}
inline void srsran_softbuffer_rx_t::set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_rx_t.max_cb)
}

// uint32 max_cb_size = 2;
inline void srsran_softbuffer_rx_t::clear_max_cb_size() {
  max_cb_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::_internal_max_cb_size() const {
  return max_cb_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::max_cb_size() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_rx_t.max_cb_size)
  return _internal_max_cb_size();
}
inline void srsran_softbuffer_rx_t::_internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_size_ = value;
}
inline void srsran_softbuffer_rx_t::set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb_size(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_rx_t.max_cb_size)
}

// bool tb_crc = 6;
inline void srsran_softbuffer_rx_t::clear_tb_crc() {
  tb_crc_ = false;
}
inline bool srsran_softbuffer_rx_t::_internal_tb_crc() const {
  return tb_crc_;
}
inline bool srsran_softbuffer_rx_t::tb_crc() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_rx_t.tb_crc)
  return _internal_tb_crc();
}
inline void srsran_softbuffer_rx_t::_internal_set_tb_crc(bool value) {
  
  tb_crc_ = value;
}
inline void srsran_softbuffer_rx_t::set_tb_crc(bool value) {
  _internal_set_tb_crc(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_rx_t.tb_crc)
}

// repeated int32 buffer_f = 3;
inline int srsran_softbuffer_rx_t::_internal_buffer_f_size() const {
  return buffer_f_.size();
}
inline int srsran_softbuffer_rx_t::buffer_f_size() const {
  return _internal_buffer_f_size();
}
inline void srsran_softbuffer_rx_t::clear_buffer_f() {
  buffer_f_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_softbuffer_rx_t::_internal_buffer_f(int index) const {
  return buffer_f_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_softbuffer_rx_t::buffer_f(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_rx_t.buffer_f)
  return _internal_buffer_f(index);
}
inline void srsran_softbuffer_rx_t::set_buffer_f(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buffer_f_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_rx_t.buffer_f)
}
inline void srsran_softbuffer_rx_t::_internal_add_buffer_f(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buffer_f_.Add(value);
}
inline void srsran_softbuffer_rx_t::add_buffer_f(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buffer_f(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_softbuffer_rx_t.buffer_f)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
srsran_softbuffer_rx_t::_internal_buffer_f() const {
  return buffer_f_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
srsran_softbuffer_rx_t::buffer_f() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_softbuffer_rx_t.buffer_f)
  return _internal_buffer_f();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
srsran_softbuffer_rx_t::_internal_mutable_buffer_f() {
  return &buffer_f_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
srsran_softbuffer_rx_t::mutable_buffer_f() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_softbuffer_rx_t.buffer_f)
  return _internal_mutable_buffer_f();
}

// repeated uint32 data = 4;
inline int srsran_softbuffer_rx_t::_internal_data_size() const {
  return data_.size();
}
inline int srsran_softbuffer_rx_t::data_size() const {
  return _internal_data_size();
}
inline void srsran_softbuffer_rx_t::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::data(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_rx_t.data)
  return _internal_data(index);
}
inline void srsran_softbuffer_rx_t::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_rx_t.data)
}
inline void srsran_softbuffer_rx_t::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void srsran_softbuffer_rx_t::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_softbuffer_rx_t.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_softbuffer_rx_t::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_softbuffer_rx_t::data() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_softbuffer_rx_t.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_softbuffer_rx_t::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_softbuffer_rx_t::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_softbuffer_rx_t.data)
  return _internal_mutable_data();
}

// repeated bool cb_crc = 5;
inline int srsran_softbuffer_rx_t::_internal_cb_crc_size() const {
  return cb_crc_.size();
}
inline int srsran_softbuffer_rx_t::cb_crc_size() const {
  return _internal_cb_crc_size();
}
inline void srsran_softbuffer_rx_t::clear_cb_crc() {
  cb_crc_.Clear();
}
inline bool srsran_softbuffer_rx_t::_internal_cb_crc(int index) const {
  return cb_crc_.Get(index);
}
inline bool srsran_softbuffer_rx_t::cb_crc(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_rx_t.cb_crc)
  return _internal_cb_crc(index);
}
inline void srsran_softbuffer_rx_t::set_cb_crc(int index, bool value) {
  cb_crc_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_rx_t.cb_crc)
}
inline void srsran_softbuffer_rx_t::_internal_add_cb_crc(bool value) {
  cb_crc_.Add(value);
}
inline void srsran_softbuffer_rx_t::add_cb_crc(bool value) {
  _internal_add_cb_crc(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_softbuffer_rx_t.cb_crc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_softbuffer_rx_t::_internal_cb_crc() const {
  return cb_crc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_softbuffer_rx_t::cb_crc() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_softbuffer_rx_t.cb_crc)
  return _internal_cb_crc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_softbuffer_rx_t::_internal_mutable_cb_crc() {
  return &cb_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_softbuffer_rx_t::mutable_cb_crc() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_softbuffer_rx_t.cb_crc)
  return _internal_mutable_cb_crc();
}

// -------------------------------------------------------------------

// srsran_softbuffer_tx_t

// uint32 max_cb = 1;
inline void srsran_softbuffer_tx_t::clear_max_cb() {
  max_cb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::_internal_max_cb() const {
  return max_cb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::max_cb() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_tx_t.max_cb)
  return _internal_max_cb();
}
inline void srsran_softbuffer_tx_t::_internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_ = value;
}
inline void srsran_softbuffer_tx_t::set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_tx_t.max_cb)
}

// uint32 max_cb_size = 2;
inline void srsran_softbuffer_tx_t::clear_max_cb_size() {
  max_cb_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::_internal_max_cb_size() const {
  return max_cb_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::max_cb_size() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_tx_t.max_cb_size)
  return _internal_max_cb_size();
}
inline void srsran_softbuffer_tx_t::_internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_size_ = value;
}
inline void srsran_softbuffer_tx_t::set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb_size(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_tx_t.max_cb_size)
}

// repeated uint32 buffer_b = 3;
inline int srsran_softbuffer_tx_t::_internal_buffer_b_size() const {
  return buffer_b_.size();
}
inline int srsran_softbuffer_tx_t::buffer_b_size() const {
  return _internal_buffer_b_size();
}
inline void srsran_softbuffer_tx_t::clear_buffer_b() {
  buffer_b_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::_internal_buffer_b(int index) const {
  return buffer_b_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_tx_t::buffer_b(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_softbuffer_tx_t.buffer_b)
  return _internal_buffer_b(index);
}
inline void srsran_softbuffer_tx_t::set_buffer_b(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  buffer_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_softbuffer_tx_t.buffer_b)
}
inline void srsran_softbuffer_tx_t::_internal_add_buffer_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  buffer_b_.Add(value);
}
inline void srsran_softbuffer_tx_t::add_buffer_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_buffer_b(value);
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_softbuffer_tx_t.buffer_b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_softbuffer_tx_t::_internal_buffer_b() const {
  return buffer_b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
srsran_softbuffer_tx_t::buffer_b() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_softbuffer_tx_t.buffer_b)
  return _internal_buffer_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_softbuffer_tx_t::_internal_mutable_buffer_b() {
  return &buffer_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
srsran_softbuffer_tx_t::mutable_buffer_b() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_softbuffer_tx_t.buffer_b)
  return _internal_mutable_buffer_b();
}

// -------------------------------------------------------------------

// srsran_pdsch_cfg_t

// .fs.mac_rrc.srsran_pdsch_grant_t grant = 1;
inline bool srsran_pdsch_cfg_t::_internal_has_grant() const {
  return this != internal_default_instance() && grant_ != nullptr;
}
inline bool srsran_pdsch_cfg_t::has_grant() const {
  return _internal_has_grant();
}
inline void srsran_pdsch_cfg_t::clear_grant() {
  if (GetArena() == nullptr && grant_ != nullptr) {
    delete grant_;
  }
  grant_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_pdsch_grant_t& srsran_pdsch_cfg_t::_internal_grant() const {
  const ::fs::mac_rrc::srsran_pdsch_grant_t* p = grant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_pdsch_grant_t*>(
      &::fs::mac_rrc::_srsran_pdsch_grant_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_pdsch_grant_t& srsran_pdsch_cfg_t::grant() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.grant)
  return _internal_grant();
}
inline void srsran_pdsch_cfg_t::unsafe_arena_set_allocated_grant(
    ::fs::mac_rrc::srsran_pdsch_grant_t* grant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grant_);
  }
  grant_ = grant;
  if (grant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.srsran_pdsch_cfg_t.grant)
}
inline ::fs::mac_rrc::srsran_pdsch_grant_t* srsran_pdsch_cfg_t::release_grant() {
  auto temp = unsafe_arena_release_grant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_pdsch_grant_t* srsran_pdsch_cfg_t::unsafe_arena_release_grant() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.srsran_pdsch_cfg_t.grant)
  
  ::fs::mac_rrc::srsran_pdsch_grant_t* temp = grant_;
  grant_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_pdsch_grant_t* srsran_pdsch_cfg_t::_internal_mutable_grant() {
  
  if (grant_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_pdsch_grant_t>(GetArena());
    grant_ = p;
  }
  return grant_;
}
inline ::fs::mac_rrc::srsran_pdsch_grant_t* srsran_pdsch_cfg_t::mutable_grant() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_pdsch_cfg_t.grant)
  return _internal_mutable_grant();
}
inline void srsran_pdsch_cfg_t::set_allocated_grant(::fs::mac_rrc::srsran_pdsch_grant_t* grant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grant_;
  }
  if (grant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grant);
    if (message_arena != submessage_arena) {
      grant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grant, submessage_arena);
    }
    
  } else {
    
  }
  grant_ = grant;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.srsran_pdsch_cfg_t.grant)
}

// uint32 rnti = 2;
inline void srsran_pdsch_cfg_t::clear_rnti() {
  rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::rnti() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.rnti)
  return _internal_rnti();
}
inline void srsran_pdsch_cfg_t::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rnti_ = value;
}
inline void srsran_pdsch_cfg_t::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.rnti)
}

// uint32 max_nof_iterations = 3;
inline void srsran_pdsch_cfg_t::clear_max_nof_iterations() {
  max_nof_iterations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::_internal_max_nof_iterations() const {
  return max_nof_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::max_nof_iterations() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.max_nof_iterations)
  return _internal_max_nof_iterations();
}
inline void srsran_pdsch_cfg_t::_internal_set_max_nof_iterations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_nof_iterations_ = value;
}
inline void srsran_pdsch_cfg_t::set_max_nof_iterations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_nof_iterations(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.max_nof_iterations)
}

// .fs.mac_rrc.srsran_mimo_decoder_t decoder_type = 4;
inline void srsran_pdsch_cfg_t::clear_decoder_type() {
  decoder_type_ = 0;
}
inline ::fs::mac_rrc::srsran_mimo_decoder_t srsran_pdsch_cfg_t::_internal_decoder_type() const {
  return static_cast< ::fs::mac_rrc::srsran_mimo_decoder_t >(decoder_type_);
}
inline ::fs::mac_rrc::srsran_mimo_decoder_t srsran_pdsch_cfg_t::decoder_type() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.decoder_type)
  return _internal_decoder_type();
}
inline void srsran_pdsch_cfg_t::_internal_set_decoder_type(::fs::mac_rrc::srsran_mimo_decoder_t value) {
  
  decoder_type_ = value;
}
inline void srsran_pdsch_cfg_t::set_decoder_type(::fs::mac_rrc::srsran_mimo_decoder_t value) {
  _internal_set_decoder_type(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.decoder_type)
}

// float p_a = 5;
inline void srsran_pdsch_cfg_t::clear_p_a() {
  p_a_ = 0;
}
inline float srsran_pdsch_cfg_t::_internal_p_a() const {
  return p_a_;
}
inline float srsran_pdsch_cfg_t::p_a() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.p_a)
  return _internal_p_a();
}
inline void srsran_pdsch_cfg_t::_internal_set_p_a(float value) {
  
  p_a_ = value;
}
inline void srsran_pdsch_cfg_t::set_p_a(float value) {
  _internal_set_p_a(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.p_a)
}

// uint32 p_b = 6;
inline void srsran_pdsch_cfg_t::clear_p_b() {
  p_b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::_internal_p_b() const {
  return p_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::p_b() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.p_b)
  return _internal_p_b();
}
inline void srsran_pdsch_cfg_t::_internal_set_p_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  p_b_ = value;
}
inline void srsran_pdsch_cfg_t::set_p_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p_b(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.p_b)
}

// float rs_power = 7;
inline void srsran_pdsch_cfg_t::clear_rs_power() {
  rs_power_ = 0;
}
inline float srsran_pdsch_cfg_t::_internal_rs_power() const {
  return rs_power_;
}
inline float srsran_pdsch_cfg_t::rs_power() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.rs_power)
  return _internal_rs_power();
}
inline void srsran_pdsch_cfg_t::_internal_set_rs_power(float value) {
  
  rs_power_ = value;
}
inline void srsran_pdsch_cfg_t::set_rs_power(float value) {
  _internal_set_rs_power(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.rs_power)
}

// bool power_scale = 8;
inline void srsran_pdsch_cfg_t::clear_power_scale() {
  power_scale_ = false;
}
inline bool srsran_pdsch_cfg_t::_internal_power_scale() const {
  return power_scale_;
}
inline bool srsran_pdsch_cfg_t::power_scale() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.power_scale)
  return _internal_power_scale();
}
inline void srsran_pdsch_cfg_t::_internal_set_power_scale(bool value) {
  
  power_scale_ = value;
}
inline void srsran_pdsch_cfg_t::set_power_scale(bool value) {
  _internal_set_power_scale(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.power_scale)
}

// bool csi_enable = 9;
inline void srsran_pdsch_cfg_t::clear_csi_enable() {
  csi_enable_ = false;
}
inline bool srsran_pdsch_cfg_t::_internal_csi_enable() const {
  return csi_enable_;
}
inline bool srsran_pdsch_cfg_t::csi_enable() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.csi_enable)
  return _internal_csi_enable();
}
inline void srsran_pdsch_cfg_t::_internal_set_csi_enable(bool value) {
  
  csi_enable_ = value;
}
inline void srsran_pdsch_cfg_t::set_csi_enable(bool value) {
  _internal_set_csi_enable(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.csi_enable)
}

// bool use_tbs_index_alt = 10;
inline void srsran_pdsch_cfg_t::clear_use_tbs_index_alt() {
  use_tbs_index_alt_ = false;
}
inline bool srsran_pdsch_cfg_t::_internal_use_tbs_index_alt() const {
  return use_tbs_index_alt_;
}
inline bool srsran_pdsch_cfg_t::use_tbs_index_alt() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.use_tbs_index_alt)
  return _internal_use_tbs_index_alt();
}
inline void srsran_pdsch_cfg_t::_internal_set_use_tbs_index_alt(bool value) {
  
  use_tbs_index_alt_ = value;
}
inline void srsran_pdsch_cfg_t::set_use_tbs_index_alt(bool value) {
  _internal_set_use_tbs_index_alt(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.use_tbs_index_alt)
}

// repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 11;
inline int srsran_pdsch_cfg_t::_internal_tx_size() const {
  return tx_.size();
}
inline int srsran_pdsch_cfg_t::tx_size() const {
  return _internal_tx_size();
}
inline void srsran_pdsch_cfg_t::clear_tx() {
  tx_.Clear();
}
inline ::fs::mac_rrc::srsran_softbuffer_tx_t* srsran_pdsch_cfg_t::mutable_tx(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_pdsch_cfg_t.tx)
  return tx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_tx_t >*
srsran_pdsch_cfg_t::mutable_tx() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pdsch_cfg_t.tx)
  return &tx_;
}
inline const ::fs::mac_rrc::srsran_softbuffer_tx_t& srsran_pdsch_cfg_t::_internal_tx(int index) const {
  return tx_.Get(index);
}
inline const ::fs::mac_rrc::srsran_softbuffer_tx_t& srsran_pdsch_cfg_t::tx(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.tx)
  return _internal_tx(index);
}
inline ::fs::mac_rrc::srsran_softbuffer_tx_t* srsran_pdsch_cfg_t::_internal_add_tx() {
  return tx_.Add();
}
inline ::fs::mac_rrc::srsran_softbuffer_tx_t* srsran_pdsch_cfg_t::add_tx() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pdsch_cfg_t.tx)
  return _internal_add_tx();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_tx_t >&
srsran_pdsch_cfg_t::tx() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pdsch_cfg_t.tx)
  return tx_;
}

// repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 12;
inline int srsran_pdsch_cfg_t::_internal_rx_size() const {
  return rx_.size();
}
inline int srsran_pdsch_cfg_t::rx_size() const {
  return _internal_rx_size();
}
inline void srsran_pdsch_cfg_t::clear_rx() {
  rx_.Clear();
}
inline ::fs::mac_rrc::srsran_softbuffer_rx_t* srsran_pdsch_cfg_t::mutable_rx(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_pdsch_cfg_t.rx)
  return rx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_rx_t >*
srsran_pdsch_cfg_t::mutable_rx() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.srsran_pdsch_cfg_t.rx)
  return &rx_;
}
inline const ::fs::mac_rrc::srsran_softbuffer_rx_t& srsran_pdsch_cfg_t::_internal_rx(int index) const {
  return rx_.Get(index);
}
inline const ::fs::mac_rrc::srsran_softbuffer_rx_t& srsran_pdsch_cfg_t::rx(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.rx)
  return _internal_rx(index);
}
inline ::fs::mac_rrc::srsran_softbuffer_rx_t* srsran_pdsch_cfg_t::_internal_add_rx() {
  return rx_.Add();
}
inline ::fs::mac_rrc::srsran_softbuffer_rx_t* srsran_pdsch_cfg_t::add_rx() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.srsran_pdsch_cfg_t.rx)
  return _internal_add_rx();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::srsran_softbuffer_rx_t >&
srsran_pdsch_cfg_t::rx() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.srsran_pdsch_cfg_t.rx)
  return rx_;
}

// bool meas_evm_en = 13;
inline void srsran_pdsch_cfg_t::clear_meas_evm_en() {
  meas_evm_en_ = false;
}
inline bool srsran_pdsch_cfg_t::_internal_meas_evm_en() const {
  return meas_evm_en_;
}
inline bool srsran_pdsch_cfg_t::meas_evm_en() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.meas_evm_en)
  return _internal_meas_evm_en();
}
inline void srsran_pdsch_cfg_t::_internal_set_meas_evm_en(bool value) {
  
  meas_evm_en_ = value;
}
inline void srsran_pdsch_cfg_t::set_meas_evm_en(bool value) {
  _internal_set_meas_evm_en(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.meas_evm_en)
}

// bool meas_time_en = 14;
inline void srsran_pdsch_cfg_t::clear_meas_time_en() {
  meas_time_en_ = false;
}
inline bool srsran_pdsch_cfg_t::_internal_meas_time_en() const {
  return meas_time_en_;
}
inline bool srsran_pdsch_cfg_t::meas_time_en() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.meas_time_en)
  return _internal_meas_time_en();
}
inline void srsran_pdsch_cfg_t::_internal_set_meas_time_en(bool value) {
  
  meas_time_en_ = value;
}
inline void srsran_pdsch_cfg_t::set_meas_time_en(bool value) {
  _internal_set_meas_time_en(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.meas_time_en)
}

// uint32 meas_time_value = 15;
inline void srsran_pdsch_cfg_t::clear_meas_time_value() {
  meas_time_value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::_internal_meas_time_value() const {
  return meas_time_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_pdsch_cfg_t::meas_time_value() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_pdsch_cfg_t.meas_time_value)
  return _internal_meas_time_value();
}
inline void srsran_pdsch_cfg_t::_internal_set_meas_time_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  meas_time_value_ = value;
}
inline void srsran_pdsch_cfg_t::set_meas_time_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meas_time_value(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_pdsch_cfg_t.meas_time_value)
}

// -------------------------------------------------------------------

// srsran_dl_cfg_t

// .fs.mac_rrc.srsran_cqi_report_cfg_t cqi_report = 1;
inline bool srsran_dl_cfg_t::_internal_has_cqi_report() const {
  return this != internal_default_instance() && cqi_report_ != nullptr;
}
inline bool srsran_dl_cfg_t::has_cqi_report() const {
  return _internal_has_cqi_report();
}
inline void srsran_dl_cfg_t::clear_cqi_report() {
  if (GetArena() == nullptr && cqi_report_ != nullptr) {
    delete cqi_report_;
  }
  cqi_report_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_cqi_report_cfg_t& srsran_dl_cfg_t::_internal_cqi_report() const {
  const ::fs::mac_rrc::srsran_cqi_report_cfg_t* p = cqi_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_cqi_report_cfg_t*>(
      &::fs::mac_rrc::_srsran_cqi_report_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_cqi_report_cfg_t& srsran_dl_cfg_t::cqi_report() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dl_cfg_t.cqi_report)
  return _internal_cqi_report();
}
inline void srsran_dl_cfg_t::unsafe_arena_set_allocated_cqi_report(
    ::fs::mac_rrc::srsran_cqi_report_cfg_t* cqi_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cqi_report_);
  }
  cqi_report_ = cqi_report;
  if (cqi_report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.srsran_dl_cfg_t.cqi_report)
}
inline ::fs::mac_rrc::srsran_cqi_report_cfg_t* srsran_dl_cfg_t::release_cqi_report() {
  auto temp = unsafe_arena_release_cqi_report();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_cqi_report_cfg_t* srsran_dl_cfg_t::unsafe_arena_release_cqi_report() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.srsran_dl_cfg_t.cqi_report)
  
  ::fs::mac_rrc::srsran_cqi_report_cfg_t* temp = cqi_report_;
  cqi_report_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_cqi_report_cfg_t* srsran_dl_cfg_t::_internal_mutable_cqi_report() {
  
  if (cqi_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_cqi_report_cfg_t>(GetArena());
    cqi_report_ = p;
  }
  return cqi_report_;
}
inline ::fs::mac_rrc::srsran_cqi_report_cfg_t* srsran_dl_cfg_t::mutable_cqi_report() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_dl_cfg_t.cqi_report)
  return _internal_mutable_cqi_report();
}
inline void srsran_dl_cfg_t::set_allocated_cqi_report(::fs::mac_rrc::srsran_cqi_report_cfg_t* cqi_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cqi_report_;
  }
  if (cqi_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cqi_report);
    if (message_arena != submessage_arena) {
      cqi_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cqi_report, submessage_arena);
    }
    
  } else {
    
  }
  cqi_report_ = cqi_report;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.srsran_dl_cfg_t.cqi_report)
}

// .fs.mac_rrc.srsran_pdsch_cfg_t pdsch = 2;
inline bool srsran_dl_cfg_t::_internal_has_pdsch() const {
  return this != internal_default_instance() && pdsch_ != nullptr;
}
inline bool srsran_dl_cfg_t::has_pdsch() const {
  return _internal_has_pdsch();
}
inline void srsran_dl_cfg_t::clear_pdsch() {
  if (GetArena() == nullptr && pdsch_ != nullptr) {
    delete pdsch_;
  }
  pdsch_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_pdsch_cfg_t& srsran_dl_cfg_t::_internal_pdsch() const {
  const ::fs::mac_rrc::srsran_pdsch_cfg_t* p = pdsch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_pdsch_cfg_t*>(
      &::fs::mac_rrc::_srsran_pdsch_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_pdsch_cfg_t& srsran_dl_cfg_t::pdsch() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dl_cfg_t.pdsch)
  return _internal_pdsch();
}
inline void srsran_dl_cfg_t::unsafe_arena_set_allocated_pdsch(
    ::fs::mac_rrc::srsran_pdsch_cfg_t* pdsch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdsch_);
  }
  pdsch_ = pdsch;
  if (pdsch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.srsran_dl_cfg_t.pdsch)
}
inline ::fs::mac_rrc::srsran_pdsch_cfg_t* srsran_dl_cfg_t::release_pdsch() {
  auto temp = unsafe_arena_release_pdsch();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_pdsch_cfg_t* srsran_dl_cfg_t::unsafe_arena_release_pdsch() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.srsran_dl_cfg_t.pdsch)
  
  ::fs::mac_rrc::srsran_pdsch_cfg_t* temp = pdsch_;
  pdsch_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_pdsch_cfg_t* srsran_dl_cfg_t::_internal_mutable_pdsch() {
  
  if (pdsch_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_pdsch_cfg_t>(GetArena());
    pdsch_ = p;
  }
  return pdsch_;
}
inline ::fs::mac_rrc::srsran_pdsch_cfg_t* srsran_dl_cfg_t::mutable_pdsch() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_dl_cfg_t.pdsch)
  return _internal_mutable_pdsch();
}
inline void srsran_dl_cfg_t::set_allocated_pdsch(::fs::mac_rrc::srsran_pdsch_cfg_t* pdsch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pdsch_;
  }
  if (pdsch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pdsch);
    if (message_arena != submessage_arena) {
      pdsch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pdsch, submessage_arena);
    }
    
  } else {
    
  }
  pdsch_ = pdsch;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.srsran_dl_cfg_t.pdsch)
}

// .fs.mac_rrc.srsran_dci_cfg_t dci = 3;
inline bool srsran_dl_cfg_t::_internal_has_dci() const {
  return this != internal_default_instance() && dci_ != nullptr;
}
inline bool srsran_dl_cfg_t::has_dci() const {
  return _internal_has_dci();
}
inline void srsran_dl_cfg_t::clear_dci() {
  if (GetArena() == nullptr && dci_ != nullptr) {
    delete dci_;
  }
  dci_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_dci_cfg_t& srsran_dl_cfg_t::_internal_dci() const {
  const ::fs::mac_rrc::srsran_dci_cfg_t* p = dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_dci_cfg_t*>(
      &::fs::mac_rrc::_srsran_dci_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_dci_cfg_t& srsran_dl_cfg_t::dci() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dl_cfg_t.dci)
  return _internal_dci();
}
inline void srsran_dl_cfg_t::unsafe_arena_set_allocated_dci(
    ::fs::mac_rrc::srsran_dci_cfg_t* dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dci_);
  }
  dci_ = dci;
  if (dci) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.srsran_dl_cfg_t.dci)
}
inline ::fs::mac_rrc::srsran_dci_cfg_t* srsran_dl_cfg_t::release_dci() {
  auto temp = unsafe_arena_release_dci();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_dci_cfg_t* srsran_dl_cfg_t::unsafe_arena_release_dci() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.srsran_dl_cfg_t.dci)
  
  ::fs::mac_rrc::srsran_dci_cfg_t* temp = dci_;
  dci_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_dci_cfg_t* srsran_dl_cfg_t::_internal_mutable_dci() {
  
  if (dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_dci_cfg_t>(GetArena());
    dci_ = p;
  }
  return dci_;
}
inline ::fs::mac_rrc::srsran_dci_cfg_t* srsran_dl_cfg_t::mutable_dci() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.srsran_dl_cfg_t.dci)
  return _internal_mutable_dci();
}
inline void srsran_dl_cfg_t::set_allocated_dci(::fs::mac_rrc::srsran_dci_cfg_t* dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dci_;
  }
  if (dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dci);
    if (message_arena != submessage_arena) {
      dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dci, submessage_arena);
    }
    
  } else {
    
  }
  dci_ = dci;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.srsran_dl_cfg_t.dci)
}

// .fs.mac_rrc.srsran_tm_t tm = 4;
inline void srsran_dl_cfg_t::clear_tm() {
  tm_ = 0;
}
inline ::fs::mac_rrc::srsran_tm_t srsran_dl_cfg_t::_internal_tm() const {
  return static_cast< ::fs::mac_rrc::srsran_tm_t >(tm_);
}
inline ::fs::mac_rrc::srsran_tm_t srsran_dl_cfg_t::tm() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dl_cfg_t.tm)
  return _internal_tm();
}
inline void srsran_dl_cfg_t::_internal_set_tm(::fs::mac_rrc::srsran_tm_t value) {
  
  tm_ = value;
}
inline void srsran_dl_cfg_t::set_tm(::fs::mac_rrc::srsran_tm_t value) {
  _internal_set_tm(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dl_cfg_t.tm)
}

// bool dci_common_ss = 5;
inline void srsran_dl_cfg_t::clear_dci_common_ss() {
  dci_common_ss_ = false;
}
inline bool srsran_dl_cfg_t::_internal_dci_common_ss() const {
  return dci_common_ss_;
}
inline bool srsran_dl_cfg_t::dci_common_ss() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.srsran_dl_cfg_t.dci_common_ss)
  return _internal_dci_common_ss();
}
inline void srsran_dl_cfg_t::_internal_set_dci_common_ss(bool value) {
  
  dci_common_ss_ = value;
}
inline void srsran_dl_cfg_t::set_dci_common_ss(bool value) {
  _internal_set_dci_common_ss(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.srsran_dl_cfg_t.dci_common_ss)
}

// -------------------------------------------------------------------

// cc_cfg_t

// bool active = 1;
inline void cc_cfg_t::clear_active() {
  active_ = false;
}
inline bool cc_cfg_t::_internal_active() const {
  return active_;
}
inline bool cc_cfg_t::active() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cc_cfg_t.active)
  return _internal_active();
}
inline void cc_cfg_t::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void cc_cfg_t::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cc_cfg_t.active)
}

// uint32 enb_cc_idx = 2;
inline void cc_cfg_t::clear_enb_cc_idx() {
  enb_cc_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cc_cfg_t::_internal_enb_cc_idx() const {
  return enb_cc_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cc_cfg_t::enb_cc_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cc_cfg_t.enb_cc_idx)
  return _internal_enb_cc_idx();
}
inline void cc_cfg_t::_internal_set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enb_cc_idx_ = value;
}
inline void cc_cfg_t::set_enb_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enb_cc_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cc_cfg_t.enb_cc_idx)
}

// .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 3;
inline bool cc_cfg_t::_internal_has_dl_cfg() const {
  return this != internal_default_instance() && dl_cfg_ != nullptr;
}
inline bool cc_cfg_t::has_dl_cfg() const {
  return _internal_has_dl_cfg();
}
inline void cc_cfg_t::clear_dl_cfg() {
  if (GetArena() == nullptr && dl_cfg_ != nullptr) {
    delete dl_cfg_;
  }
  dl_cfg_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_dl_cfg_t& cc_cfg_t::_internal_dl_cfg() const {
  const ::fs::mac_rrc::srsran_dl_cfg_t* p = dl_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_dl_cfg_t*>(
      &::fs::mac_rrc::_srsran_dl_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_dl_cfg_t& cc_cfg_t::dl_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cc_cfg_t.dl_cfg)
  return _internal_dl_cfg();
}
inline void cc_cfg_t::unsafe_arena_set_allocated_dl_cfg(
    ::fs::mac_rrc::srsran_dl_cfg_t* dl_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_cfg_);
  }
  dl_cfg_ = dl_cfg;
  if (dl_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.cc_cfg_t.dl_cfg)
}
inline ::fs::mac_rrc::srsran_dl_cfg_t* cc_cfg_t::release_dl_cfg() {
  auto temp = unsafe_arena_release_dl_cfg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_dl_cfg_t* cc_cfg_t::unsafe_arena_release_dl_cfg() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.cc_cfg_t.dl_cfg)
  
  ::fs::mac_rrc::srsran_dl_cfg_t* temp = dl_cfg_;
  dl_cfg_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_dl_cfg_t* cc_cfg_t::_internal_mutable_dl_cfg() {
  
  if (dl_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_dl_cfg_t>(GetArena());
    dl_cfg_ = p;
  }
  return dl_cfg_;
}
inline ::fs::mac_rrc::srsran_dl_cfg_t* cc_cfg_t::mutable_dl_cfg() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.cc_cfg_t.dl_cfg)
  return _internal_mutable_dl_cfg();
}
inline void cc_cfg_t::set_allocated_dl_cfg(::fs::mac_rrc::srsran_dl_cfg_t* dl_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dl_cfg_;
  }
  if (dl_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dl_cfg);
    if (message_arena != submessage_arena) {
      dl_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl_cfg, submessage_arena);
    }
    
  } else {
    
  }
  dl_cfg_ = dl_cfg;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.cc_cfg_t.dl_cfg)
}

// uint32 aperiodic_cqi_period = 4;
inline void cc_cfg_t::clear_aperiodic_cqi_period() {
  aperiodic_cqi_period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cc_cfg_t::_internal_aperiodic_cqi_period() const {
  return aperiodic_cqi_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cc_cfg_t::aperiodic_cqi_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.cc_cfg_t.aperiodic_cqi_period)
  return _internal_aperiodic_cqi_period();
}
inline void cc_cfg_t::_internal_set_aperiodic_cqi_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  aperiodic_cqi_period_ = value;
}
inline void cc_cfg_t::set_aperiodic_cqi_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_aperiodic_cqi_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.cc_cfg_t.aperiodic_cqi_period)
}

// -------------------------------------------------------------------

// ue_cfg_t

// uint32 maxharq_tx = 1;
inline void ue_cfg_t::clear_maxharq_tx() {
  maxharq_tx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_cfg_t::_internal_maxharq_tx() const {
  return maxharq_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_cfg_t::maxharq_tx() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.maxharq_tx)
  return _internal_maxharq_tx();
}
inline void ue_cfg_t::_internal_set_maxharq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxharq_tx_ = value;
}
inline void ue_cfg_t::set_maxharq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxharq_tx(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_cfg_t.maxharq_tx)
}

// bool continuous_pusch = 2;
inline void ue_cfg_t::clear_continuous_pusch() {
  continuous_pusch_ = false;
}
inline bool ue_cfg_t::_internal_continuous_pusch() const {
  return continuous_pusch_;
}
inline bool ue_cfg_t::continuous_pusch() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.continuous_pusch)
  return _internal_continuous_pusch();
}
inline void ue_cfg_t::_internal_set_continuous_pusch(bool value) {
  
  continuous_pusch_ = value;
}
inline void ue_cfg_t::set_continuous_pusch(bool value) {
  _internal_set_continuous_pusch(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_cfg_t.continuous_pusch)
}

// .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 3;
inline bool ue_cfg_t::_internal_has_uci_offset() const {
  return this != internal_default_instance() && uci_offset_ != nullptr;
}
inline bool ue_cfg_t::has_uci_offset() const {
  return _internal_has_uci_offset();
}
inline void ue_cfg_t::clear_uci_offset() {
  if (GetArena() == nullptr && uci_offset_ != nullptr) {
    delete uci_offset_;
  }
  uci_offset_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_uci_offset_cfg_t& ue_cfg_t::_internal_uci_offset() const {
  const ::fs::mac_rrc::srsran_uci_offset_cfg_t* p = uci_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_uci_offset_cfg_t*>(
      &::fs::mac_rrc::_srsran_uci_offset_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_uci_offset_cfg_t& ue_cfg_t::uci_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.uci_offset)
  return _internal_uci_offset();
}
inline void ue_cfg_t::unsafe_arena_set_allocated_uci_offset(
    ::fs::mac_rrc::srsran_uci_offset_cfg_t* uci_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uci_offset_);
  }
  uci_offset_ = uci_offset;
  if (uci_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.ue_cfg_t.uci_offset)
}
inline ::fs::mac_rrc::srsran_uci_offset_cfg_t* ue_cfg_t::release_uci_offset() {
  auto temp = unsafe_arena_release_uci_offset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_uci_offset_cfg_t* ue_cfg_t::unsafe_arena_release_uci_offset() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.ue_cfg_t.uci_offset)
  
  ::fs::mac_rrc::srsran_uci_offset_cfg_t* temp = uci_offset_;
  uci_offset_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_uci_offset_cfg_t* ue_cfg_t::_internal_mutable_uci_offset() {
  
  if (uci_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_uci_offset_cfg_t>(GetArena());
    uci_offset_ = p;
  }
  return uci_offset_;
}
inline ::fs::mac_rrc::srsran_uci_offset_cfg_t* ue_cfg_t::mutable_uci_offset() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.ue_cfg_t.uci_offset)
  return _internal_mutable_uci_offset();
}
inline void ue_cfg_t::set_allocated_uci_offset(::fs::mac_rrc::srsran_uci_offset_cfg_t* uci_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uci_offset_;
  }
  if (uci_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uci_offset);
    if (message_arena != submessage_arena) {
      uci_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uci_offset, submessage_arena);
    }
    
  } else {
    
  }
  uci_offset_ = uci_offset;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.ue_cfg_t.uci_offset)
}

// .fs.mac_rrc.srsran_pucch_cfg_t pucch_cfg = 4;
inline bool ue_cfg_t::_internal_has_pucch_cfg() const {
  return this != internal_default_instance() && pucch_cfg_ != nullptr;
}
inline bool ue_cfg_t::has_pucch_cfg() const {
  return _internal_has_pucch_cfg();
}
inline void ue_cfg_t::clear_pucch_cfg() {
  if (GetArena() == nullptr && pucch_cfg_ != nullptr) {
    delete pucch_cfg_;
  }
  pucch_cfg_ = nullptr;
}
inline const ::fs::mac_rrc::srsran_pucch_cfg_t& ue_cfg_t::_internal_pucch_cfg() const {
  const ::fs::mac_rrc::srsran_pucch_cfg_t* p = pucch_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::srsran_pucch_cfg_t*>(
      &::fs::mac_rrc::_srsran_pucch_cfg_t_default_instance_);
}
inline const ::fs::mac_rrc::srsran_pucch_cfg_t& ue_cfg_t::pucch_cfg() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.pucch_cfg)
  return _internal_pucch_cfg();
}
inline void ue_cfg_t::unsafe_arena_set_allocated_pucch_cfg(
    ::fs::mac_rrc::srsran_pucch_cfg_t* pucch_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pucch_cfg_);
  }
  pucch_cfg_ = pucch_cfg;
  if (pucch_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.ue_cfg_t.pucch_cfg)
}
inline ::fs::mac_rrc::srsran_pucch_cfg_t* ue_cfg_t::release_pucch_cfg() {
  auto temp = unsafe_arena_release_pucch_cfg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::srsran_pucch_cfg_t* ue_cfg_t::unsafe_arena_release_pucch_cfg() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.ue_cfg_t.pucch_cfg)
  
  ::fs::mac_rrc::srsran_pucch_cfg_t* temp = pucch_cfg_;
  pucch_cfg_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::srsran_pucch_cfg_t* ue_cfg_t::_internal_mutable_pucch_cfg() {
  
  if (pucch_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::srsran_pucch_cfg_t>(GetArena());
    pucch_cfg_ = p;
  }
  return pucch_cfg_;
}
inline ::fs::mac_rrc::srsran_pucch_cfg_t* ue_cfg_t::mutable_pucch_cfg() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.ue_cfg_t.pucch_cfg)
  return _internal_mutable_pucch_cfg();
}
inline void ue_cfg_t::set_allocated_pucch_cfg(::fs::mac_rrc::srsran_pucch_cfg_t* pucch_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pucch_cfg_;
  }
  if (pucch_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pucch_cfg);
    if (message_arena != submessage_arena) {
      pucch_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pucch_cfg, submessage_arena);
    }
    
  } else {
    
  }
  pucch_cfg_ = pucch_cfg;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.ue_cfg_t.pucch_cfg)
}

// repeated .fs.mac_rrc.ue_bearer_cfg_t ue_bearers = 5;
inline int ue_cfg_t::_internal_ue_bearers_size() const {
  return ue_bearers_.size();
}
inline int ue_cfg_t::ue_bearers_size() const {
  return _internal_ue_bearers_size();
}
inline void ue_cfg_t::clear_ue_bearers() {
  ue_bearers_.Clear();
}
inline ::fs::mac_rrc::ue_bearer_cfg_t* ue_cfg_t::mutable_ue_bearers(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.ue_cfg_t.ue_bearers)
  return ue_bearers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::ue_bearer_cfg_t >*
ue_cfg_t::mutable_ue_bearers() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.ue_cfg_t.ue_bearers)
  return &ue_bearers_;
}
inline const ::fs::mac_rrc::ue_bearer_cfg_t& ue_cfg_t::_internal_ue_bearers(int index) const {
  return ue_bearers_.Get(index);
}
inline const ::fs::mac_rrc::ue_bearer_cfg_t& ue_cfg_t::ue_bearers(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.ue_bearers)
  return _internal_ue_bearers(index);
}
inline ::fs::mac_rrc::ue_bearer_cfg_t* ue_cfg_t::_internal_add_ue_bearers() {
  return ue_bearers_.Add();
}
inline ::fs::mac_rrc::ue_bearer_cfg_t* ue_cfg_t::add_ue_bearers() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.ue_cfg_t.ue_bearers)
  return _internal_add_ue_bearers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::ue_bearer_cfg_t >&
ue_cfg_t::ue_bearers() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.ue_cfg_t.ue_bearers)
  return ue_bearers_;
}

// repeated .fs.mac_rrc.cc_cfg_t supported_cc_list = 6;
inline int ue_cfg_t::_internal_supported_cc_list_size() const {
  return supported_cc_list_.size();
}
inline int ue_cfg_t::supported_cc_list_size() const {
  return _internal_supported_cc_list_size();
}
inline void ue_cfg_t::clear_supported_cc_list() {
  supported_cc_list_.Clear();
}
inline ::fs::mac_rrc::cc_cfg_t* ue_cfg_t::mutable_supported_cc_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.ue_cfg_t.supported_cc_list)
  return supported_cc_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cc_cfg_t >*
ue_cfg_t::mutable_supported_cc_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_rrc.ue_cfg_t.supported_cc_list)
  return &supported_cc_list_;
}
inline const ::fs::mac_rrc::cc_cfg_t& ue_cfg_t::_internal_supported_cc_list(int index) const {
  return supported_cc_list_.Get(index);
}
inline const ::fs::mac_rrc::cc_cfg_t& ue_cfg_t::supported_cc_list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.supported_cc_list)
  return _internal_supported_cc_list(index);
}
inline ::fs::mac_rrc::cc_cfg_t* ue_cfg_t::_internal_add_supported_cc_list() {
  return supported_cc_list_.Add();
}
inline ::fs::mac_rrc::cc_cfg_t* ue_cfg_t::add_supported_cc_list() {
  // @@protoc_insertion_point(field_add:fs.mac_rrc.ue_cfg_t.supported_cc_list)
  return _internal_add_supported_cc_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_rrc::cc_cfg_t >&
ue_cfg_t::supported_cc_list() const {
  // @@protoc_insertion_point(field_list:fs.mac_rrc.ue_cfg_t.supported_cc_list)
  return supported_cc_list_;
}

// .fs.mac_rrc.ant_info_ded_t dl_ant_info = 7;
inline bool ue_cfg_t::_internal_has_dl_ant_info() const {
  return this != internal_default_instance() && dl_ant_info_ != nullptr;
}
inline bool ue_cfg_t::has_dl_ant_info() const {
  return _internal_has_dl_ant_info();
}
inline void ue_cfg_t::clear_dl_ant_info() {
  if (GetArena() == nullptr && dl_ant_info_ != nullptr) {
    delete dl_ant_info_;
  }
  dl_ant_info_ = nullptr;
}
inline const ::fs::mac_rrc::ant_info_ded_t& ue_cfg_t::_internal_dl_ant_info() const {
  const ::fs::mac_rrc::ant_info_ded_t* p = dl_ant_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_rrc::ant_info_ded_t*>(
      &::fs::mac_rrc::_ant_info_ded_t_default_instance_);
}
inline const ::fs::mac_rrc::ant_info_ded_t& ue_cfg_t::dl_ant_info() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.dl_ant_info)
  return _internal_dl_ant_info();
}
inline void ue_cfg_t::unsafe_arena_set_allocated_dl_ant_info(
    ::fs::mac_rrc::ant_info_ded_t* dl_ant_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_ant_info_);
  }
  dl_ant_info_ = dl_ant_info;
  if (dl_ant_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_rrc.ue_cfg_t.dl_ant_info)
}
inline ::fs::mac_rrc::ant_info_ded_t* ue_cfg_t::release_dl_ant_info() {
  auto temp = unsafe_arena_release_dl_ant_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_rrc::ant_info_ded_t* ue_cfg_t::unsafe_arena_release_dl_ant_info() {
  // @@protoc_insertion_point(field_release:fs.mac_rrc.ue_cfg_t.dl_ant_info)
  
  ::fs::mac_rrc::ant_info_ded_t* temp = dl_ant_info_;
  dl_ant_info_ = nullptr;
  return temp;
}
inline ::fs::mac_rrc::ant_info_ded_t* ue_cfg_t::_internal_mutable_dl_ant_info() {
  
  if (dl_ant_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_rrc::ant_info_ded_t>(GetArena());
    dl_ant_info_ = p;
  }
  return dl_ant_info_;
}
inline ::fs::mac_rrc::ant_info_ded_t* ue_cfg_t::mutable_dl_ant_info() {
  // @@protoc_insertion_point(field_mutable:fs.mac_rrc.ue_cfg_t.dl_ant_info)
  return _internal_mutable_dl_ant_info();
}
inline void ue_cfg_t::set_allocated_dl_ant_info(::fs::mac_rrc::ant_info_ded_t* dl_ant_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dl_ant_info_;
  }
  if (dl_ant_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dl_ant_info);
    if (message_arena != submessage_arena) {
      dl_ant_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl_ant_info, submessage_arena);
    }
    
  } else {
    
  }
  dl_ant_info_ = dl_ant_info;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_rrc.ue_cfg_t.dl_ant_info)
}

// bool use_tbs_index_alt = 8;
inline void ue_cfg_t::clear_use_tbs_index_alt() {
  use_tbs_index_alt_ = false;
}
inline bool ue_cfg_t::_internal_use_tbs_index_alt() const {
  return use_tbs_index_alt_;
}
inline bool ue_cfg_t::use_tbs_index_alt() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.use_tbs_index_alt)
  return _internal_use_tbs_index_alt();
}
inline void ue_cfg_t::_internal_set_use_tbs_index_alt(bool value) {
  
  use_tbs_index_alt_ = value;
}
inline void ue_cfg_t::set_use_tbs_index_alt(bool value) {
  _internal_set_use_tbs_index_alt(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_cfg_t.use_tbs_index_alt)
}

// uint32 measgap_period = 9;
inline void ue_cfg_t::clear_measgap_period() {
  measgap_period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_cfg_t::_internal_measgap_period() const {
  return measgap_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_cfg_t::measgap_period() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.measgap_period)
  return _internal_measgap_period();
}
inline void ue_cfg_t::_internal_set_measgap_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  measgap_period_ = value;
}
inline void ue_cfg_t::set_measgap_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_measgap_period(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_cfg_t.measgap_period)
}

// uint32 measgap_offset = 10;
inline void ue_cfg_t::clear_measgap_offset() {
  measgap_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_cfg_t::_internal_measgap_offset() const {
  return measgap_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ue_cfg_t::measgap_offset() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.measgap_offset)
  return _internal_measgap_offset();
}
inline void ue_cfg_t::_internal_set_measgap_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  measgap_offset_ = value;
}
inline void ue_cfg_t::set_measgap_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_measgap_offset(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_cfg_t.measgap_offset)
}

// .fs.mac_rrc.UL64QAM_CAP support_ul64qam = 11;
inline void ue_cfg_t::clear_support_ul64qam() {
  support_ul64qam_ = 0;
}
inline ::fs::mac_rrc::UL64QAM_CAP ue_cfg_t::_internal_support_ul64qam() const {
  return static_cast< ::fs::mac_rrc::UL64QAM_CAP >(support_ul64qam_);
}
inline ::fs::mac_rrc::UL64QAM_CAP ue_cfg_t::support_ul64qam() const {
  // @@protoc_insertion_point(field_get:fs.mac_rrc.ue_cfg_t.support_ul64qam)
  return _internal_support_ul64qam();
}
inline void ue_cfg_t::_internal_set_support_ul64qam(::fs::mac_rrc::UL64QAM_CAP value) {
  
  support_ul64qam_ = value;
}
inline void ue_cfg_t::set_support_ul64qam(::fs::mac_rrc::UL64QAM_CAP value) {
  _internal_set_support_ul64qam(value);
  // @@protoc_insertion_point(field_set:fs.mac_rrc.ue_cfg_t.support_ul64qam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mac_rrc
}  // namespace fs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fs::mac_rrc::DIRECTION_T> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::DIRECTION_T>() {
  return ::fs::mac_rrc::DIRECTION_T_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_pucch_format_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_pucch_format_t>() {
  return ::fs::mac_rrc::srsran_pucch_format_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t>() {
  return ::fs::mac_rrc::srsran_ack_nack_feedback_mode_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_cqi_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_cqi_type_t>() {
  return ::fs::mac_rrc::srsran_cqi_type_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_tm_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_tm_t>() {
  return ::fs::mac_rrc::srsran_tm_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_mimo_decoder_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_mimo_decoder_t>() {
  return ::fs::mac_rrc::srsran_mimo_decoder_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_mod_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_mod_t>() {
  return ::fs::mac_rrc::srsran_mod_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_tx_scheme_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_tx_scheme_t>() {
  return ::fs::mac_rrc::srsran_tx_scheme_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::srsran_cqi_report_mode_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::srsran_cqi_report_mode_t>() {
  return ::fs::mac_rrc::srsran_cqi_report_mode_t_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::UL64QAM_CAP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::UL64QAM_CAP>() {
  return ::fs::mac_rrc::UL64QAM_CAP_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::TX_MODE_T> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::TX_MODE_T>() {
  return ::fs::mac_rrc::TX_MODE_T_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::CODEBOOK_T> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::CODEBOOK_T>() {
  return ::fs::mac_rrc::CODEBOOK_T_descriptor();
}
template <> struct is_proto_enum< ::fs::mac_rrc::UE_TX_ANT_SEL_T> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::mac_rrc::UE_TX_ANT_SEL_T>() {
  return ::fs::mac_rrc::UE_TX_ANT_SEL_T_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ue_5fcfg_5ft_2eproto
