// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ul_grant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ul_5fgrant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ul_5fgrant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "phy_mac.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ul_5fgrant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ul_5fgrant_2eproto;
namespace fs {
namespace mac_phy {
class raw_buffer;
class raw_bufferDefaultTypeInternal;
extern raw_bufferDefaultTypeInternal _raw_buffer_default_instance_;
class srsran_dci_ul_t;
class srsran_dci_ul_tDefaultTypeInternal;
extern srsran_dci_ul_tDefaultTypeInternal _srsran_dci_ul_t_default_instance_;
class srsran_softbuffer_rx_t;
class srsran_softbuffer_rx_tDefaultTypeInternal;
extern srsran_softbuffer_rx_tDefaultTypeInternal _srsran_softbuffer_rx_t_default_instance_;
class ul_sched_ack_t;
class ul_sched_ack_tDefaultTypeInternal;
extern ul_sched_ack_tDefaultTypeInternal _ul_sched_ack_t_default_instance_;
class ul_sched_grant_t;
class ul_sched_grant_tDefaultTypeInternal;
extern ul_sched_grant_tDefaultTypeInternal _ul_sched_grant_t_default_instance_;
class ul_sched_list_t;
class ul_sched_list_tDefaultTypeInternal;
extern ul_sched_list_tDefaultTypeInternal _ul_sched_list_t_default_instance_;
class ul_sched_t;
class ul_sched_tDefaultTypeInternal;
extern ul_sched_tDefaultTypeInternal _ul_sched_t_default_instance_;
}  // namespace mac_phy
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::mac_phy::raw_buffer* Arena::CreateMaybeMessage<::fs::mac_phy::raw_buffer>(Arena*);
template<> ::fs::mac_phy::srsran_dci_ul_t* Arena::CreateMaybeMessage<::fs::mac_phy::srsran_dci_ul_t>(Arena*);
template<> ::fs::mac_phy::srsran_softbuffer_rx_t* Arena::CreateMaybeMessage<::fs::mac_phy::srsran_softbuffer_rx_t>(Arena*);
template<> ::fs::mac_phy::ul_sched_ack_t* Arena::CreateMaybeMessage<::fs::mac_phy::ul_sched_ack_t>(Arena*);
template<> ::fs::mac_phy::ul_sched_grant_t* Arena::CreateMaybeMessage<::fs::mac_phy::ul_sched_grant_t>(Arena*);
template<> ::fs::mac_phy::ul_sched_list_t* Arena::CreateMaybeMessage<::fs::mac_phy::ul_sched_list_t>(Arena*);
template<> ::fs::mac_phy::ul_sched_t* Arena::CreateMaybeMessage<::fs::mac_phy::ul_sched_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {
namespace mac_phy {

// ===================================================================

class srsran_dci_ul_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.srsran_dci_ul_t) */ {
 public:
  inline srsran_dci_ul_t() : srsran_dci_ul_t(nullptr) {};
  virtual ~srsran_dci_ul_t();

  srsran_dci_ul_t(const srsran_dci_ul_t& from);
  srsran_dci_ul_t(srsran_dci_ul_t&& from) noexcept
    : srsran_dci_ul_t() {
    *this = ::std::move(from);
  }

  inline srsran_dci_ul_t& operator=(const srsran_dci_ul_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_dci_ul_t& operator=(srsran_dci_ul_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_dci_ul_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_dci_ul_t* internal_default_instance() {
    return reinterpret_cast<const srsran_dci_ul_t*>(
               &_srsran_dci_ul_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(srsran_dci_ul_t& a, srsran_dci_ul_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_dci_ul_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_dci_ul_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_dci_ul_t* New() const final {
    return CreateMaybeMessage<srsran_dci_ul_t>(nullptr);
  }

  srsran_dci_ul_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_dci_ul_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_dci_ul_t& from);
  void MergeFrom(const srsran_dci_ul_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_dci_ul_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.srsran_dci_ul_t";
  }
  protected:
  explicit srsran_dci_ul_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 18,
    kType2AllocFieldNumber = 19,
    kTbFieldNumber = 20,
    kCqiRequestFieldNumber = 1,
    kIsTddFieldNumber = 2,
    kCifPresentFieldNumber = 3,
    kMultipleCsiRequestPresentFieldNumber = 4,
    kSrsRequestFieldNumber = 5,
    kSrsRequestPresentFieldNumber = 6,
    kRaTypePresentFieldNumber = 7,
    kRntiFieldNumber = 8,
    kUeCcIdxFieldNumber = 9,
    kNDmrsFieldNumber = 10,
    kDaiFieldNumber = 11,
    kUlIdxFieldNumber = 12,
    kTpcPuschFieldNumber = 13,
    kCifFieldNumber = 14,
    kMultipleCsiRequestFieldNumber = 15,
    kFreqFieldNumber = 16,
    kFormatFieldNumber = 17,
    kRaTypeFieldNumber = 21,
  };
  // .fs.phy_mac.srsran_dci_location_t location = 18;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::fs::phy_mac::srsran_dci_location_t& location() const;
  ::fs::phy_mac::srsran_dci_location_t* release_location();
  ::fs::phy_mac::srsran_dci_location_t* mutable_location();
  void set_allocated_location(::fs::phy_mac::srsran_dci_location_t* location);
  private:
  const ::fs::phy_mac::srsran_dci_location_t& _internal_location() const;
  ::fs::phy_mac::srsran_dci_location_t* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::fs::phy_mac::srsran_dci_location_t* location);
  ::fs::phy_mac::srsran_dci_location_t* unsafe_arena_release_location();

  // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 19;
  bool has_type2_alloc() const;
  private:
  bool _internal_has_type2_alloc() const;
  public:
  void clear_type2_alloc();
  const ::fs::phy_mac::srsran_ra_type2_t& type2_alloc() const;
  ::fs::phy_mac::srsran_ra_type2_t* release_type2_alloc();
  ::fs::phy_mac::srsran_ra_type2_t* mutable_type2_alloc();
  void set_allocated_type2_alloc(::fs::phy_mac::srsran_ra_type2_t* type2_alloc);
  private:
  const ::fs::phy_mac::srsran_ra_type2_t& _internal_type2_alloc() const;
  ::fs::phy_mac::srsran_ra_type2_t* _internal_mutable_type2_alloc();
  public:
  void unsafe_arena_set_allocated_type2_alloc(
      ::fs::phy_mac::srsran_ra_type2_t* type2_alloc);
  ::fs::phy_mac::srsran_ra_type2_t* unsafe_arena_release_type2_alloc();

  // .fs.phy_mac.srsran_dci_tb_t tb = 20;
  bool has_tb() const;
  private:
  bool _internal_has_tb() const;
  public:
  void clear_tb();
  const ::fs::phy_mac::srsran_dci_tb_t& tb() const;
  ::fs::phy_mac::srsran_dci_tb_t* release_tb();
  ::fs::phy_mac::srsran_dci_tb_t* mutable_tb();
  void set_allocated_tb(::fs::phy_mac::srsran_dci_tb_t* tb);
  private:
  const ::fs::phy_mac::srsran_dci_tb_t& _internal_tb() const;
  ::fs::phy_mac::srsran_dci_tb_t* _internal_mutable_tb();
  public:
  void unsafe_arena_set_allocated_tb(
      ::fs::phy_mac::srsran_dci_tb_t* tb);
  ::fs::phy_mac::srsran_dci_tb_t* unsafe_arena_release_tb();

  // bool cqi_request = 1;
  void clear_cqi_request();
  bool cqi_request() const;
  void set_cqi_request(bool value);
  private:
  bool _internal_cqi_request() const;
  void _internal_set_cqi_request(bool value);
  public:

  // bool is_tdd = 2;
  void clear_is_tdd();
  bool is_tdd() const;
  void set_is_tdd(bool value);
  private:
  bool _internal_is_tdd() const;
  void _internal_set_is_tdd(bool value);
  public:

  // bool cif_present = 3;
  void clear_cif_present();
  bool cif_present() const;
  void set_cif_present(bool value);
  private:
  bool _internal_cif_present() const;
  void _internal_set_cif_present(bool value);
  public:

  // bool multiple_csi_request_present = 4;
  void clear_multiple_csi_request_present();
  bool multiple_csi_request_present() const;
  void set_multiple_csi_request_present(bool value);
  private:
  bool _internal_multiple_csi_request_present() const;
  void _internal_set_multiple_csi_request_present(bool value);
  public:

  // bool srs_request = 5;
  void clear_srs_request();
  bool srs_request() const;
  void set_srs_request(bool value);
  private:
  bool _internal_srs_request() const;
  void _internal_set_srs_request(bool value);
  public:

  // bool srs_request_present = 6;
  void clear_srs_request_present();
  bool srs_request_present() const;
  void set_srs_request_present(bool value);
  private:
  bool _internal_srs_request_present() const;
  void _internal_set_srs_request_present(bool value);
  public:

  // bool ra_type_present = 7;
  void clear_ra_type_present();
  bool ra_type_present() const;
  void set_ra_type_present(bool value);
  private:
  bool _internal_ra_type_present() const;
  void _internal_set_ra_type_present(bool value);
  public:

  // uint32 rnti = 8;
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ue_cc_idx = 9;
  void clear_ue_cc_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_cc_idx() const;
  void set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_cc_idx() const;
  void _internal_set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_dmrs = 10;
  void clear_n_dmrs();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_dmrs() const;
  void set_n_dmrs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_dmrs() const;
  void _internal_set_n_dmrs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dai = 11;
  void clear_dai();
  ::PROTOBUF_NAMESPACE_ID::uint32 dai() const;
  void set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dai() const;
  void _internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ul_idx = 12;
  void clear_ul_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_idx() const;
  void set_ul_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_idx() const;
  void _internal_set_ul_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tpc_pusch = 13;
  void clear_tpc_pusch();
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_pusch() const;
  void set_tpc_pusch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tpc_pusch() const;
  void _internal_set_tpc_pusch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cif = 14;
  void clear_cif();
  ::PROTOBUF_NAMESPACE_ID::uint32 cif() const;
  void set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cif() const;
  void _internal_set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 multiple_csi_request = 15;
  void clear_multiple_csi_request();
  ::PROTOBUF_NAMESPACE_ID::uint32 multiple_csi_request() const;
  void set_multiple_csi_request(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multiple_csi_request() const;
  void _internal_set_multiple_csi_request(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 freq = 16;
  void clear_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 freq() const;
  void set_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_freq() const;
  void _internal_set_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 17;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ra_type = 21;
  void clear_ra_type();
  ::PROTOBUF_NAMESPACE_ID::int32 ra_type() const;
  void set_ra_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ra_type() const;
  void _internal_set_ra_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_phy.srsran_dci_ul_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fs::phy_mac::srsran_dci_location_t* location_;
  ::fs::phy_mac::srsran_ra_type2_t* type2_alloc_;
  ::fs::phy_mac::srsran_dci_tb_t* tb_;
  bool cqi_request_;
  bool is_tdd_;
  bool cif_present_;
  bool multiple_csi_request_present_;
  bool srs_request_;
  bool srs_request_present_;
  bool ra_type_present_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_cc_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_dmrs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dai_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_pusch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cif_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multiple_csi_request_;
  ::PROTOBUF_NAMESPACE_ID::int32 freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 ra_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class ul_sched_ack_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.ul_sched_ack_t) */ {
 public:
  inline ul_sched_ack_t() : ul_sched_ack_t(nullptr) {};
  virtual ~ul_sched_ack_t();

  ul_sched_ack_t(const ul_sched_ack_t& from);
  ul_sched_ack_t(ul_sched_ack_t&& from) noexcept
    : ul_sched_ack_t() {
    *this = ::std::move(from);
  }

  inline ul_sched_ack_t& operator=(const ul_sched_ack_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ul_sched_ack_t& operator=(ul_sched_ack_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ul_sched_ack_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ul_sched_ack_t* internal_default_instance() {
    return reinterpret_cast<const ul_sched_ack_t*>(
               &_ul_sched_ack_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ul_sched_ack_t& a, ul_sched_ack_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ul_sched_ack_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ul_sched_ack_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ul_sched_ack_t* New() const final {
    return CreateMaybeMessage<ul_sched_ack_t>(nullptr);
  }

  ul_sched_ack_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ul_sched_ack_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ul_sched_ack_t& from);
  void MergeFrom(const ul_sched_ack_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ul_sched_ack_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.ul_sched_ack_t";
  }
  protected:
  explicit ul_sched_ack_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
    kRntiFieldNumber = 2,
  };
  // bool ack = 1;
  void clear_ack();
  bool ack() const;
  void set_ack(bool value);
  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);
  public:

  // uint32 rnti = 2;
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_phy.ul_sched_ack_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class raw_buffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.raw_buffer) */ {
 public:
  inline raw_buffer() : raw_buffer(nullptr) {};
  virtual ~raw_buffer();

  raw_buffer(const raw_buffer& from);
  raw_buffer(raw_buffer&& from) noexcept
    : raw_buffer() {
    *this = ::std::move(from);
  }

  inline raw_buffer& operator=(const raw_buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline raw_buffer& operator=(raw_buffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const raw_buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const raw_buffer* internal_default_instance() {
    return reinterpret_cast<const raw_buffer*>(
               &_raw_buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(raw_buffer& a, raw_buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(raw_buffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(raw_buffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline raw_buffer* New() const final {
    return CreateMaybeMessage<raw_buffer>(nullptr);
  }

  raw_buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<raw_buffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const raw_buffer& from);
  void MergeFrom(const raw_buffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(raw_buffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.raw_buffer";
  }
  protected:
  explicit raw_buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_phy.raw_buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class srsran_softbuffer_rx_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.srsran_softbuffer_rx_t) */ {
 public:
  inline srsran_softbuffer_rx_t() : srsran_softbuffer_rx_t(nullptr) {};
  virtual ~srsran_softbuffer_rx_t();

  srsran_softbuffer_rx_t(const srsran_softbuffer_rx_t& from);
  srsran_softbuffer_rx_t(srsran_softbuffer_rx_t&& from) noexcept
    : srsran_softbuffer_rx_t() {
    *this = ::std::move(from);
  }

  inline srsran_softbuffer_rx_t& operator=(const srsran_softbuffer_rx_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline srsran_softbuffer_rx_t& operator=(srsran_softbuffer_rx_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const srsran_softbuffer_rx_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srsran_softbuffer_rx_t* internal_default_instance() {
    return reinterpret_cast<const srsran_softbuffer_rx_t*>(
               &_srsran_softbuffer_rx_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(srsran_softbuffer_rx_t& a, srsran_softbuffer_rx_t& b) {
    a.Swap(&b);
  }
  inline void Swap(srsran_softbuffer_rx_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(srsran_softbuffer_rx_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline srsran_softbuffer_rx_t* New() const final {
    return CreateMaybeMessage<srsran_softbuffer_rx_t>(nullptr);
  }

  srsran_softbuffer_rx_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<srsran_softbuffer_rx_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const srsran_softbuffer_rx_t& from);
  void MergeFrom(const srsran_softbuffer_rx_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srsran_softbuffer_rx_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.srsran_softbuffer_rx_t";
  }
  protected:
  explicit srsran_softbuffer_rx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFFieldNumber = 3,
    kDataFieldNumber = 4,
    kCbCrcFieldNumber = 5,
    kMaxCbFieldNumber = 1,
    kMaxCbSizeFieldNumber = 2,
    kTbCrcFieldNumber = 6,
  };
  // repeated .fs.mac_phy.raw_buffer buffer_f = 3;
  int buffer_f_size() const;
  private:
  int _internal_buffer_f_size() const;
  public:
  void clear_buffer_f();
  ::fs::mac_phy::raw_buffer* mutable_buffer_f(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >*
      mutable_buffer_f();
  private:
  const ::fs::mac_phy::raw_buffer& _internal_buffer_f(int index) const;
  ::fs::mac_phy::raw_buffer* _internal_add_buffer_f();
  public:
  const ::fs::mac_phy::raw_buffer& buffer_f(int index) const;
  ::fs::mac_phy::raw_buffer* add_buffer_f();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >&
      buffer_f() const;

  // repeated .fs.mac_phy.raw_buffer data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::fs::mac_phy::raw_buffer* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >*
      mutable_data();
  private:
  const ::fs::mac_phy::raw_buffer& _internal_data(int index) const;
  ::fs::mac_phy::raw_buffer* _internal_add_data();
  public:
  const ::fs::mac_phy::raw_buffer& data(int index) const;
  ::fs::mac_phy::raw_buffer* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >&
      data() const;

  // repeated bool cb_crc = 5;
  int cb_crc_size() const;
  private:
  int _internal_cb_crc_size() const;
  public:
  void clear_cb_crc();
  private:
  bool _internal_cb_crc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_cb_crc() const;
  void _internal_add_cb_crc(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_cb_crc();
  public:
  bool cb_crc(int index) const;
  void set_cb_crc(int index, bool value);
  void add_cb_crc(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      cb_crc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_cb_crc();

  // uint32 max_cb = 1;
  void clear_max_cb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb() const;
  void set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb() const;
  void _internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_cb_size = 2;
  void clear_max_cb_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size() const;
  void set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cb_size() const;
  void _internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool tb_crc = 6;
  void clear_tb_crc();
  bool tb_crc() const;
  void set_tb_crc(bool value);
  private:
  bool _internal_tb_crc() const;
  void _internal_set_tb_crc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_phy.srsran_softbuffer_rx_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer > buffer_f_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > cb_crc_;
  mutable std::atomic<int> _cb_crc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cb_size_;
  bool tb_crc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class ul_sched_grant_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.ul_sched_grant_t) */ {
 public:
  inline ul_sched_grant_t() : ul_sched_grant_t(nullptr) {};
  virtual ~ul_sched_grant_t();

  ul_sched_grant_t(const ul_sched_grant_t& from);
  ul_sched_grant_t(ul_sched_grant_t&& from) noexcept
    : ul_sched_grant_t() {
    *this = ::std::move(from);
  }

  inline ul_sched_grant_t& operator=(const ul_sched_grant_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ul_sched_grant_t& operator=(ul_sched_grant_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ul_sched_grant_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ul_sched_grant_t* internal_default_instance() {
    return reinterpret_cast<const ul_sched_grant_t*>(
               &_ul_sched_grant_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ul_sched_grant_t& a, ul_sched_grant_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ul_sched_grant_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ul_sched_grant_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ul_sched_grant_t* New() const final {
    return CreateMaybeMessage<ul_sched_grant_t>(nullptr);
  }

  ul_sched_grant_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ul_sched_grant_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ul_sched_grant_t& from);
  void MergeFrom(const ul_sched_grant_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ul_sched_grant_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.ul_sched_grant_t";
  }
  protected:
  explicit ul_sched_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kDciFieldNumber = 1,
    kSoftbufferRxFieldNumber = 6,
    kPidFieldNumber = 2,
    kCurrentTxNbFieldNumber = 3,
    kNeedsPdcchFieldNumber = 5,
    kDataLenFieldNumber = 7,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .fs.mac_phy.srsran_dci_ul_t dci = 1;
  bool has_dci() const;
  private:
  bool _internal_has_dci() const;
  public:
  void clear_dci();
  const ::fs::mac_phy::srsran_dci_ul_t& dci() const;
  ::fs::mac_phy::srsran_dci_ul_t* release_dci();
  ::fs::mac_phy::srsran_dci_ul_t* mutable_dci();
  void set_allocated_dci(::fs::mac_phy::srsran_dci_ul_t* dci);
  private:
  const ::fs::mac_phy::srsran_dci_ul_t& _internal_dci() const;
  ::fs::mac_phy::srsran_dci_ul_t* _internal_mutable_dci();
  public:
  void unsafe_arena_set_allocated_dci(
      ::fs::mac_phy::srsran_dci_ul_t* dci);
  ::fs::mac_phy::srsran_dci_ul_t* unsafe_arena_release_dci();

  // .fs.mac_phy.srsran_softbuffer_rx_t softbuffer_rx = 6;
  bool has_softbuffer_rx() const;
  private:
  bool _internal_has_softbuffer_rx() const;
  public:
  void clear_softbuffer_rx();
  const ::fs::mac_phy::srsran_softbuffer_rx_t& softbuffer_rx() const;
  ::fs::mac_phy::srsran_softbuffer_rx_t* release_softbuffer_rx();
  ::fs::mac_phy::srsran_softbuffer_rx_t* mutable_softbuffer_rx();
  void set_allocated_softbuffer_rx(::fs::mac_phy::srsran_softbuffer_rx_t* softbuffer_rx);
  private:
  const ::fs::mac_phy::srsran_softbuffer_rx_t& _internal_softbuffer_rx() const;
  ::fs::mac_phy::srsran_softbuffer_rx_t* _internal_mutable_softbuffer_rx();
  public:
  void unsafe_arena_set_allocated_softbuffer_rx(
      ::fs::mac_phy::srsran_softbuffer_rx_t* softbuffer_rx);
  ::fs::mac_phy::srsran_softbuffer_rx_t* unsafe_arena_release_softbuffer_rx();

  // uint32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 current_tx_nb = 3;
  void clear_current_tx_nb();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_tx_nb() const;
  void set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_tx_nb() const;
  void _internal_set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool needs_pdcch = 5;
  void clear_needs_pdcch();
  bool needs_pdcch() const;
  void set_needs_pdcch(bool value);
  private:
  bool _internal_needs_pdcch() const;
  void _internal_set_needs_pdcch(bool value);
  public:

  // uint32 data_len = 7;
  void clear_data_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_len() const;
  void set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_len() const;
  void _internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_phy.ul_sched_grant_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::fs::mac_phy::srsran_dci_ul_t* dci_;
  ::fs::mac_phy::srsran_softbuffer_rx_t* softbuffer_rx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_tx_nb_;
  bool needs_pdcch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class ul_sched_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.ul_sched_t) */ {
 public:
  inline ul_sched_t() : ul_sched_t(nullptr) {};
  virtual ~ul_sched_t();

  ul_sched_t(const ul_sched_t& from);
  ul_sched_t(ul_sched_t&& from) noexcept
    : ul_sched_t() {
    *this = ::std::move(from);
  }

  inline ul_sched_t& operator=(const ul_sched_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ul_sched_t& operator=(ul_sched_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ul_sched_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ul_sched_t* internal_default_instance() {
    return reinterpret_cast<const ul_sched_t*>(
               &_ul_sched_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ul_sched_t& a, ul_sched_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ul_sched_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ul_sched_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ul_sched_t* New() const final {
    return CreateMaybeMessage<ul_sched_t>(nullptr);
  }

  ul_sched_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ul_sched_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ul_sched_t& from);
  void MergeFrom(const ul_sched_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ul_sched_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.ul_sched_t";
  }
  protected:
  explicit ul_sched_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPuschFieldNumber = 1,
    kPhichFieldNumber = 2,
    kNofGrantsFieldNumber = 3,
    kNofPhichFieldNumber = 4,
  };
  // repeated .fs.mac_phy.ul_sched_grant_t pusch = 1;
  int pusch_size() const;
  private:
  int _internal_pusch_size() const;
  public:
  void clear_pusch();
  ::fs::mac_phy::ul_sched_grant_t* mutable_pusch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_grant_t >*
      mutable_pusch();
  private:
  const ::fs::mac_phy::ul_sched_grant_t& _internal_pusch(int index) const;
  ::fs::mac_phy::ul_sched_grant_t* _internal_add_pusch();
  public:
  const ::fs::mac_phy::ul_sched_grant_t& pusch(int index) const;
  ::fs::mac_phy::ul_sched_grant_t* add_pusch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_grant_t >&
      pusch() const;

  // repeated .fs.mac_phy.ul_sched_ack_t phich = 2;
  int phich_size() const;
  private:
  int _internal_phich_size() const;
  public:
  void clear_phich();
  ::fs::mac_phy::ul_sched_ack_t* mutable_phich(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_ack_t >*
      mutable_phich();
  private:
  const ::fs::mac_phy::ul_sched_ack_t& _internal_phich(int index) const;
  ::fs::mac_phy::ul_sched_ack_t* _internal_add_phich();
  public:
  const ::fs::mac_phy::ul_sched_ack_t& phich(int index) const;
  ::fs::mac_phy::ul_sched_ack_t* add_phich();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_ack_t >&
      phich() const;

  // uint32 nof_grants = 3;
  void clear_nof_grants();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_grants() const;
  void set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_grants() const;
  void _internal_set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nof_phich = 4;
  void clear_nof_phich();
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_phich() const;
  void set_nof_phich(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nof_phich() const;
  void _internal_set_nof_phich(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fs.mac_phy.ul_sched_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_grant_t > pusch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_ack_t > phich_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_grants_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nof_phich_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class ul_sched_list_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.mac_phy.ul_sched_list_t) */ {
 public:
  inline ul_sched_list_t() : ul_sched_list_t(nullptr) {};
  virtual ~ul_sched_list_t();

  ul_sched_list_t(const ul_sched_list_t& from);
  ul_sched_list_t(ul_sched_list_t&& from) noexcept
    : ul_sched_list_t() {
    *this = ::std::move(from);
  }

  inline ul_sched_list_t& operator=(const ul_sched_list_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ul_sched_list_t& operator=(ul_sched_list_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ul_sched_list_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ul_sched_list_t* internal_default_instance() {
    return reinterpret_cast<const ul_sched_list_t*>(
               &_ul_sched_list_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ul_sched_list_t& a, ul_sched_list_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ul_sched_list_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ul_sched_list_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ul_sched_list_t* New() const final {
    return CreateMaybeMessage<ul_sched_list_t>(nullptr);
  }

  ul_sched_list_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ul_sched_list_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ul_sched_list_t& from);
  void MergeFrom(const ul_sched_list_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ul_sched_list_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.mac_phy.ul_sched_list_t";
  }
  protected:
  explicit ul_sched_list_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ul_5fgrant_2eproto);
    return ::descriptor_table_ul_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .fs.mac_phy.ul_sched_t list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::fs::mac_phy::ul_sched_t* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_t >*
      mutable_list();
  private:
  const ::fs::mac_phy::ul_sched_t& _internal_list(int index) const;
  ::fs::mac_phy::ul_sched_t* _internal_add_list();
  public:
  const ::fs::mac_phy::ul_sched_t& list(int index) const;
  ::fs::mac_phy::ul_sched_t* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_t >&
      list() const;

  // @@protoc_insertion_point(class_scope:fs.mac_phy.ul_sched_list_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_t > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ul_5fgrant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// srsran_dci_ul_t

// bool cqi_request = 1;
inline void srsran_dci_ul_t::clear_cqi_request() {
  cqi_request_ = false;
}
inline bool srsran_dci_ul_t::_internal_cqi_request() const {
  return cqi_request_;
}
inline bool srsran_dci_ul_t::cqi_request() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.cqi_request)
  return _internal_cqi_request();
}
inline void srsran_dci_ul_t::_internal_set_cqi_request(bool value) {
  
  cqi_request_ = value;
}
inline void srsran_dci_ul_t::set_cqi_request(bool value) {
  _internal_set_cqi_request(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.cqi_request)
}

// bool is_tdd = 2;
inline void srsran_dci_ul_t::clear_is_tdd() {
  is_tdd_ = false;
}
inline bool srsran_dci_ul_t::_internal_is_tdd() const {
  return is_tdd_;
}
inline bool srsran_dci_ul_t::is_tdd() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.is_tdd)
  return _internal_is_tdd();
}
inline void srsran_dci_ul_t::_internal_set_is_tdd(bool value) {
  
  is_tdd_ = value;
}
inline void srsran_dci_ul_t::set_is_tdd(bool value) {
  _internal_set_is_tdd(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.is_tdd)
}

// bool cif_present = 3;
inline void srsran_dci_ul_t::clear_cif_present() {
  cif_present_ = false;
}
inline bool srsran_dci_ul_t::_internal_cif_present() const {
  return cif_present_;
}
inline bool srsran_dci_ul_t::cif_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.cif_present)
  return _internal_cif_present();
}
inline void srsran_dci_ul_t::_internal_set_cif_present(bool value) {
  
  cif_present_ = value;
}
inline void srsran_dci_ul_t::set_cif_present(bool value) {
  _internal_set_cif_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.cif_present)
}

// bool multiple_csi_request_present = 4;
inline void srsran_dci_ul_t::clear_multiple_csi_request_present() {
  multiple_csi_request_present_ = false;
}
inline bool srsran_dci_ul_t::_internal_multiple_csi_request_present() const {
  return multiple_csi_request_present_;
}
inline bool srsran_dci_ul_t::multiple_csi_request_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.multiple_csi_request_present)
  return _internal_multiple_csi_request_present();
}
inline void srsran_dci_ul_t::_internal_set_multiple_csi_request_present(bool value) {
  
  multiple_csi_request_present_ = value;
}
inline void srsran_dci_ul_t::set_multiple_csi_request_present(bool value) {
  _internal_set_multiple_csi_request_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.multiple_csi_request_present)
}

// bool srs_request = 5;
inline void srsran_dci_ul_t::clear_srs_request() {
  srs_request_ = false;
}
inline bool srsran_dci_ul_t::_internal_srs_request() const {
  return srs_request_;
}
inline bool srsran_dci_ul_t::srs_request() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.srs_request)
  return _internal_srs_request();
}
inline void srsran_dci_ul_t::_internal_set_srs_request(bool value) {
  
  srs_request_ = value;
}
inline void srsran_dci_ul_t::set_srs_request(bool value) {
  _internal_set_srs_request(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.srs_request)
}

// bool srs_request_present = 6;
inline void srsran_dci_ul_t::clear_srs_request_present() {
  srs_request_present_ = false;
}
inline bool srsran_dci_ul_t::_internal_srs_request_present() const {
  return srs_request_present_;
}
inline bool srsran_dci_ul_t::srs_request_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.srs_request_present)
  return _internal_srs_request_present();
}
inline void srsran_dci_ul_t::_internal_set_srs_request_present(bool value) {
  
  srs_request_present_ = value;
}
inline void srsran_dci_ul_t::set_srs_request_present(bool value) {
  _internal_set_srs_request_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.srs_request_present)
}

// bool ra_type_present = 7;
inline void srsran_dci_ul_t::clear_ra_type_present() {
  ra_type_present_ = false;
}
inline bool srsran_dci_ul_t::_internal_ra_type_present() const {
  return ra_type_present_;
}
inline bool srsran_dci_ul_t::ra_type_present() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.ra_type_present)
  return _internal_ra_type_present();
}
inline void srsran_dci_ul_t::_internal_set_ra_type_present(bool value) {
  
  ra_type_present_ = value;
}
inline void srsran_dci_ul_t::set_ra_type_present(bool value) {
  _internal_set_ra_type_present(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.ra_type_present)
}

// uint32 rnti = 8;
inline void srsran_dci_ul_t::clear_rnti() {
  rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::rnti() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.rnti)
  return _internal_rnti();
}
inline void srsran_dci_ul_t::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rnti_ = value;
}
inline void srsran_dci_ul_t::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.rnti)
}

// uint32 ue_cc_idx = 9;
inline void srsran_dci_ul_t::clear_ue_cc_idx() {
  ue_cc_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_ue_cc_idx() const {
  return ue_cc_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::ue_cc_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.ue_cc_idx)
  return _internal_ue_cc_idx();
}
inline void srsran_dci_ul_t::_internal_set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ue_cc_idx_ = value;
}
inline void srsran_dci_ul_t::set_ue_cc_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_cc_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.ue_cc_idx)
}

// uint32 n_dmrs = 10;
inline void srsran_dci_ul_t::clear_n_dmrs() {
  n_dmrs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_n_dmrs() const {
  return n_dmrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::n_dmrs() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.n_dmrs)
  return _internal_n_dmrs();
}
inline void srsran_dci_ul_t::_internal_set_n_dmrs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_dmrs_ = value;
}
inline void srsran_dci_ul_t::set_n_dmrs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_dmrs(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.n_dmrs)
}

// uint32 dai = 11;
inline void srsran_dci_ul_t::clear_dai() {
  dai_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_dai() const {
  return dai_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::dai() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.dai)
  return _internal_dai();
}
inline void srsran_dci_ul_t::_internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dai_ = value;
}
inline void srsran_dci_ul_t::set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dai(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.dai)
}

// uint32 ul_idx = 12;
inline void srsran_dci_ul_t::clear_ul_idx() {
  ul_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_ul_idx() const {
  return ul_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::ul_idx() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.ul_idx)
  return _internal_ul_idx();
}
inline void srsran_dci_ul_t::_internal_set_ul_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ul_idx_ = value;
}
inline void srsran_dci_ul_t::set_ul_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ul_idx(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.ul_idx)
}

// uint32 tpc_pusch = 13;
inline void srsran_dci_ul_t::clear_tpc_pusch() {
  tpc_pusch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_tpc_pusch() const {
  return tpc_pusch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::tpc_pusch() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.tpc_pusch)
  return _internal_tpc_pusch();
}
inline void srsran_dci_ul_t::_internal_set_tpc_pusch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tpc_pusch_ = value;
}
inline void srsran_dci_ul_t::set_tpc_pusch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tpc_pusch(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.tpc_pusch)
}

// uint32 cif = 14;
inline void srsran_dci_ul_t::clear_cif() {
  cif_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_cif() const {
  return cif_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::cif() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.cif)
  return _internal_cif();
}
inline void srsran_dci_ul_t::_internal_set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cif_ = value;
}
inline void srsran_dci_ul_t::set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cif(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.cif)
}

// uint32 multiple_csi_request = 15;
inline void srsran_dci_ul_t::clear_multiple_csi_request() {
  multiple_csi_request_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::_internal_multiple_csi_request() const {
  return multiple_csi_request_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_dci_ul_t::multiple_csi_request() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.multiple_csi_request)
  return _internal_multiple_csi_request();
}
inline void srsran_dci_ul_t::_internal_set_multiple_csi_request(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  multiple_csi_request_ = value;
}
inline void srsran_dci_ul_t::set_multiple_csi_request(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multiple_csi_request(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.multiple_csi_request)
}

// int32 freq = 16;
inline void srsran_dci_ul_t::clear_freq() {
  freq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_ul_t::_internal_freq() const {
  return freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_ul_t::freq() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.freq)
  return _internal_freq();
}
inline void srsran_dci_ul_t::_internal_set_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  freq_ = value;
}
inline void srsran_dci_ul_t::set_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.freq)
}

// int32 format = 17;
inline void srsran_dci_ul_t::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_ul_t::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_ul_t::format() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.format)
  return _internal_format();
}
inline void srsran_dci_ul_t::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void srsran_dci_ul_t::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.format)
}

// .fs.phy_mac.srsran_dci_location_t location = 18;
inline bool srsran_dci_ul_t::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool srsran_dci_ul_t::has_location() const {
  return _internal_has_location();
}
inline const ::fs::phy_mac::srsran_dci_location_t& srsran_dci_ul_t::_internal_location() const {
  const ::fs::phy_mac::srsran_dci_location_t* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_dci_location_t*>(
      &::fs::phy_mac::_srsran_dci_location_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_dci_location_t& srsran_dci_ul_t::location() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.location)
  return _internal_location();
}
inline void srsran_dci_ul_t::unsafe_arena_set_allocated_location(
    ::fs::phy_mac::srsran_dci_location_t* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.srsran_dci_ul_t.location)
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_ul_t::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_ul_t::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.srsran_dci_ul_t.location)
  
  ::fs::phy_mac::srsran_dci_location_t* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_ul_t::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_dci_location_t>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::fs::phy_mac::srsran_dci_location_t* srsran_dci_ul_t::mutable_location() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.srsran_dci_ul_t.location)
  return _internal_mutable_location();
}
inline void srsran_dci_ul_t::set_allocated_location(::fs::phy_mac::srsran_dci_location_t* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.srsran_dci_ul_t.location)
}

// .fs.phy_mac.srsran_ra_type2_t type2_alloc = 19;
inline bool srsran_dci_ul_t::_internal_has_type2_alloc() const {
  return this != internal_default_instance() && type2_alloc_ != nullptr;
}
inline bool srsran_dci_ul_t::has_type2_alloc() const {
  return _internal_has_type2_alloc();
}
inline const ::fs::phy_mac::srsran_ra_type2_t& srsran_dci_ul_t::_internal_type2_alloc() const {
  const ::fs::phy_mac::srsran_ra_type2_t* p = type2_alloc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_ra_type2_t*>(
      &::fs::phy_mac::_srsran_ra_type2_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_ra_type2_t& srsran_dci_ul_t::type2_alloc() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.type2_alloc)
  return _internal_type2_alloc();
}
inline void srsran_dci_ul_t::unsafe_arena_set_allocated_type2_alloc(
    ::fs::phy_mac::srsran_ra_type2_t* type2_alloc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type2_alloc_);
  }
  type2_alloc_ = type2_alloc;
  if (type2_alloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.srsran_dci_ul_t.type2_alloc)
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_ul_t::release_type2_alloc() {
  auto temp = unsafe_arena_release_type2_alloc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_ul_t::unsafe_arena_release_type2_alloc() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.srsran_dci_ul_t.type2_alloc)
  
  ::fs::phy_mac::srsran_ra_type2_t* temp = type2_alloc_;
  type2_alloc_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_ul_t::_internal_mutable_type2_alloc() {
  
  if (type2_alloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_ra_type2_t>(GetArena());
    type2_alloc_ = p;
  }
  return type2_alloc_;
}
inline ::fs::phy_mac::srsran_ra_type2_t* srsran_dci_ul_t::mutable_type2_alloc() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.srsran_dci_ul_t.type2_alloc)
  return _internal_mutable_type2_alloc();
}
inline void srsran_dci_ul_t::set_allocated_type2_alloc(::fs::phy_mac::srsran_ra_type2_t* type2_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type2_alloc_);
  }
  if (type2_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type2_alloc)->GetArena();
    if (message_arena != submessage_arena) {
      type2_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type2_alloc, submessage_arena);
    }
    
  } else {
    
  }
  type2_alloc_ = type2_alloc;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.srsran_dci_ul_t.type2_alloc)
}

// .fs.phy_mac.srsran_dci_tb_t tb = 20;
inline bool srsran_dci_ul_t::_internal_has_tb() const {
  return this != internal_default_instance() && tb_ != nullptr;
}
inline bool srsran_dci_ul_t::has_tb() const {
  return _internal_has_tb();
}
inline const ::fs::phy_mac::srsran_dci_tb_t& srsran_dci_ul_t::_internal_tb() const {
  const ::fs::phy_mac::srsran_dci_tb_t* p = tb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::phy_mac::srsran_dci_tb_t*>(
      &::fs::phy_mac::_srsran_dci_tb_t_default_instance_);
}
inline const ::fs::phy_mac::srsran_dci_tb_t& srsran_dci_ul_t::tb() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.tb)
  return _internal_tb();
}
inline void srsran_dci_ul_t::unsafe_arena_set_allocated_tb(
    ::fs::phy_mac::srsran_dci_tb_t* tb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tb_);
  }
  tb_ = tb;
  if (tb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.srsran_dci_ul_t.tb)
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_ul_t::release_tb() {
  auto temp = unsafe_arena_release_tb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_ul_t::unsafe_arena_release_tb() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.srsran_dci_ul_t.tb)
  
  ::fs::phy_mac::srsran_dci_tb_t* temp = tb_;
  tb_ = nullptr;
  return temp;
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_ul_t::_internal_mutable_tb() {
  
  if (tb_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::phy_mac::srsran_dci_tb_t>(GetArena());
    tb_ = p;
  }
  return tb_;
}
inline ::fs::phy_mac::srsran_dci_tb_t* srsran_dci_ul_t::mutable_tb() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.srsran_dci_ul_t.tb)
  return _internal_mutable_tb();
}
inline void srsran_dci_ul_t::set_allocated_tb(::fs::phy_mac::srsran_dci_tb_t* tb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tb_);
  }
  if (tb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tb)->GetArena();
    if (message_arena != submessage_arena) {
      tb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tb, submessage_arena);
    }
    
  } else {
    
  }
  tb_ = tb;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.srsran_dci_ul_t.tb)
}

// int32 ra_type = 21;
inline void srsran_dci_ul_t::clear_ra_type() {
  ra_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_ul_t::_internal_ra_type() const {
  return ra_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 srsran_dci_ul_t::ra_type() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_dci_ul_t.ra_type)
  return _internal_ra_type();
}
inline void srsran_dci_ul_t::_internal_set_ra_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ra_type_ = value;
}
inline void srsran_dci_ul_t::set_ra_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ra_type(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_dci_ul_t.ra_type)
}

// -------------------------------------------------------------------

// ul_sched_ack_t

// bool ack = 1;
inline void ul_sched_ack_t::clear_ack() {
  ack_ = false;
}
inline bool ul_sched_ack_t::_internal_ack() const {
  return ack_;
}
inline bool ul_sched_ack_t::ack() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_ack_t.ack)
  return _internal_ack();
}
inline void ul_sched_ack_t::_internal_set_ack(bool value) {
  
  ack_ = value;
}
inline void ul_sched_ack_t::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_ack_t.ack)
}

// uint32 rnti = 2;
inline void ul_sched_ack_t::clear_rnti() {
  rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_ack_t::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_ack_t::rnti() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_ack_t.rnti)
  return _internal_rnti();
}
inline void ul_sched_ack_t::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rnti_ = value;
}
inline void ul_sched_ack_t::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_ack_t.rnti)
}

// -------------------------------------------------------------------

// raw_buffer

// bytes data = 1;
inline void raw_buffer::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& raw_buffer::data() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.raw_buffer.data)
  return _internal_data();
}
inline void raw_buffer::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.raw_buffer.data)
}
inline std::string* raw_buffer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.raw_buffer.data)
  return _internal_mutable_data();
}
inline const std::string& raw_buffer::_internal_data() const {
  return data_.Get();
}
inline void raw_buffer::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void raw_buffer::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fs.mac_phy.raw_buffer.data)
}
inline void raw_buffer::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fs.mac_phy.raw_buffer.data)
}
inline void raw_buffer::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fs.mac_phy.raw_buffer.data)
}
inline std::string* raw_buffer::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* raw_buffer::release_data() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.raw_buffer.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void raw_buffer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.raw_buffer.data)
}
inline std::string* raw_buffer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fs.mac_phy.raw_buffer.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void raw_buffer::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.raw_buffer.data)
}

// -------------------------------------------------------------------

// srsran_softbuffer_rx_t

// uint32 max_cb = 1;
inline void srsran_softbuffer_rx_t::clear_max_cb() {
  max_cb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::_internal_max_cb() const {
  return max_cb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::max_cb() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_softbuffer_rx_t.max_cb)
  return _internal_max_cb();
}
inline void srsran_softbuffer_rx_t::_internal_set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_ = value;
}
inline void srsran_softbuffer_rx_t::set_max_cb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_softbuffer_rx_t.max_cb)
}

// uint32 max_cb_size = 2;
inline void srsran_softbuffer_rx_t::clear_max_cb_size() {
  max_cb_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::_internal_max_cb_size() const {
  return max_cb_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 srsran_softbuffer_rx_t::max_cb_size() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_softbuffer_rx_t.max_cb_size)
  return _internal_max_cb_size();
}
inline void srsran_softbuffer_rx_t::_internal_set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cb_size_ = value;
}
inline void srsran_softbuffer_rx_t::set_max_cb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cb_size(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_softbuffer_rx_t.max_cb_size)
}

// repeated .fs.mac_phy.raw_buffer buffer_f = 3;
inline int srsran_softbuffer_rx_t::_internal_buffer_f_size() const {
  return buffer_f_.size();
}
inline int srsran_softbuffer_rx_t::buffer_f_size() const {
  return _internal_buffer_f_size();
}
inline void srsran_softbuffer_rx_t::clear_buffer_f() {
  buffer_f_.Clear();
}
inline ::fs::mac_phy::raw_buffer* srsran_softbuffer_rx_t::mutable_buffer_f(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.srsran_softbuffer_rx_t.buffer_f)
  return buffer_f_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >*
srsran_softbuffer_rx_t::mutable_buffer_f() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_phy.srsran_softbuffer_rx_t.buffer_f)
  return &buffer_f_;
}
inline const ::fs::mac_phy::raw_buffer& srsran_softbuffer_rx_t::_internal_buffer_f(int index) const {
  return buffer_f_.Get(index);
}
inline const ::fs::mac_phy::raw_buffer& srsran_softbuffer_rx_t::buffer_f(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_softbuffer_rx_t.buffer_f)
  return _internal_buffer_f(index);
}
inline ::fs::mac_phy::raw_buffer* srsran_softbuffer_rx_t::_internal_add_buffer_f() {
  return buffer_f_.Add();
}
inline ::fs::mac_phy::raw_buffer* srsran_softbuffer_rx_t::add_buffer_f() {
  // @@protoc_insertion_point(field_add:fs.mac_phy.srsran_softbuffer_rx_t.buffer_f)
  return _internal_add_buffer_f();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >&
srsran_softbuffer_rx_t::buffer_f() const {
  // @@protoc_insertion_point(field_list:fs.mac_phy.srsran_softbuffer_rx_t.buffer_f)
  return buffer_f_;
}

// repeated .fs.mac_phy.raw_buffer data = 4;
inline int srsran_softbuffer_rx_t::_internal_data_size() const {
  return data_.size();
}
inline int srsran_softbuffer_rx_t::data_size() const {
  return _internal_data_size();
}
inline void srsran_softbuffer_rx_t::clear_data() {
  data_.Clear();
}
inline ::fs::mac_phy::raw_buffer* srsran_softbuffer_rx_t::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.srsran_softbuffer_rx_t.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >*
srsran_softbuffer_rx_t::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_phy.srsran_softbuffer_rx_t.data)
  return &data_;
}
inline const ::fs::mac_phy::raw_buffer& srsran_softbuffer_rx_t::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::fs::mac_phy::raw_buffer& srsran_softbuffer_rx_t::data(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_softbuffer_rx_t.data)
  return _internal_data(index);
}
inline ::fs::mac_phy::raw_buffer* srsran_softbuffer_rx_t::_internal_add_data() {
  return data_.Add();
}
inline ::fs::mac_phy::raw_buffer* srsran_softbuffer_rx_t::add_data() {
  // @@protoc_insertion_point(field_add:fs.mac_phy.srsran_softbuffer_rx_t.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::raw_buffer >&
srsran_softbuffer_rx_t::data() const {
  // @@protoc_insertion_point(field_list:fs.mac_phy.srsran_softbuffer_rx_t.data)
  return data_;
}

// repeated bool cb_crc = 5;
inline int srsran_softbuffer_rx_t::_internal_cb_crc_size() const {
  return cb_crc_.size();
}
inline int srsran_softbuffer_rx_t::cb_crc_size() const {
  return _internal_cb_crc_size();
}
inline void srsran_softbuffer_rx_t::clear_cb_crc() {
  cb_crc_.Clear();
}
inline bool srsran_softbuffer_rx_t::_internal_cb_crc(int index) const {
  return cb_crc_.Get(index);
}
inline bool srsran_softbuffer_rx_t::cb_crc(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_softbuffer_rx_t.cb_crc)
  return _internal_cb_crc(index);
}
inline void srsran_softbuffer_rx_t::set_cb_crc(int index, bool value) {
  cb_crc_.Set(index, value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_softbuffer_rx_t.cb_crc)
}
inline void srsran_softbuffer_rx_t::_internal_add_cb_crc(bool value) {
  cb_crc_.Add(value);
}
inline void srsran_softbuffer_rx_t::add_cb_crc(bool value) {
  _internal_add_cb_crc(value);
  // @@protoc_insertion_point(field_add:fs.mac_phy.srsran_softbuffer_rx_t.cb_crc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_softbuffer_rx_t::_internal_cb_crc() const {
  return cb_crc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
srsran_softbuffer_rx_t::cb_crc() const {
  // @@protoc_insertion_point(field_list:fs.mac_phy.srsran_softbuffer_rx_t.cb_crc)
  return _internal_cb_crc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_softbuffer_rx_t::_internal_mutable_cb_crc() {
  return &cb_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
srsran_softbuffer_rx_t::mutable_cb_crc() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_phy.srsran_softbuffer_rx_t.cb_crc)
  return _internal_mutable_cb_crc();
}

// bool tb_crc = 6;
inline void srsran_softbuffer_rx_t::clear_tb_crc() {
  tb_crc_ = false;
}
inline bool srsran_softbuffer_rx_t::_internal_tb_crc() const {
  return tb_crc_;
}
inline bool srsran_softbuffer_rx_t::tb_crc() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.srsran_softbuffer_rx_t.tb_crc)
  return _internal_tb_crc();
}
inline void srsran_softbuffer_rx_t::_internal_set_tb_crc(bool value) {
  
  tb_crc_ = value;
}
inline void srsran_softbuffer_rx_t::set_tb_crc(bool value) {
  _internal_set_tb_crc(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.srsran_softbuffer_rx_t.tb_crc)
}

// -------------------------------------------------------------------

// ul_sched_grant_t

// .fs.mac_phy.srsran_dci_ul_t dci = 1;
inline bool ul_sched_grant_t::_internal_has_dci() const {
  return this != internal_default_instance() && dci_ != nullptr;
}
inline bool ul_sched_grant_t::has_dci() const {
  return _internal_has_dci();
}
inline void ul_sched_grant_t::clear_dci() {
  if (GetArena() == nullptr && dci_ != nullptr) {
    delete dci_;
  }
  dci_ = nullptr;
}
inline const ::fs::mac_phy::srsran_dci_ul_t& ul_sched_grant_t::_internal_dci() const {
  const ::fs::mac_phy::srsran_dci_ul_t* p = dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_phy::srsran_dci_ul_t*>(
      &::fs::mac_phy::_srsran_dci_ul_t_default_instance_);
}
inline const ::fs::mac_phy::srsran_dci_ul_t& ul_sched_grant_t::dci() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.dci)
  return _internal_dci();
}
inline void ul_sched_grant_t::unsafe_arena_set_allocated_dci(
    ::fs::mac_phy::srsran_dci_ul_t* dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dci_);
  }
  dci_ = dci;
  if (dci) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.ul_sched_grant_t.dci)
}
inline ::fs::mac_phy::srsran_dci_ul_t* ul_sched_grant_t::release_dci() {
  auto temp = unsafe_arena_release_dci();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_phy::srsran_dci_ul_t* ul_sched_grant_t::unsafe_arena_release_dci() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.ul_sched_grant_t.dci)
  
  ::fs::mac_phy::srsran_dci_ul_t* temp = dci_;
  dci_ = nullptr;
  return temp;
}
inline ::fs::mac_phy::srsran_dci_ul_t* ul_sched_grant_t::_internal_mutable_dci() {
  
  if (dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_phy::srsran_dci_ul_t>(GetArena());
    dci_ = p;
  }
  return dci_;
}
inline ::fs::mac_phy::srsran_dci_ul_t* ul_sched_grant_t::mutable_dci() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.ul_sched_grant_t.dci)
  return _internal_mutable_dci();
}
inline void ul_sched_grant_t::set_allocated_dci(::fs::mac_phy::srsran_dci_ul_t* dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dci_;
  }
  if (dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dci);
    if (message_arena != submessage_arena) {
      dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dci, submessage_arena);
    }
    
  } else {
    
  }
  dci_ = dci;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.ul_sched_grant_t.dci)
}

// uint32 pid = 2;
inline void ul_sched_grant_t::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_grant_t::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_grant_t::pid() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.pid)
  return _internal_pid();
}
inline void ul_sched_grant_t::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void ul_sched_grant_t::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_grant_t.pid)
}

// uint32 current_tx_nb = 3;
inline void ul_sched_grant_t::clear_current_tx_nb() {
  current_tx_nb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_grant_t::_internal_current_tx_nb() const {
  return current_tx_nb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_grant_t::current_tx_nb() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.current_tx_nb)
  return _internal_current_tx_nb();
}
inline void ul_sched_grant_t::_internal_set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_tx_nb_ = value;
}
inline void ul_sched_grant_t::set_current_tx_nb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_tx_nb(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_grant_t.current_tx_nb)
}

// bytes data = 4;
inline void ul_sched_grant_t::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ul_sched_grant_t::data() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.data)
  return _internal_data();
}
inline void ul_sched_grant_t::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_grant_t.data)
}
inline std::string* ul_sched_grant_t::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.ul_sched_grant_t.data)
  return _internal_mutable_data();
}
inline const std::string& ul_sched_grant_t::_internal_data() const {
  return data_.Get();
}
inline void ul_sched_grant_t::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ul_sched_grant_t::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fs.mac_phy.ul_sched_grant_t.data)
}
inline void ul_sched_grant_t::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fs.mac_phy.ul_sched_grant_t.data)
}
inline void ul_sched_grant_t::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fs.mac_phy.ul_sched_grant_t.data)
}
inline std::string* ul_sched_grant_t::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ul_sched_grant_t::release_data() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.ul_sched_grant_t.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ul_sched_grant_t::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.ul_sched_grant_t.data)
}
inline std::string* ul_sched_grant_t::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fs.mac_phy.ul_sched_grant_t.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ul_sched_grant_t::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.ul_sched_grant_t.data)
}

// bool needs_pdcch = 5;
inline void ul_sched_grant_t::clear_needs_pdcch() {
  needs_pdcch_ = false;
}
inline bool ul_sched_grant_t::_internal_needs_pdcch() const {
  return needs_pdcch_;
}
inline bool ul_sched_grant_t::needs_pdcch() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.needs_pdcch)
  return _internal_needs_pdcch();
}
inline void ul_sched_grant_t::_internal_set_needs_pdcch(bool value) {
  
  needs_pdcch_ = value;
}
inline void ul_sched_grant_t::set_needs_pdcch(bool value) {
  _internal_set_needs_pdcch(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_grant_t.needs_pdcch)
}

// .fs.mac_phy.srsran_softbuffer_rx_t softbuffer_rx = 6;
inline bool ul_sched_grant_t::_internal_has_softbuffer_rx() const {
  return this != internal_default_instance() && softbuffer_rx_ != nullptr;
}
inline bool ul_sched_grant_t::has_softbuffer_rx() const {
  return _internal_has_softbuffer_rx();
}
inline void ul_sched_grant_t::clear_softbuffer_rx() {
  if (GetArena() == nullptr && softbuffer_rx_ != nullptr) {
    delete softbuffer_rx_;
  }
  softbuffer_rx_ = nullptr;
}
inline const ::fs::mac_phy::srsran_softbuffer_rx_t& ul_sched_grant_t::_internal_softbuffer_rx() const {
  const ::fs::mac_phy::srsran_softbuffer_rx_t* p = softbuffer_rx_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fs::mac_phy::srsran_softbuffer_rx_t*>(
      &::fs::mac_phy::_srsran_softbuffer_rx_t_default_instance_);
}
inline const ::fs::mac_phy::srsran_softbuffer_rx_t& ul_sched_grant_t::softbuffer_rx() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.softbuffer_rx)
  return _internal_softbuffer_rx();
}
inline void ul_sched_grant_t::unsafe_arena_set_allocated_softbuffer_rx(
    ::fs::mac_phy::srsran_softbuffer_rx_t* softbuffer_rx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softbuffer_rx_);
  }
  softbuffer_rx_ = softbuffer_rx;
  if (softbuffer_rx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.mac_phy.ul_sched_grant_t.softbuffer_rx)
}
inline ::fs::mac_phy::srsran_softbuffer_rx_t* ul_sched_grant_t::release_softbuffer_rx() {
  auto temp = unsafe_arena_release_softbuffer_rx();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fs::mac_phy::srsran_softbuffer_rx_t* ul_sched_grant_t::unsafe_arena_release_softbuffer_rx() {
  // @@protoc_insertion_point(field_release:fs.mac_phy.ul_sched_grant_t.softbuffer_rx)
  
  ::fs::mac_phy::srsran_softbuffer_rx_t* temp = softbuffer_rx_;
  softbuffer_rx_ = nullptr;
  return temp;
}
inline ::fs::mac_phy::srsran_softbuffer_rx_t* ul_sched_grant_t::_internal_mutable_softbuffer_rx() {
  
  if (softbuffer_rx_ == nullptr) {
    auto* p = CreateMaybeMessage<::fs::mac_phy::srsran_softbuffer_rx_t>(GetArena());
    softbuffer_rx_ = p;
  }
  return softbuffer_rx_;
}
inline ::fs::mac_phy::srsran_softbuffer_rx_t* ul_sched_grant_t::mutable_softbuffer_rx() {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.ul_sched_grant_t.softbuffer_rx)
  return _internal_mutable_softbuffer_rx();
}
inline void ul_sched_grant_t::set_allocated_softbuffer_rx(::fs::mac_phy::srsran_softbuffer_rx_t* softbuffer_rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete softbuffer_rx_;
  }
  if (softbuffer_rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softbuffer_rx);
    if (message_arena != submessage_arena) {
      softbuffer_rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softbuffer_rx, submessage_arena);
    }
    
  } else {
    
  }
  softbuffer_rx_ = softbuffer_rx;
  // @@protoc_insertion_point(field_set_allocated:fs.mac_phy.ul_sched_grant_t.softbuffer_rx)
}

// uint32 data_len = 7;
inline void ul_sched_grant_t::clear_data_len() {
  data_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_grant_t::_internal_data_len() const {
  return data_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_grant_t::data_len() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_grant_t.data_len)
  return _internal_data_len();
}
inline void ul_sched_grant_t::_internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_len_ = value;
}
inline void ul_sched_grant_t::set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_len(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_grant_t.data_len)
}

// -------------------------------------------------------------------

// ul_sched_t

// repeated .fs.mac_phy.ul_sched_grant_t pusch = 1;
inline int ul_sched_t::_internal_pusch_size() const {
  return pusch_.size();
}
inline int ul_sched_t::pusch_size() const {
  return _internal_pusch_size();
}
inline void ul_sched_t::clear_pusch() {
  pusch_.Clear();
}
inline ::fs::mac_phy::ul_sched_grant_t* ul_sched_t::mutable_pusch(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.ul_sched_t.pusch)
  return pusch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_grant_t >*
ul_sched_t::mutable_pusch() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_phy.ul_sched_t.pusch)
  return &pusch_;
}
inline const ::fs::mac_phy::ul_sched_grant_t& ul_sched_t::_internal_pusch(int index) const {
  return pusch_.Get(index);
}
inline const ::fs::mac_phy::ul_sched_grant_t& ul_sched_t::pusch(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_t.pusch)
  return _internal_pusch(index);
}
inline ::fs::mac_phy::ul_sched_grant_t* ul_sched_t::_internal_add_pusch() {
  return pusch_.Add();
}
inline ::fs::mac_phy::ul_sched_grant_t* ul_sched_t::add_pusch() {
  // @@protoc_insertion_point(field_add:fs.mac_phy.ul_sched_t.pusch)
  return _internal_add_pusch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_grant_t >&
ul_sched_t::pusch() const {
  // @@protoc_insertion_point(field_list:fs.mac_phy.ul_sched_t.pusch)
  return pusch_;
}

// repeated .fs.mac_phy.ul_sched_ack_t phich = 2;
inline int ul_sched_t::_internal_phich_size() const {
  return phich_.size();
}
inline int ul_sched_t::phich_size() const {
  return _internal_phich_size();
}
inline void ul_sched_t::clear_phich() {
  phich_.Clear();
}
inline ::fs::mac_phy::ul_sched_ack_t* ul_sched_t::mutable_phich(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.ul_sched_t.phich)
  return phich_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_ack_t >*
ul_sched_t::mutable_phich() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_phy.ul_sched_t.phich)
  return &phich_;
}
inline const ::fs::mac_phy::ul_sched_ack_t& ul_sched_t::_internal_phich(int index) const {
  return phich_.Get(index);
}
inline const ::fs::mac_phy::ul_sched_ack_t& ul_sched_t::phich(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_t.phich)
  return _internal_phich(index);
}
inline ::fs::mac_phy::ul_sched_ack_t* ul_sched_t::_internal_add_phich() {
  return phich_.Add();
}
inline ::fs::mac_phy::ul_sched_ack_t* ul_sched_t::add_phich() {
  // @@protoc_insertion_point(field_add:fs.mac_phy.ul_sched_t.phich)
  return _internal_add_phich();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_ack_t >&
ul_sched_t::phich() const {
  // @@protoc_insertion_point(field_list:fs.mac_phy.ul_sched_t.phich)
  return phich_;
}

// uint32 nof_grants = 3;
inline void ul_sched_t::clear_nof_grants() {
  nof_grants_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_t::_internal_nof_grants() const {
  return nof_grants_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_t::nof_grants() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_t.nof_grants)
  return _internal_nof_grants();
}
inline void ul_sched_t::_internal_set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_grants_ = value;
}
inline void ul_sched_t::set_nof_grants(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_grants(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_t.nof_grants)
}

// uint32 nof_phich = 4;
inline void ul_sched_t::clear_nof_phich() {
  nof_phich_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_t::_internal_nof_phich() const {
  return nof_phich_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ul_sched_t::nof_phich() const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_t.nof_phich)
  return _internal_nof_phich();
}
inline void ul_sched_t::_internal_set_nof_phich(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nof_phich_ = value;
}
inline void ul_sched_t::set_nof_phich(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nof_phich(value);
  // @@protoc_insertion_point(field_set:fs.mac_phy.ul_sched_t.nof_phich)
}

// -------------------------------------------------------------------

// ul_sched_list_t

// repeated .fs.mac_phy.ul_sched_t list = 1;
inline int ul_sched_list_t::_internal_list_size() const {
  return list_.size();
}
inline int ul_sched_list_t::list_size() const {
  return _internal_list_size();
}
inline void ul_sched_list_t::clear_list() {
  list_.Clear();
}
inline ::fs::mac_phy::ul_sched_t* ul_sched_list_t::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:fs.mac_phy.ul_sched_list_t.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_t >*
ul_sched_list_t::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:fs.mac_phy.ul_sched_list_t.list)
  return &list_;
}
inline const ::fs::mac_phy::ul_sched_t& ul_sched_list_t::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::fs::mac_phy::ul_sched_t& ul_sched_list_t::list(int index) const {
  // @@protoc_insertion_point(field_get:fs.mac_phy.ul_sched_list_t.list)
  return _internal_list(index);
}
inline ::fs::mac_phy::ul_sched_t* ul_sched_list_t::_internal_add_list() {
  return list_.Add();
}
inline ::fs::mac_phy::ul_sched_t* ul_sched_list_t::add_list() {
  // @@protoc_insertion_point(field_add:fs.mac_phy.ul_sched_list_t.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fs::mac_phy::ul_sched_t >&
ul_sched_list_t::list() const {
  // @@protoc_insertion_point(field_list:fs.mac_phy.ul_sched_list_t.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mac_phy
}  // namespace fs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ul_5fgrant_2eproto
