// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: as_security_config_t.proto

#include "srsenb/hdr/funsplit_proto/as_security_config_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_as_5fsecurity_5fconfig_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto;
namespace fs {
namespace pdcp_rrc {
class as_key_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<as_key_t> _instance;
} _as_key_t_default_instance_;
class as_security_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<as_security_config_t> _instance;
} _as_security_config_t_default_instance_;
}  // namespace pdcp_rrc
}  // namespace fs
static void InitDefaultsscc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::pdcp_rrc::_as_key_t_default_instance_;
    new (ptr) ::fs::pdcp_rrc::as_key_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::pdcp_rrc::as_key_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto}, {}};

static void InitDefaultsscc_info_as_security_config_t_as_5fsecurity_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::pdcp_rrc::_as_security_config_t_default_instance_;
    new (ptr) ::fs::pdcp_rrc::as_security_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::pdcp_rrc::as_security_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_as_security_config_t_as_5fsecurity_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_as_security_config_t_as_5fsecurity_5fconfig_5ft_2eproto}, {
      &scc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_as_5fsecurity_5fconfig_5ft_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_as_5fsecurity_5fconfig_5ft_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_as_5fsecurity_5fconfig_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_as_5fsecurity_5fconfig_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_key_t, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, k_rrc_int_),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, k_rrc_enc_),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, k_up_int_),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, k_up_enc_),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, integ_algo_),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::as_security_config_t, cipher_algo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::pdcp_rrc::as_key_t)},
  { 6, -1, sizeof(::fs::pdcp_rrc::as_security_config_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::pdcp_rrc::_as_key_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::pdcp_rrc::_as_security_config_t_default_instance_),
};

const char descriptor_table_protodef_as_5fsecurity_5fconfig_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032as_security_config_t.proto\022\013fs.pdcp_rr"
  "c\"\027\n\010as_key_t\022\013\n\003key\030\001 \001(\014\"\271\002\n\024as_securi"
  "ty_config_t\022(\n\tk_rrc_int\030\001 \001(\0132\025.fs.pdcp"
  "_rrc.as_key_t\022(\n\tk_rrc_enc\030\002 \001(\0132\025.fs.pd"
  "cp_rrc.as_key_t\022\'\n\010k_up_int\030\003 \001(\0132\025.fs.p"
  "dcp_rrc.as_key_t\022\'\n\010k_up_enc\030\004 \001(\0132\025.fs."
  "pdcp_rrc.as_key_t\022<\n\ninteg_algo\030\005 \001(\0162(."
  "fs.pdcp_rrc.INTEGRITY_ALGORITHM_ID_ENUM\022"
  "=\n\013cipher_algo\030\006 \001(\0162(.fs.pdcp_rrc.CIPHE"
  "RING_ALGORITHM_ID_ENUM*\321\001\n\033INTEGRITY_ALG"
  "ORITHM_ID_ENUM\022\037\n\033INTEGRITY_ALGORITHM_ID"
  "_EIA0\020\000\022#\n\037INTEGRITY_ALGORITHM_ID_128_EI"
  "A1\020\001\022#\n\037INTEGRITY_ALGORITHM_ID_128_EIA2\020"
  "\002\022#\n\037INTEGRITY_ALGORITHM_ID_128_EIA3\020\003\022\""
  "\n\036INTEGRITY_ALGORITHM_ID_N_ITEMS\020\004*\321\001\n\033C"
  "IPHERING_ALGORITHM_ID_ENUM\022\037\n\033CIPHERING_"
  "ALGORITHM_ID_EEA0\020\000\022#\n\037CIPHERING_ALGORIT"
  "HM_ID_128_EEA1\020\001\022#\n\037CIPHERING_ALGORITHM_"
  "ID_128_EEA2\020\002\022#\n\037CIPHERING_ALGORITHM_ID_"
  "128_EEA3\020\003\022\"\n\036CIPHERING_ALGORITHM_ID_N_I"
  "TEMS\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto_sccs[2] = {
  &scc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto.base,
  &scc_info_as_security_config_t_as_5fsecurity_5fconfig_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto = {
  false, false, descriptor_table_protodef_as_5fsecurity_5fconfig_5ft_2eproto, "as_security_config_t.proto", 814,
  &descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto_once, descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto_sccs, descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_as_5fsecurity_5fconfig_5ft_2eproto::offsets,
  file_level_metadata_as_5fsecurity_5fconfig_5ft_2eproto, 2, file_level_enum_descriptors_as_5fsecurity_5fconfig_5ft_2eproto, file_level_service_descriptors_as_5fsecurity_5fconfig_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_as_5fsecurity_5fconfig_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto)), true);
namespace fs {
namespace pdcp_rrc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INTEGRITY_ALGORITHM_ID_ENUM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_as_5fsecurity_5fconfig_5ft_2eproto[0];
}
bool INTEGRITY_ALGORITHM_ID_ENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CIPHERING_ALGORITHM_ID_ENUM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_as_5fsecurity_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_as_5fsecurity_5fconfig_5ft_2eproto[1];
}
bool CIPHERING_ALGORITHM_ID_ENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void as_key_t::InitAsDefaultInstance() {
}
class as_key_t::_Internal {
 public:
};

as_key_t::as_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.pdcp_rrc.as_key_t)
}
as_key_t::as_key_t(const as_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fs.pdcp_rrc.as_key_t)
}

void as_key_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

as_key_t::~as_key_t() {
  // @@protoc_insertion_point(destructor:fs.pdcp_rrc.as_key_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void as_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void as_key_t::ArenaDtor(void* object) {
  as_key_t* _this = reinterpret_cast< as_key_t* >(object);
  (void)_this;
}
void as_key_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void as_key_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const as_key_t& as_key_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_as_key_t_as_5fsecurity_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void as_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.pdcp_rrc.as_key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* as_key_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* as_key_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.pdcp_rrc.as_key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.pdcp_rrc.as_key_t)
  return target;
}

size_t as_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.pdcp_rrc.as_key_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void as_key_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.pdcp_rrc.as_key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const as_key_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<as_key_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.pdcp_rrc.as_key_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.pdcp_rrc.as_key_t)
    MergeFrom(*source);
  }
}

void as_key_t::MergeFrom(const as_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.pdcp_rrc.as_key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void as_key_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.pdcp_rrc.as_key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_key_t::CopyFrom(const as_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.pdcp_rrc.as_key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_key_t::IsInitialized() const {
  return true;
}

void as_key_t::InternalSwap(as_key_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata as_key_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void as_security_config_t::InitAsDefaultInstance() {
  ::fs::pdcp_rrc::_as_security_config_t_default_instance_._instance.get_mutable()->k_rrc_int_ = const_cast< ::fs::pdcp_rrc::as_key_t*>(
      ::fs::pdcp_rrc::as_key_t::internal_default_instance());
  ::fs::pdcp_rrc::_as_security_config_t_default_instance_._instance.get_mutable()->k_rrc_enc_ = const_cast< ::fs::pdcp_rrc::as_key_t*>(
      ::fs::pdcp_rrc::as_key_t::internal_default_instance());
  ::fs::pdcp_rrc::_as_security_config_t_default_instance_._instance.get_mutable()->k_up_int_ = const_cast< ::fs::pdcp_rrc::as_key_t*>(
      ::fs::pdcp_rrc::as_key_t::internal_default_instance());
  ::fs::pdcp_rrc::_as_security_config_t_default_instance_._instance.get_mutable()->k_up_enc_ = const_cast< ::fs::pdcp_rrc::as_key_t*>(
      ::fs::pdcp_rrc::as_key_t::internal_default_instance());
}
class as_security_config_t::_Internal {
 public:
  static const ::fs::pdcp_rrc::as_key_t& k_rrc_int(const as_security_config_t* msg);
  static const ::fs::pdcp_rrc::as_key_t& k_rrc_enc(const as_security_config_t* msg);
  static const ::fs::pdcp_rrc::as_key_t& k_up_int(const as_security_config_t* msg);
  static const ::fs::pdcp_rrc::as_key_t& k_up_enc(const as_security_config_t* msg);
};

const ::fs::pdcp_rrc::as_key_t&
as_security_config_t::_Internal::k_rrc_int(const as_security_config_t* msg) {
  return *msg->k_rrc_int_;
}
const ::fs::pdcp_rrc::as_key_t&
as_security_config_t::_Internal::k_rrc_enc(const as_security_config_t* msg) {
  return *msg->k_rrc_enc_;
}
const ::fs::pdcp_rrc::as_key_t&
as_security_config_t::_Internal::k_up_int(const as_security_config_t* msg) {
  return *msg->k_up_int_;
}
const ::fs::pdcp_rrc::as_key_t&
as_security_config_t::_Internal::k_up_enc(const as_security_config_t* msg) {
  return *msg->k_up_enc_;
}
as_security_config_t::as_security_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.pdcp_rrc.as_security_config_t)
}
as_security_config_t::as_security_config_t(const as_security_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_k_rrc_int()) {
    k_rrc_int_ = new ::fs::pdcp_rrc::as_key_t(*from.k_rrc_int_);
  } else {
    k_rrc_int_ = nullptr;
  }
  if (from._internal_has_k_rrc_enc()) {
    k_rrc_enc_ = new ::fs::pdcp_rrc::as_key_t(*from.k_rrc_enc_);
  } else {
    k_rrc_enc_ = nullptr;
  }
  if (from._internal_has_k_up_int()) {
    k_up_int_ = new ::fs::pdcp_rrc::as_key_t(*from.k_up_int_);
  } else {
    k_up_int_ = nullptr;
  }
  if (from._internal_has_k_up_enc()) {
    k_up_enc_ = new ::fs::pdcp_rrc::as_key_t(*from.k_up_enc_);
  } else {
    k_up_enc_ = nullptr;
  }
  ::memcpy(&integ_algo_, &from.integ_algo_,
    static_cast<size_t>(reinterpret_cast<char*>(&cipher_algo_) -
    reinterpret_cast<char*>(&integ_algo_)) + sizeof(cipher_algo_));
  // @@protoc_insertion_point(copy_constructor:fs.pdcp_rrc.as_security_config_t)
}

void as_security_config_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_as_security_config_t_as_5fsecurity_5fconfig_5ft_2eproto.base);
  ::memset(&k_rrc_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cipher_algo_) -
      reinterpret_cast<char*>(&k_rrc_int_)) + sizeof(cipher_algo_));
}

as_security_config_t::~as_security_config_t() {
  // @@protoc_insertion_point(destructor:fs.pdcp_rrc.as_security_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void as_security_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete k_rrc_int_;
  if (this != internal_default_instance()) delete k_rrc_enc_;
  if (this != internal_default_instance()) delete k_up_int_;
  if (this != internal_default_instance()) delete k_up_enc_;
}

void as_security_config_t::ArenaDtor(void* object) {
  as_security_config_t* _this = reinterpret_cast< as_security_config_t* >(object);
  (void)_this;
}
void as_security_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void as_security_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const as_security_config_t& as_security_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_as_security_config_t_as_5fsecurity_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void as_security_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.pdcp_rrc.as_security_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && k_rrc_int_ != nullptr) {
    delete k_rrc_int_;
  }
  k_rrc_int_ = nullptr;
  if (GetArena() == nullptr && k_rrc_enc_ != nullptr) {
    delete k_rrc_enc_;
  }
  k_rrc_enc_ = nullptr;
  if (GetArena() == nullptr && k_up_int_ != nullptr) {
    delete k_up_int_;
  }
  k_up_int_ = nullptr;
  if (GetArena() == nullptr && k_up_enc_ != nullptr) {
    delete k_up_enc_;
  }
  k_up_enc_ = nullptr;
  ::memset(&integ_algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cipher_algo_) -
      reinterpret_cast<char*>(&integ_algo_)) + sizeof(cipher_algo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* as_security_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.pdcp_rrc.as_key_t k_rrc_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_k_rrc_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.as_key_t k_rrc_enc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_k_rrc_enc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.as_key_t k_up_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_k_up_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.as_key_t k_up_enc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_k_up_enc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.INTEGRITY_ALGORITHM_ID_ENUM integ_algo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_integ_algo(static_cast<::fs::pdcp_rrc::INTEGRITY_ALGORITHM_ID_ENUM>(val));
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.CIPHERING_ALGORITHM_ID_ENUM cipher_algo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cipher_algo(static_cast<::fs::pdcp_rrc::CIPHERING_ALGORITHM_ID_ENUM>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* as_security_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.pdcp_rrc.as_security_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.pdcp_rrc.as_key_t k_rrc_int = 1;
  if (this->has_k_rrc_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::k_rrc_int(this), target, stream);
  }

  // .fs.pdcp_rrc.as_key_t k_rrc_enc = 2;
  if (this->has_k_rrc_enc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::k_rrc_enc(this), target, stream);
  }

  // .fs.pdcp_rrc.as_key_t k_up_int = 3;
  if (this->has_k_up_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::k_up_int(this), target, stream);
  }

  // .fs.pdcp_rrc.as_key_t k_up_enc = 4;
  if (this->has_k_up_enc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::k_up_enc(this), target, stream);
  }

  // .fs.pdcp_rrc.INTEGRITY_ALGORITHM_ID_ENUM integ_algo = 5;
  if (this->integ_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_integ_algo(), target);
  }

  // .fs.pdcp_rrc.CIPHERING_ALGORITHM_ID_ENUM cipher_algo = 6;
  if (this->cipher_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cipher_algo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.pdcp_rrc.as_security_config_t)
  return target;
}

size_t as_security_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.pdcp_rrc.as_security_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.pdcp_rrc.as_key_t k_rrc_int = 1;
  if (this->has_k_rrc_int()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *k_rrc_int_);
  }

  // .fs.pdcp_rrc.as_key_t k_rrc_enc = 2;
  if (this->has_k_rrc_enc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *k_rrc_enc_);
  }

  // .fs.pdcp_rrc.as_key_t k_up_int = 3;
  if (this->has_k_up_int()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *k_up_int_);
  }

  // .fs.pdcp_rrc.as_key_t k_up_enc = 4;
  if (this->has_k_up_enc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *k_up_enc_);
  }

  // .fs.pdcp_rrc.INTEGRITY_ALGORITHM_ID_ENUM integ_algo = 5;
  if (this->integ_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_integ_algo());
  }

  // .fs.pdcp_rrc.CIPHERING_ALGORITHM_ID_ENUM cipher_algo = 6;
  if (this->cipher_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cipher_algo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void as_security_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.pdcp_rrc.as_security_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const as_security_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<as_security_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.pdcp_rrc.as_security_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.pdcp_rrc.as_security_config_t)
    MergeFrom(*source);
  }
}

void as_security_config_t::MergeFrom(const as_security_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.pdcp_rrc.as_security_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_k_rrc_int()) {
    _internal_mutable_k_rrc_int()->::fs::pdcp_rrc::as_key_t::MergeFrom(from._internal_k_rrc_int());
  }
  if (from.has_k_rrc_enc()) {
    _internal_mutable_k_rrc_enc()->::fs::pdcp_rrc::as_key_t::MergeFrom(from._internal_k_rrc_enc());
  }
  if (from.has_k_up_int()) {
    _internal_mutable_k_up_int()->::fs::pdcp_rrc::as_key_t::MergeFrom(from._internal_k_up_int());
  }
  if (from.has_k_up_enc()) {
    _internal_mutable_k_up_enc()->::fs::pdcp_rrc::as_key_t::MergeFrom(from._internal_k_up_enc());
  }
  if (from.integ_algo() != 0) {
    _internal_set_integ_algo(from._internal_integ_algo());
  }
  if (from.cipher_algo() != 0) {
    _internal_set_cipher_algo(from._internal_cipher_algo());
  }
}

void as_security_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.pdcp_rrc.as_security_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_security_config_t::CopyFrom(const as_security_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.pdcp_rrc.as_security_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_security_config_t::IsInitialized() const {
  return true;
}

void as_security_config_t::InternalSwap(as_security_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(as_security_config_t, cipher_algo_)
      + sizeof(as_security_config_t::cipher_algo_)
      - PROTOBUF_FIELD_OFFSET(as_security_config_t, k_rrc_int_)>(
          reinterpret_cast<char*>(&k_rrc_int_),
          reinterpret_cast<char*>(&other->k_rrc_int_));
}

::PROTOBUF_NAMESPACE_ID::Metadata as_security_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pdcp_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::pdcp_rrc::as_key_t* Arena::CreateMaybeMessage< ::fs::pdcp_rrc::as_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::pdcp_rrc::as_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::pdcp_rrc::as_security_config_t* Arena::CreateMaybeMessage< ::fs::pdcp_rrc::as_security_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::pdcp_rrc::as_security_config_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
