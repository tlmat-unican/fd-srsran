// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bearer_props.proto

#include "srsenb/hdr/funsplit_proto/bearer_props.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fs {
namespace gtpu_rrc {
class bearer_propsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bearer_props> _instance;
} _bearer_props_default_instance_;
}  // namespace gtpu_rrc
}  // namespace fs
static void InitDefaultsscc_info_bearer_props_bearer_5fprops_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::gtpu_rrc::_bearer_props_default_instance_;
    new (ptr) ::fs::gtpu_rrc::bearer_props();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::gtpu_rrc::bearer_props::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bearer_props_bearer_5fprops_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bearer_props_bearer_5fprops_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bearer_5fprops_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bearer_5fprops_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bearer_5fprops_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bearer_5fprops_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::gtpu_rrc::bearer_props, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::gtpu_rrc::bearer_props, forward_from_teidin_present_),
  PROTOBUF_FIELD_OFFSET(::fs::gtpu_rrc::bearer_props, flush_before_teidin_present_),
  PROTOBUF_FIELD_OFFSET(::fs::gtpu_rrc::bearer_props, forward_from_teidin_),
  PROTOBUF_FIELD_OFFSET(::fs::gtpu_rrc::bearer_props, flush_from_teidin_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::gtpu_rrc::bearer_props)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::gtpu_rrc::_bearer_props_default_instance_),
};

const char descriptor_table_protodef_bearer_5fprops_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022bearer_props.proto\022\013fs.gtpu_rrc\"\220\001\n\014be"
  "arer_props\022#\n\033forward_from_teidin_presen"
  "t\030\001 \001(\010\022#\n\033flush_before_teidin_present\030\002"
  " \001(\010\022\033\n\023forward_from_teidin\030\003 \001(\r\022\031\n\021flu"
  "sh_from_teidin\030\004 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bearer_5fprops_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bearer_5fprops_2eproto_sccs[1] = {
  &scc_info_bearer_props_bearer_5fprops_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bearer_5fprops_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bearer_5fprops_2eproto = {
  false, false, descriptor_table_protodef_bearer_5fprops_2eproto, "bearer_props.proto", 188,
  &descriptor_table_bearer_5fprops_2eproto_once, descriptor_table_bearer_5fprops_2eproto_sccs, descriptor_table_bearer_5fprops_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_bearer_5fprops_2eproto::offsets,
  file_level_metadata_bearer_5fprops_2eproto, 1, file_level_enum_descriptors_bearer_5fprops_2eproto, file_level_service_descriptors_bearer_5fprops_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bearer_5fprops_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bearer_5fprops_2eproto)), true);
namespace fs {
namespace gtpu_rrc {

// ===================================================================

void bearer_props::InitAsDefaultInstance() {
}
class bearer_props::_Internal {
 public:
};

bearer_props::bearer_props(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.gtpu_rrc.bearer_props)
}
bearer_props::bearer_props(const bearer_props& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_from_teidin_present_, &from.forward_from_teidin_present_,
    static_cast<size_t>(reinterpret_cast<char*>(&flush_from_teidin_) -
    reinterpret_cast<char*>(&forward_from_teidin_present_)) + sizeof(flush_from_teidin_));
  // @@protoc_insertion_point(copy_constructor:fs.gtpu_rrc.bearer_props)
}

void bearer_props::SharedCtor() {
  ::memset(&forward_from_teidin_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flush_from_teidin_) -
      reinterpret_cast<char*>(&forward_from_teidin_present_)) + sizeof(flush_from_teidin_));
}

bearer_props::~bearer_props() {
  // @@protoc_insertion_point(destructor:fs.gtpu_rrc.bearer_props)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bearer_props::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bearer_props::ArenaDtor(void* object) {
  bearer_props* _this = reinterpret_cast< bearer_props* >(object);
  (void)_this;
}
void bearer_props::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bearer_props::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bearer_props& bearer_props::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bearer_props_bearer_5fprops_2eproto.base);
  return *internal_default_instance();
}


void bearer_props::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.gtpu_rrc.bearer_props)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_from_teidin_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flush_from_teidin_) -
      reinterpret_cast<char*>(&forward_from_teidin_present_)) + sizeof(flush_from_teidin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bearer_props::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool forward_from_teidin_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_from_teidin_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flush_before_teidin_present = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flush_before_teidin_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 forward_from_teidin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          forward_from_teidin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flush_from_teidin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flush_from_teidin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bearer_props::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.gtpu_rrc.bearer_props)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool forward_from_teidin_present = 1;
  if (this->forward_from_teidin_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_forward_from_teidin_present(), target);
  }

  // bool flush_before_teidin_present = 2;
  if (this->flush_before_teidin_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flush_before_teidin_present(), target);
  }

  // uint32 forward_from_teidin = 3;
  if (this->forward_from_teidin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_forward_from_teidin(), target);
  }

  // uint32 flush_from_teidin = 4;
  if (this->flush_from_teidin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flush_from_teidin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.gtpu_rrc.bearer_props)
  return target;
}

size_t bearer_props::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.gtpu_rrc.bearer_props)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool forward_from_teidin_present = 1;
  if (this->forward_from_teidin_present() != 0) {
    total_size += 1 + 1;
  }

  // bool flush_before_teidin_present = 2;
  if (this->flush_before_teidin_present() != 0) {
    total_size += 1 + 1;
  }

  // uint32 forward_from_teidin = 3;
  if (this->forward_from_teidin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_forward_from_teidin());
  }

  // uint32 flush_from_teidin = 4;
  if (this->flush_from_teidin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flush_from_teidin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bearer_props::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.gtpu_rrc.bearer_props)
  GOOGLE_DCHECK_NE(&from, this);
  const bearer_props* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bearer_props>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.gtpu_rrc.bearer_props)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.gtpu_rrc.bearer_props)
    MergeFrom(*source);
  }
}

void bearer_props::MergeFrom(const bearer_props& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.gtpu_rrc.bearer_props)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.forward_from_teidin_present() != 0) {
    _internal_set_forward_from_teidin_present(from._internal_forward_from_teidin_present());
  }
  if (from.flush_before_teidin_present() != 0) {
    _internal_set_flush_before_teidin_present(from._internal_flush_before_teidin_present());
  }
  if (from.forward_from_teidin() != 0) {
    _internal_set_forward_from_teidin(from._internal_forward_from_teidin());
  }
  if (from.flush_from_teidin() != 0) {
    _internal_set_flush_from_teidin(from._internal_flush_from_teidin());
  }
}

void bearer_props::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.gtpu_rrc.bearer_props)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bearer_props::CopyFrom(const bearer_props& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.gtpu_rrc.bearer_props)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bearer_props::IsInitialized() const {
  return true;
}

void bearer_props::InternalSwap(bearer_props* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(bearer_props, flush_from_teidin_)
      + sizeof(bearer_props::flush_from_teidin_)
      - PROTOBUF_FIELD_OFFSET(bearer_props, forward_from_teidin_present_)>(
          reinterpret_cast<char*>(&forward_from_teidin_present_),
          reinterpret_cast<char*>(&other->forward_from_teidin_present_));
}

::PROTOBUF_NAMESPACE_ID::Metadata bearer_props::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gtpu_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::gtpu_rrc::bearer_props* Arena::CreateMaybeMessage< ::fs::gtpu_rrc::bearer_props >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::gtpu_rrc::bearer_props >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
