// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cell_cfg_t.proto

#include "srsenb/hdr/funsplit_proto/cell_cfg_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto;
namespace fs {
namespace mac_rrc {
class srsran_pusch_hopping_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_pusch_hopping_cfg_t> _instance;
} _srsran_pusch_hopping_cfg_t_default_instance_;
class cell_cfg_sib_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cell_cfg_sib_t> _instance;
} _cell_cfg_sib_t_default_instance_;
class srsran_cell_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_cell_t> _instance;
} _srsran_cell_t_default_instance_;
class scell_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scell_cfg_t> _instance;
} _scell_cfg_t_default_instance_;
class cell_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cell_cfg_t> _instance;
} _cell_cfg_t_default_instance_;
class vect_cell_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vect_cell_cfg_t> _instance;
} _vect_cell_cfg_t_default_instance_;
}  // namespace mac_rrc
}  // namespace fs
static void InitDefaultsscc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_cell_cfg_sib_t_default_instance_;
    new (ptr) ::fs::mac_rrc::cell_cfg_sib_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::cell_cfg_sib_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_cell_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::cell_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::cell_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto.base,
      &scc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto.base,
      &scc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_scell_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::scell_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::scell_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_cell_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_cell_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_cell_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_pusch_hopping_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_pusch_hopping_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_pusch_hopping_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_vect_cell_cfg_t_cell_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_vect_cell_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::vect_cell_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::vect_cell_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_vect_cell_cfg_t_cell_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_vect_cell_cfg_t_cell_5fcfg_5ft_2eproto}, {
      &scc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cell_5fcfg_5ft_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cell_5fcfg_5ft_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cell_5fcfg_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cell_5fcfg_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, hop_mode_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, hopping_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, n_sb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, n_rb_ho_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, current_tx_nb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pusch_hopping_cfg_t, hopping_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_sib_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_sib_t, len_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_sib_t, period_rf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, nof_prb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, nof_ports_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, id_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, cp_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, phich_length_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, phich_resources_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cell_t, frame_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::scell_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::scell_cfg_t, enb_cc_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::scell_cfg_t, cross_carrier_scheduling_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::scell_cfg_t, ul_allowed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, cell_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, sibs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, si_window_ms_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, target_pucch_ul_sinr_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, pusch_hopping_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, target_pusch_ul_sinr_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, enable_phr_handling_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, enable_64qam_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, prach_config_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, prach_nof_preambles_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, prach_freq_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, prach_rar_window_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, prach_contention_resolution_timer_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, maxharq_msg3tx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, n1pucch_an_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, delta_pucch_shift_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, nrb_pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, nrb_cqi_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, ncs_an_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, initial_dl_cqi_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, srs_subframe_config_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, srs_subframe_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, srs_bw_config_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cell_cfg_t, scell_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::vect_cell_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::vect_cell_cfg_t, vect_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::mac_rrc::srsran_pusch_hopping_cfg_t)},
  { 11, -1, sizeof(::fs::mac_rrc::cell_cfg_sib_t)},
  { 18, -1, sizeof(::fs::mac_rrc::srsran_cell_t)},
  { 30, -1, sizeof(::fs::mac_rrc::scell_cfg_t)},
  { 38, -1, sizeof(::fs::mac_rrc::cell_cfg_t)},
  { 67, -1, sizeof(::fs::mac_rrc::vect_cell_cfg_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_pusch_hopping_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_cell_cfg_sib_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_cell_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_scell_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_cell_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_vect_cell_cfg_t_default_instance_),
};

const char descriptor_table_protodef_cell_5fcfg_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020cell_cfg_t.proto\022\nfs.mac_rrc\"\253\001\n\032srsra"
  "n_pusch_hopping_cfg_t\022&\n\010hop_mode\030\001 \001(\0162"
  "\024.fs.mac_rrc.HOP_MODE\022\026\n\016hopping_offset\030"
  "\002 \001(\r\022\014\n\004n_sb\030\003 \001(\r\022\017\n\007n_rb_ho\030\004 \001(\r\022\025\n\r"
  "current_tx_nb\030\005 \001(\r\022\027\n\017hopping_enabled\030\006"
  " \001(\010\"0\n\016cell_cfg_sib_t\022\013\n\003len\030\001 \001(\r\022\021\n\tp"
  "eriod_rf\030\002 \001(\r\"\201\002\n\rsrsran_cell_t\022\017\n\007nof_"
  "prb\030\001 \001(\r\022\021\n\tnof_ports\030\002 \001(\r\022\n\n\002id\030\003 \001(\r"
  "\022!\n\002cp\030\004 \001(\0162\025.fs.mac_rrc.SRSRAN_CP\0225\n\014p"
  "hich_length\030\005 \001(\0162\037.fs.mac_rrc.SRSRAN_PH"
  "ICH_LENGTH\0223\n\017phich_resources\030\006 \001(\0162\032.fs"
  ".mac_rrc.SRSRAN_PHICH_R\0221\n\nframe_type\030\007 "
  "\001(\0162\035.fs.mac_rrc.SRSRAN_FRAME_TYPE\"W\n\013sc"
  "ell_cfg_t\022\022\n\nenb_cc_idx\030\001 \001(\r\022 \n\030cross_c"
  "arrier_scheduling\030\002 \001(\010\022\022\n\nul_allowed\030\003 "
  "\001(\010\"\313\005\n\ncell_cfg_t\022\'\n\004cell\030\001 \001(\0132\031.fs.ma"
  "c_rrc.srsran_cell_t\022(\n\004sibs\030\002 \003(\0132\032.fs.m"
  "ac_rrc.cell_cfg_sib_t\022\024\n\014si_window_ms\030\003 "
  "\001(\r\022\034\n\024target_pucch_ul_sinr\030\004 \001(\002\022A\n\021pus"
  "ch_hopping_cfg\030\005 \001(\0132&.fs.mac_rrc.srsran"
  "_pusch_hopping_cfg_t\022\034\n\024target_pusch_ul_"
  "sinr\030\006 \001(\002\022\033\n\023enable_phr_handling\030\007 \001(\010\022"
  "\024\n\014enable_64qam\030\010 \001(\010\022\024\n\014prach_config\030\t "
  "\001(\r\022\033\n\023prach_nof_preambles\030\n \001(\r\022\031\n\021prac"
  "h_freq_offset\030\013 \001(\r\022\030\n\020prach_rar_window\030"
  "\014 \001(\r\022)\n!prach_contention_resolution_tim"
  "er\030\r \001(\r\022\026\n\016maxharq_msg3tx\030\016 \001(\r\022\022\n\nn1pu"
  "cch_an\030\017 \001(\r\022\031\n\021delta_pucch_shift\030\020 \001(\r\022"
  "\021\n\tnrb_pucch\030\021 \001(\005\022\017\n\007nrb_cqi\030\022 \001(\r\022\016\n\006n"
  "cs_an\030\023 \001(\r\022\026\n\016initial_dl_cqi\030\024 \001(\r\022\033\n\023s"
  "rs_subframe_config\030\025 \001(\r\022\033\n\023srs_subframe"
  "_offset\030\026 \001(\r\022\025\n\rsrs_bw_config\030\027 \001(\r\022+\n\n"
  "scell_list\030\030 \003(\0132\027.fs.mac_rrc.scell_cfg_"
  "t\"7\n\017vect_cell_cfg_t\022$\n\004vect\030\001 \003(\0132\026.fs."
  "mac_rrc.cell_cfg_t*2\n\tSRSRAN_CP\022\022\n\016SRSRA"
  "N_CP_NORM\020\000\022\021\n\rSRSRAN_CP_EXT\020\001*B\n\023SRSRAN"
  "_PHICH_LENGTH\022\025\n\021SRSRAN_PHICH_NORM\020\000\022\024\n\020"
  "SRSRAN_PHICH_EXT\020\001*l\n\016SRSRAN_PHICH_R\022\026\n\022"
  "SRSRAN_PHICH_R_1_6\020\000\022\026\n\022SRSRAN_PHICH_R_1"
  "_2\020\001\022\024\n\020SRSRAN_PHICH_R_1\020\002\022\024\n\020SRSRAN_PHI"
  "CH_R_2\020\003*3\n\021SRSRAN_FRAME_TYPE\022\016\n\nSRSRAN_"
  "FDD\020\000\022\016\n\nSRSRAN_TDD\020\001*R\n\010HOP_MODE\022\"\n\036SRS"
  "RAN_PUSCH_HOP_MODE_INTRA_SF\020\000\022\"\n\036SRSRAN_"
  "PUSCH_HOP_MODE_INTER_SF\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cell_5fcfg_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cell_5fcfg_5ft_2eproto_sccs[6] = {
  &scc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto.base,
  &scc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto.base,
  &scc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto.base,
  &scc_info_vect_cell_cfg_t_cell_5fcfg_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cell_5fcfg_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cell_5fcfg_5ft_2eproto = {
  false, false, descriptor_table_protodef_cell_5fcfg_5ft_2eproto, "cell_cfg_t.proto", 1753,
  &descriptor_table_cell_5fcfg_5ft_2eproto_once, descriptor_table_cell_5fcfg_5ft_2eproto_sccs, descriptor_table_cell_5fcfg_5ft_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_cell_5fcfg_5ft_2eproto::offsets,
  file_level_metadata_cell_5fcfg_5ft_2eproto, 6, file_level_enum_descriptors_cell_5fcfg_5ft_2eproto, file_level_service_descriptors_cell_5fcfg_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cell_5fcfg_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cell_5fcfg_5ft_2eproto)), true);
namespace fs {
namespace mac_rrc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_CP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cell_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_cell_5fcfg_5ft_2eproto[0];
}
bool SRSRAN_CP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_PHICH_LENGTH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cell_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_cell_5fcfg_5ft_2eproto[1];
}
bool SRSRAN_PHICH_LENGTH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_PHICH_R_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cell_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_cell_5fcfg_5ft_2eproto[2];
}
bool SRSRAN_PHICH_R_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SRSRAN_FRAME_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cell_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_cell_5fcfg_5ft_2eproto[3];
}
bool SRSRAN_FRAME_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HOP_MODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cell_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_cell_5fcfg_5ft_2eproto[4];
}
bool HOP_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void srsran_pusch_hopping_cfg_t::InitAsDefaultInstance() {
}
class srsran_pusch_hopping_cfg_t::_Internal {
 public:
};

srsran_pusch_hopping_cfg_t::srsran_pusch_hopping_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
}
srsran_pusch_hopping_cfg_t::srsran_pusch_hopping_cfg_t(const srsran_pusch_hopping_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hop_mode_, &from.hop_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&hopping_enabled_) -
    reinterpret_cast<char*>(&hop_mode_)) + sizeof(hopping_enabled_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
}

void srsran_pusch_hopping_cfg_t::SharedCtor() {
  ::memset(&hop_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hopping_enabled_) -
      reinterpret_cast<char*>(&hop_mode_)) + sizeof(hopping_enabled_));
}

srsran_pusch_hopping_cfg_t::~srsran_pusch_hopping_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_pusch_hopping_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_pusch_hopping_cfg_t::ArenaDtor(void* object) {
  srsran_pusch_hopping_cfg_t* _this = reinterpret_cast< srsran_pusch_hopping_cfg_t* >(object);
  (void)_this;
}
void srsran_pusch_hopping_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_pusch_hopping_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_pusch_hopping_cfg_t& srsran_pusch_hopping_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_pusch_hopping_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hop_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hopping_enabled_) -
      reinterpret_cast<char*>(&hop_mode_)) + sizeof(hopping_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_pusch_hopping_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.HOP_MODE hop_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hop_mode(static_cast<::fs::mac_rrc::HOP_MODE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 hopping_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hopping_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_sb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_rb_ho = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n_rb_ho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_tx_nb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_tx_nb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hopping_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hopping_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_pusch_hopping_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.HOP_MODE hop_mode = 1;
  if (this->hop_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hop_mode(), target);
  }

  // uint32 hopping_offset = 2;
  if (this->hopping_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hopping_offset(), target);
  }

  // uint32 n_sb = 3;
  if (this->n_sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_n_sb(), target);
  }

  // uint32 n_rb_ho = 4;
  if (this->n_rb_ho() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_n_rb_ho(), target);
  }

  // uint32 current_tx_nb = 5;
  if (this->current_tx_nb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_current_tx_nb(), target);
  }

  // bool hopping_enabled = 6;
  if (this->hopping_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hopping_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  return target;
}

size_t srsran_pusch_hopping_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.HOP_MODE hop_mode = 1;
  if (this->hop_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hop_mode());
  }

  // uint32 hopping_offset = 2;
  if (this->hopping_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hopping_offset());
  }

  // uint32 n_sb = 3;
  if (this->n_sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_sb());
  }

  // uint32 n_rb_ho = 4;
  if (this->n_rb_ho() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_rb_ho());
  }

  // uint32 current_tx_nb = 5;
  if (this->current_tx_nb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_tx_nb());
  }

  // bool hopping_enabled = 6;
  if (this->hopping_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_pusch_hopping_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_pusch_hopping_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_pusch_hopping_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_pusch_hopping_cfg_t::MergeFrom(const srsran_pusch_hopping_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hop_mode() != 0) {
    _internal_set_hop_mode(from._internal_hop_mode());
  }
  if (from.hopping_offset() != 0) {
    _internal_set_hopping_offset(from._internal_hopping_offset());
  }
  if (from.n_sb() != 0) {
    _internal_set_n_sb(from._internal_n_sb());
  }
  if (from.n_rb_ho() != 0) {
    _internal_set_n_rb_ho(from._internal_n_rb_ho());
  }
  if (from.current_tx_nb() != 0) {
    _internal_set_current_tx_nb(from._internal_current_tx_nb());
  }
  if (from.hopping_enabled() != 0) {
    _internal_set_hopping_enabled(from._internal_hopping_enabled());
  }
}

void srsran_pusch_hopping_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_pusch_hopping_cfg_t::CopyFrom(const srsran_pusch_hopping_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_pusch_hopping_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_pusch_hopping_cfg_t::IsInitialized() const {
  return true;
}

void srsran_pusch_hopping_cfg_t::InternalSwap(srsran_pusch_hopping_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_pusch_hopping_cfg_t, hopping_enabled_)
      + sizeof(srsran_pusch_hopping_cfg_t::hopping_enabled_)
      - PROTOBUF_FIELD_OFFSET(srsran_pusch_hopping_cfg_t, hop_mode_)>(
          reinterpret_cast<char*>(&hop_mode_),
          reinterpret_cast<char*>(&other->hop_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_pusch_hopping_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cell_cfg_sib_t::InitAsDefaultInstance() {
}
class cell_cfg_sib_t::_Internal {
 public:
};

cell_cfg_sib_t::cell_cfg_sib_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.cell_cfg_sib_t)
}
cell_cfg_sib_t::cell_cfg_sib_t(const cell_cfg_sib_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_rf_) -
    reinterpret_cast<char*>(&len_)) + sizeof(period_rf_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.cell_cfg_sib_t)
}

void cell_cfg_sib_t::SharedCtor() {
  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_rf_) -
      reinterpret_cast<char*>(&len_)) + sizeof(period_rf_));
}

cell_cfg_sib_t::~cell_cfg_sib_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.cell_cfg_sib_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cell_cfg_sib_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void cell_cfg_sib_t::ArenaDtor(void* object) {
  cell_cfg_sib_t* _this = reinterpret_cast< cell_cfg_sib_t* >(object);
  (void)_this;
}
void cell_cfg_sib_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cell_cfg_sib_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cell_cfg_sib_t& cell_cfg_sib_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cell_cfg_sib_t_cell_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void cell_cfg_sib_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.cell_cfg_sib_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_rf_) -
      reinterpret_cast<char*>(&len_)) + sizeof(period_rf_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cell_cfg_sib_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period_rf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_rf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cell_cfg_sib_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.cell_cfg_sib_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_len(), target);
  }

  // uint32 period_rf = 2;
  if (this->period_rf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period_rf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.cell_cfg_sib_t)
  return target;
}

size_t cell_cfg_sib_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.cell_cfg_sib_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 period_rf = 2;
  if (this->period_rf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period_rf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cell_cfg_sib_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.cell_cfg_sib_t)
  GOOGLE_DCHECK_NE(&from, this);
  const cell_cfg_sib_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cell_cfg_sib_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.cell_cfg_sib_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.cell_cfg_sib_t)
    MergeFrom(*source);
  }
}

void cell_cfg_sib_t::MergeFrom(const cell_cfg_sib_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.cell_cfg_sib_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.period_rf() != 0) {
    _internal_set_period_rf(from._internal_period_rf());
  }
}

void cell_cfg_sib_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.cell_cfg_sib_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cell_cfg_sib_t::CopyFrom(const cell_cfg_sib_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.cell_cfg_sib_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cell_cfg_sib_t::IsInitialized() const {
  return true;
}

void cell_cfg_sib_t::InternalSwap(cell_cfg_sib_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cell_cfg_sib_t, period_rf_)
      + sizeof(cell_cfg_sib_t::period_rf_)
      - PROTOBUF_FIELD_OFFSET(cell_cfg_sib_t, len_)>(
          reinterpret_cast<char*>(&len_),
          reinterpret_cast<char*>(&other->len_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cell_cfg_sib_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_cell_t::InitAsDefaultInstance() {
}
class srsran_cell_t::_Internal {
 public:
};

srsran_cell_t::srsran_cell_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_cell_t)
}
srsran_cell_t::srsran_cell_t(const srsran_cell_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nof_prb_, &from.nof_prb_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&nof_prb_)) + sizeof(frame_type_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_cell_t)
}

void srsran_cell_t::SharedCtor() {
  ::memset(&nof_prb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type_) -
      reinterpret_cast<char*>(&nof_prb_)) + sizeof(frame_type_));
}

srsran_cell_t::~srsran_cell_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_cell_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_cell_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_cell_t::ArenaDtor(void* object) {
  srsran_cell_t* _this = reinterpret_cast< srsran_cell_t* >(object);
  (void)_this;
}
void srsran_cell_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_cell_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_cell_t& srsran_cell_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_cell_t_cell_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_cell_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_cell_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nof_prb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type_) -
      reinterpret_cast<char*>(&nof_prb_)) + sizeof(frame_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_cell_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nof_prb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nof_prb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nof_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.SRSRAN_CP cp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cp(static_cast<::fs::mac_rrc::SRSRAN_CP>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.SRSRAN_PHICH_LENGTH phich_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phich_length(static_cast<::fs::mac_rrc::SRSRAN_PHICH_LENGTH>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.SRSRAN_PHICH_R phich_resources = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phich_resources(static_cast<::fs::mac_rrc::SRSRAN_PHICH_R>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.SRSRAN_FRAME_TYPE frame_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame_type(static_cast<::fs::mac_rrc::SRSRAN_FRAME_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_cell_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_cell_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nof_prb = 1;
  if (this->nof_prb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nof_prb(), target);
  }

  // uint32 nof_ports = 2;
  if (this->nof_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nof_ports(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // .fs.mac_rrc.SRSRAN_CP cp = 4;
  if (this->cp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cp(), target);
  }

  // .fs.mac_rrc.SRSRAN_PHICH_LENGTH phich_length = 5;
  if (this->phich_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_phich_length(), target);
  }

  // .fs.mac_rrc.SRSRAN_PHICH_R phich_resources = 6;
  if (this->phich_resources() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_phich_resources(), target);
  }

  // .fs.mac_rrc.SRSRAN_FRAME_TYPE frame_type = 7;
  if (this->frame_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_frame_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_cell_t)
  return target;
}

size_t srsran_cell_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_cell_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 nof_prb = 1;
  if (this->nof_prb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_prb());
  }

  // uint32 nof_ports = 2;
  if (this->nof_ports() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_ports());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .fs.mac_rrc.SRSRAN_CP cp = 4;
  if (this->cp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cp());
  }

  // .fs.mac_rrc.SRSRAN_PHICH_LENGTH phich_length = 5;
  if (this->phich_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phich_length());
  }

  // .fs.mac_rrc.SRSRAN_PHICH_R phich_resources = 6;
  if (this->phich_resources() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phich_resources());
  }

  // .fs.mac_rrc.SRSRAN_FRAME_TYPE frame_type = 7;
  if (this->frame_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_cell_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_cell_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_cell_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_cell_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_cell_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_cell_t)
    MergeFrom(*source);
  }
}

void srsran_cell_t::MergeFrom(const srsran_cell_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_cell_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nof_prb() != 0) {
    _internal_set_nof_prb(from._internal_nof_prb());
  }
  if (from.nof_ports() != 0) {
    _internal_set_nof_ports(from._internal_nof_ports());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cp() != 0) {
    _internal_set_cp(from._internal_cp());
  }
  if (from.phich_length() != 0) {
    _internal_set_phich_length(from._internal_phich_length());
  }
  if (from.phich_resources() != 0) {
    _internal_set_phich_resources(from._internal_phich_resources());
  }
  if (from.frame_type() != 0) {
    _internal_set_frame_type(from._internal_frame_type());
  }
}

void srsran_cell_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_cell_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_cell_t::CopyFrom(const srsran_cell_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_cell_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_cell_t::IsInitialized() const {
  return true;
}

void srsran_cell_t::InternalSwap(srsran_cell_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_cell_t, frame_type_)
      + sizeof(srsran_cell_t::frame_type_)
      - PROTOBUF_FIELD_OFFSET(srsran_cell_t, nof_prb_)>(
          reinterpret_cast<char*>(&nof_prb_),
          reinterpret_cast<char*>(&other->nof_prb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_cell_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scell_cfg_t::InitAsDefaultInstance() {
}
class scell_cfg_t::_Internal {
 public:
};

scell_cfg_t::scell_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.scell_cfg_t)
}
scell_cfg_t::scell_cfg_t(const scell_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enb_cc_idx_, &from.enb_cc_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ul_allowed_) -
    reinterpret_cast<char*>(&enb_cc_idx_)) + sizeof(ul_allowed_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.scell_cfg_t)
}

void scell_cfg_t::SharedCtor() {
  ::memset(&enb_cc_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ul_allowed_) -
      reinterpret_cast<char*>(&enb_cc_idx_)) + sizeof(ul_allowed_));
}

scell_cfg_t::~scell_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.scell_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scell_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scell_cfg_t::ArenaDtor(void* object) {
  scell_cfg_t* _this = reinterpret_cast< scell_cfg_t* >(object);
  (void)_this;
}
void scell_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scell_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scell_cfg_t& scell_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scell_cfg_t_cell_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void scell_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.scell_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enb_cc_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ul_allowed_) -
      reinterpret_cast<char*>(&enb_cc_idx_)) + sizeof(ul_allowed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scell_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 enb_cc_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enb_cc_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross_carrier_scheduling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cross_carrier_scheduling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ul_allowed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ul_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scell_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.scell_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 enb_cc_idx = 1;
  if (this->enb_cc_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_enb_cc_idx(), target);
  }

  // bool cross_carrier_scheduling = 2;
  if (this->cross_carrier_scheduling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cross_carrier_scheduling(), target);
  }

  // bool ul_allowed = 3;
  if (this->ul_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ul_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.scell_cfg_t)
  return target;
}

size_t scell_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.scell_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 enb_cc_idx = 1;
  if (this->enb_cc_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enb_cc_idx());
  }

  // bool cross_carrier_scheduling = 2;
  if (this->cross_carrier_scheduling() != 0) {
    total_size += 1 + 1;
  }

  // bool ul_allowed = 3;
  if (this->ul_allowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scell_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.scell_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scell_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scell_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.scell_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.scell_cfg_t)
    MergeFrom(*source);
  }
}

void scell_cfg_t::MergeFrom(const scell_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.scell_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enb_cc_idx() != 0) {
    _internal_set_enb_cc_idx(from._internal_enb_cc_idx());
  }
  if (from.cross_carrier_scheduling() != 0) {
    _internal_set_cross_carrier_scheduling(from._internal_cross_carrier_scheduling());
  }
  if (from.ul_allowed() != 0) {
    _internal_set_ul_allowed(from._internal_ul_allowed());
  }
}

void scell_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.scell_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scell_cfg_t::CopyFrom(const scell_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.scell_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scell_cfg_t::IsInitialized() const {
  return true;
}

void scell_cfg_t::InternalSwap(scell_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(scell_cfg_t, ul_allowed_)
      + sizeof(scell_cfg_t::ul_allowed_)
      - PROTOBUF_FIELD_OFFSET(scell_cfg_t, enb_cc_idx_)>(
          reinterpret_cast<char*>(&enb_cc_idx_),
          reinterpret_cast<char*>(&other->enb_cc_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata scell_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cell_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_cell_cfg_t_default_instance_._instance.get_mutable()->cell_ = const_cast< ::fs::mac_rrc::srsran_cell_t*>(
      ::fs::mac_rrc::srsran_cell_t::internal_default_instance());
  ::fs::mac_rrc::_cell_cfg_t_default_instance_._instance.get_mutable()->pusch_hopping_cfg_ = const_cast< ::fs::mac_rrc::srsran_pusch_hopping_cfg_t*>(
      ::fs::mac_rrc::srsran_pusch_hopping_cfg_t::internal_default_instance());
}
class cell_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_cell_t& cell(const cell_cfg_t* msg);
  static const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t& pusch_hopping_cfg(const cell_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_cell_t&
cell_cfg_t::_Internal::cell(const cell_cfg_t* msg) {
  return *msg->cell_;
}
const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t&
cell_cfg_t::_Internal::pusch_hopping_cfg(const cell_cfg_t* msg) {
  return *msg->pusch_hopping_cfg_;
}
cell_cfg_t::cell_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sibs_(arena),
  scell_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.cell_cfg_t)
}
cell_cfg_t::cell_cfg_t(const cell_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sibs_(from.sibs_),
      scell_list_(from.scell_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    cell_ = new ::fs::mac_rrc::srsran_cell_t(*from.cell_);
  } else {
    cell_ = nullptr;
  }
  if (from._internal_has_pusch_hopping_cfg()) {
    pusch_hopping_cfg_ = new ::fs::mac_rrc::srsran_pusch_hopping_cfg_t(*from.pusch_hopping_cfg_);
  } else {
    pusch_hopping_cfg_ = nullptr;
  }
  ::memcpy(&si_window_ms_, &from.si_window_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&srs_bw_config_) -
    reinterpret_cast<char*>(&si_window_ms_)) + sizeof(srs_bw_config_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.cell_cfg_t)
}

void cell_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto.base);
  ::memset(&cell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srs_bw_config_) -
      reinterpret_cast<char*>(&cell_)) + sizeof(srs_bw_config_));
}

cell_cfg_t::~cell_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.cell_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cell_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cell_;
  if (this != internal_default_instance()) delete pusch_hopping_cfg_;
}

void cell_cfg_t::ArenaDtor(void* object) {
  cell_cfg_t* _this = reinterpret_cast< cell_cfg_t* >(object);
  (void)_this;
}
void cell_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cell_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cell_cfg_t& cell_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cell_cfg_t_cell_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void cell_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.cell_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sibs_.Clear();
  scell_list_.Clear();
  if (GetArena() == nullptr && cell_ != nullptr) {
    delete cell_;
  }
  cell_ = nullptr;
  if (GetArena() == nullptr && pusch_hopping_cfg_ != nullptr) {
    delete pusch_hopping_cfg_;
  }
  pusch_hopping_cfg_ = nullptr;
  ::memset(&si_window_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srs_bw_config_) -
      reinterpret_cast<char*>(&si_window_ms_)) + sizeof(srs_bw_config_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cell_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.srsran_cell_t cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.cell_cfg_sib_t sibs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sibs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 si_window_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          si_window_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float target_pucch_ul_sinr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          target_pucch_ul_sinr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_pusch_hopping_cfg_t pusch_hopping_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pusch_hopping_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float target_pusch_ul_sinr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          target_pusch_ul_sinr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool enable_phr_handling = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_phr_handling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_64qam = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enable_64qam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prach_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          prach_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prach_nof_preambles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          prach_nof_preambles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prach_freq_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          prach_freq_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prach_rar_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          prach_rar_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prach_contention_resolution_timer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          prach_contention_resolution_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxharq_msg3tx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          maxharq_msg3tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n1pucch_an = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          n1pucch_an_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delta_pucch_shift = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          delta_pucch_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nrb_pucch = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          nrb_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nrb_cqi = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          nrb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ncs_an = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ncs_an_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 initial_dl_cqi = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          initial_dl_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 srs_subframe_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          srs_subframe_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 srs_subframe_offset = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          srs_subframe_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 srs_bw_config = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          srs_bw_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.scell_cfg_t scell_list = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_scell_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cell_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.cell_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_cell_t cell = 1;
  if (this->has_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell(this), target, stream);
  }

  // repeated .fs.mac_rrc.cell_cfg_sib_t sibs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sibs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sibs(i), target, stream);
  }

  // uint32 si_window_ms = 3;
  if (this->si_window_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_si_window_ms(), target);
  }

  // float target_pucch_ul_sinr = 4;
  if (!(this->target_pucch_ul_sinr() <= 0 && this->target_pucch_ul_sinr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_target_pucch_ul_sinr(), target);
  }

  // .fs.mac_rrc.srsran_pusch_hopping_cfg_t pusch_hopping_cfg = 5;
  if (this->has_pusch_hopping_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pusch_hopping_cfg(this), target, stream);
  }

  // float target_pusch_ul_sinr = 6;
  if (!(this->target_pusch_ul_sinr() <= 0 && this->target_pusch_ul_sinr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_target_pusch_ul_sinr(), target);
  }

  // bool enable_phr_handling = 7;
  if (this->enable_phr_handling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_phr_handling(), target);
  }

  // bool enable_64qam = 8;
  if (this->enable_64qam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_64qam(), target);
  }

  // uint32 prach_config = 9;
  if (this->prach_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_prach_config(), target);
  }

  // uint32 prach_nof_preambles = 10;
  if (this->prach_nof_preambles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_prach_nof_preambles(), target);
  }

  // uint32 prach_freq_offset = 11;
  if (this->prach_freq_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_prach_freq_offset(), target);
  }

  // uint32 prach_rar_window = 12;
  if (this->prach_rar_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_prach_rar_window(), target);
  }

  // uint32 prach_contention_resolution_timer = 13;
  if (this->prach_contention_resolution_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_prach_contention_resolution_timer(), target);
  }

  // uint32 maxharq_msg3tx = 14;
  if (this->maxharq_msg3tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_maxharq_msg3tx(), target);
  }

  // uint32 n1pucch_an = 15;
  if (this->n1pucch_an() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_n1pucch_an(), target);
  }

  // uint32 delta_pucch_shift = 16;
  if (this->delta_pucch_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_delta_pucch_shift(), target);
  }

  // int32 nrb_pucch = 17;
  if (this->nrb_pucch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_nrb_pucch(), target);
  }

  // uint32 nrb_cqi = 18;
  if (this->nrb_cqi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_nrb_cqi(), target);
  }

  // uint32 ncs_an = 19;
  if (this->ncs_an() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_ncs_an(), target);
  }

  // uint32 initial_dl_cqi = 20;
  if (this->initial_dl_cqi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_initial_dl_cqi(), target);
  }

  // uint32 srs_subframe_config = 21;
  if (this->srs_subframe_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_srs_subframe_config(), target);
  }

  // uint32 srs_subframe_offset = 22;
  if (this->srs_subframe_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_srs_subframe_offset(), target);
  }

  // uint32 srs_bw_config = 23;
  if (this->srs_bw_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_srs_bw_config(), target);
  }

  // repeated .fs.mac_rrc.scell_cfg_t scell_list = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scell_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_scell_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.cell_cfg_t)
  return target;
}

size_t cell_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.cell_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.cell_cfg_sib_t sibs = 2;
  total_size += 1UL * this->_internal_sibs_size();
  for (const auto& msg : this->sibs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_rrc.scell_cfg_t scell_list = 24;
  total_size += 2UL * this->_internal_scell_list_size();
  for (const auto& msg : this->scell_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.mac_rrc.srsran_cell_t cell = 1;
  if (this->has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);
  }

  // .fs.mac_rrc.srsran_pusch_hopping_cfg_t pusch_hopping_cfg = 5;
  if (this->has_pusch_hopping_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pusch_hopping_cfg_);
  }

  // uint32 si_window_ms = 3;
  if (this->si_window_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_si_window_ms());
  }

  // float target_pucch_ul_sinr = 4;
  if (!(this->target_pucch_ul_sinr() <= 0 && this->target_pucch_ul_sinr() >= 0)) {
    total_size += 1 + 4;
  }

  // float target_pusch_ul_sinr = 6;
  if (!(this->target_pusch_ul_sinr() <= 0 && this->target_pusch_ul_sinr() >= 0)) {
    total_size += 1 + 4;
  }

  // bool enable_phr_handling = 7;
  if (this->enable_phr_handling() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_64qam = 8;
  if (this->enable_64qam() != 0) {
    total_size += 1 + 1;
  }

  // uint32 prach_config = 9;
  if (this->prach_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prach_config());
  }

  // uint32 prach_nof_preambles = 10;
  if (this->prach_nof_preambles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prach_nof_preambles());
  }

  // uint32 prach_freq_offset = 11;
  if (this->prach_freq_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prach_freq_offset());
  }

  // uint32 prach_rar_window = 12;
  if (this->prach_rar_window() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prach_rar_window());
  }

  // uint32 prach_contention_resolution_timer = 13;
  if (this->prach_contention_resolution_timer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prach_contention_resolution_timer());
  }

  // uint32 maxharq_msg3tx = 14;
  if (this->maxharq_msg3tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxharq_msg3tx());
  }

  // uint32 n1pucch_an = 15;
  if (this->n1pucch_an() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n1pucch_an());
  }

  // uint32 delta_pucch_shift = 16;
  if (this->delta_pucch_shift() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delta_pucch_shift());
  }

  // int32 nrb_pucch = 17;
  if (this->nrb_pucch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nrb_pucch());
  }

  // uint32 nrb_cqi = 18;
  if (this->nrb_cqi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrb_cqi());
  }

  // uint32 ncs_an = 19;
  if (this->ncs_an() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ncs_an());
  }

  // uint32 initial_dl_cqi = 20;
  if (this->initial_dl_cqi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_initial_dl_cqi());
  }

  // uint32 srs_subframe_config = 21;
  if (this->srs_subframe_config() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srs_subframe_config());
  }

  // uint32 srs_subframe_offset = 22;
  if (this->srs_subframe_offset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srs_subframe_offset());
  }

  // uint32 srs_bw_config = 23;
  if (this->srs_bw_config() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srs_bw_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cell_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.cell_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const cell_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cell_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.cell_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.cell_cfg_t)
    MergeFrom(*source);
  }
}

void cell_cfg_t::MergeFrom(const cell_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.cell_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sibs_.MergeFrom(from.sibs_);
  scell_list_.MergeFrom(from.scell_list_);
  if (from.has_cell()) {
    _internal_mutable_cell()->::fs::mac_rrc::srsran_cell_t::MergeFrom(from._internal_cell());
  }
  if (from.has_pusch_hopping_cfg()) {
    _internal_mutable_pusch_hopping_cfg()->::fs::mac_rrc::srsran_pusch_hopping_cfg_t::MergeFrom(from._internal_pusch_hopping_cfg());
  }
  if (from.si_window_ms() != 0) {
    _internal_set_si_window_ms(from._internal_si_window_ms());
  }
  if (!(from.target_pucch_ul_sinr() <= 0 && from.target_pucch_ul_sinr() >= 0)) {
    _internal_set_target_pucch_ul_sinr(from._internal_target_pucch_ul_sinr());
  }
  if (!(from.target_pusch_ul_sinr() <= 0 && from.target_pusch_ul_sinr() >= 0)) {
    _internal_set_target_pusch_ul_sinr(from._internal_target_pusch_ul_sinr());
  }
  if (from.enable_phr_handling() != 0) {
    _internal_set_enable_phr_handling(from._internal_enable_phr_handling());
  }
  if (from.enable_64qam() != 0) {
    _internal_set_enable_64qam(from._internal_enable_64qam());
  }
  if (from.prach_config() != 0) {
    _internal_set_prach_config(from._internal_prach_config());
  }
  if (from.prach_nof_preambles() != 0) {
    _internal_set_prach_nof_preambles(from._internal_prach_nof_preambles());
  }
  if (from.prach_freq_offset() != 0) {
    _internal_set_prach_freq_offset(from._internal_prach_freq_offset());
  }
  if (from.prach_rar_window() != 0) {
    _internal_set_prach_rar_window(from._internal_prach_rar_window());
  }
  if (from.prach_contention_resolution_timer() != 0) {
    _internal_set_prach_contention_resolution_timer(from._internal_prach_contention_resolution_timer());
  }
  if (from.maxharq_msg3tx() != 0) {
    _internal_set_maxharq_msg3tx(from._internal_maxharq_msg3tx());
  }
  if (from.n1pucch_an() != 0) {
    _internal_set_n1pucch_an(from._internal_n1pucch_an());
  }
  if (from.delta_pucch_shift() != 0) {
    _internal_set_delta_pucch_shift(from._internal_delta_pucch_shift());
  }
  if (from.nrb_pucch() != 0) {
    _internal_set_nrb_pucch(from._internal_nrb_pucch());
  }
  if (from.nrb_cqi() != 0) {
    _internal_set_nrb_cqi(from._internal_nrb_cqi());
  }
  if (from.ncs_an() != 0) {
    _internal_set_ncs_an(from._internal_ncs_an());
  }
  if (from.initial_dl_cqi() != 0) {
    _internal_set_initial_dl_cqi(from._internal_initial_dl_cqi());
  }
  if (from.srs_subframe_config() != 0) {
    _internal_set_srs_subframe_config(from._internal_srs_subframe_config());
  }
  if (from.srs_subframe_offset() != 0) {
    _internal_set_srs_subframe_offset(from._internal_srs_subframe_offset());
  }
  if (from.srs_bw_config() != 0) {
    _internal_set_srs_bw_config(from._internal_srs_bw_config());
  }
}

void cell_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.cell_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cell_cfg_t::CopyFrom(const cell_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.cell_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cell_cfg_t::IsInitialized() const {
  return true;
}

void cell_cfg_t::InternalSwap(cell_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sibs_.InternalSwap(&other->sibs_);
  scell_list_.InternalSwap(&other->scell_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cell_cfg_t, srs_bw_config_)
      + sizeof(cell_cfg_t::srs_bw_config_)
      - PROTOBUF_FIELD_OFFSET(cell_cfg_t, cell_)>(
          reinterpret_cast<char*>(&cell_),
          reinterpret_cast<char*>(&other->cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cell_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vect_cell_cfg_t::InitAsDefaultInstance() {
}
class vect_cell_cfg_t::_Internal {
 public:
};

vect_cell_cfg_t::vect_cell_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vect_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.vect_cell_cfg_t)
}
vect_cell_cfg_t::vect_cell_cfg_t(const vect_cell_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vect_(from.vect_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.vect_cell_cfg_t)
}

void vect_cell_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_vect_cell_cfg_t_cell_5fcfg_5ft_2eproto.base);
}

vect_cell_cfg_t::~vect_cell_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.vect_cell_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void vect_cell_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void vect_cell_cfg_t::ArenaDtor(void* object) {
  vect_cell_cfg_t* _this = reinterpret_cast< vect_cell_cfg_t* >(object);
  (void)_this;
}
void vect_cell_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vect_cell_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vect_cell_cfg_t& vect_cell_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vect_cell_cfg_t_cell_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void vect_cell_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.vect_cell_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vect_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* vect_cell_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fs.mac_rrc.cell_cfg_t vect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vect_cell_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.vect_cell_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.cell_cfg_t vect = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vect(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.vect_cell_cfg_t)
  return target;
}

size_t vect_cell_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.vect_cell_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.cell_cfg_t vect = 1;
  total_size += 1UL * this->_internal_vect_size();
  for (const auto& msg : this->vect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vect_cell_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.vect_cell_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const vect_cell_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vect_cell_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.vect_cell_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.vect_cell_cfg_t)
    MergeFrom(*source);
  }
}

void vect_cell_cfg_t::MergeFrom(const vect_cell_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.vect_cell_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vect_.MergeFrom(from.vect_);
}

void vect_cell_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.vect_cell_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vect_cell_cfg_t::CopyFrom(const vect_cell_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.vect_cell_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vect_cell_cfg_t::IsInitialized() const {
  return true;
}

void vect_cell_cfg_t::InternalSwap(vect_cell_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vect_.InternalSwap(&other->vect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vect_cell_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mac_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_pusch_hopping_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_pusch_hopping_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_pusch_hopping_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::cell_cfg_sib_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::cell_cfg_sib_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::cell_cfg_sib_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_cell_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_cell_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_cell_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::scell_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::scell_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::scell_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::cell_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::cell_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::cell_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::vect_cell_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::vect_cell_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::vect_cell_cfg_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
