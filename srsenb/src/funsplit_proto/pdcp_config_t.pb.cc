// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdcp_config_t.proto

#include "srsenb/hdr/funsplit_proto/pdcp_config_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fs {
namespace pdcp_rrc {
class pdcp_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pdcp_config_t> _instance;
} _pdcp_config_t_default_instance_;
}  // namespace pdcp_rrc
}  // namespace fs
static void InitDefaultsscc_info_pdcp_config_t_pdcp_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::pdcp_rrc::_pdcp_config_t_default_instance_;
    new (ptr) ::fs::pdcp_rrc::pdcp_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::pdcp_rrc::pdcp_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pdcp_config_t_pdcp_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pdcp_config_t_pdcp_5fconfig_5ft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pdcp_5fconfig_5ft_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pdcp_5fconfig_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pdcp_5fconfig_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, bearer_id__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, rb_type__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, tx_direction__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, rx_direction__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, sn_len__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, t_reordering__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, discard_timer__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, status_report_required__),
  PROTOBUF_FIELD_OFFSET(::fs::pdcp_rrc::pdcp_config_t, rat__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::pdcp_rrc::pdcp_config_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::pdcp_rrc::_pdcp_config_t_default_instance_),
};

const char descriptor_table_protodef_pdcp_5fconfig_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023pdcp_config_t.proto\022\013fs.pdcp_rrc\"\225\003\n\rp"
  "dcp_config_t\022\022\n\nbearer_id_\030\001 \001(\r\022-\n\010rb_t"
  "ype_\030\002 \001(\0162\033.fs.pdcp_rrc.pdcp_rb_type_t\022"
  "8\n\rtx_direction_\030\003 \001(\0162!.fs.pdcp_rrc.sec"
  "urity_direction_t\0228\n\rrx_direction_\030\004 \001(\016"
  "2!.fs.pdcp_rrc.security_direction_t\022\017\n\007s"
  "n_len_\030\005 \001(\r\0227\n\rt_reordering_\030\006 \001(\0162 .fs"
  ".pdcp_rrc.pdcp_t_reordering_t\0229\n\016discard"
  "_timer_\030\007 \001(\0162!.fs.pdcp_rrc.pdcp_discard"
  "_timer_t\022\037\n\027status_report_required_\030\010 \001("
  "\010\022\'\n\004rat_\030\t \001(\0162\031.fs.pdcp_rrc.srsran_rat"
  "_t*8\n\016pdcp_rb_type_t\022\022\n\016PDCP_RB_IS_SRB\020\000"
  "\022\022\n\016PDCP_RB_IS_DRB\020\001*v\n\024security_directi"
  "on_t\022\035\n\031SECURITY_DIRECTION_UPLINK\020\000\022\037\n\033S"
  "ECURITY_DIRECTION_DOWNLINK\020\001\022\036\n\032SECURITY"
  "_DIRECTION_N_ITEMS\020\002*\272\003\n\023pdcp_t_reorderi"
  "ng_t\022\010\n\004ms_0\020\000\022\010\n\004ms_1\020\001\022\010\n\004ms_2\020\002\022\010\n\004ms"
  "_4\020\004\022\010\n\004ms_5\020\005\022\010\n\004ms_8\020\006\022\t\n\005ms_10\020\007\022\t\n\005m"
  "s_15\020\010\022\t\n\005ms_20\020\t\022\t\n\005ms_30\020\n\022\t\n\005ms_40\020\013\022"
  "\t\n\005ms_50\020\014\022\t\n\005ms_60\020\r\022\t\n\005ms_80\020\016\022\n\n\006ms_1"
  "00\020\017\022\n\n\006ms_120\020\020\022\n\n\006ms_140\020\021\022\n\n\006ms_160\020\022"
  "\022\n\n\006ms_180\020\023\022\n\n\006ms_200\020\024\022\n\n\006ms_220\020\025\022\n\n\006"
  "ms_240\020\026\022\n\n\006ms_260\020\027\022\n\n\006ms_280\020\030\022\n\n\006ms_3"
  "00\020\031\022\n\n\006ms_500\020\032\022\n\n\006ms_750\020\033\022\013\n\007ms_1000\020"
  "\034\022\013\n\007ms_1250\020\035\022\013\n\007ms_1500\020\036\022\013\n\007ms_1750\020\037"
  "\022\013\n\007ms_2000\020 \022\013\n\007ms_2250\020!\022\013\n\007ms_2500\020\"\022"
  "\013\n\007ms_2750\020#\022\013\n\007ms_3000\020$*\303\001\n\024pdcp_disca"
  "rd_timer_t\022\010\n\004ms10\020\000\022\010\n\004ms20\020\001\022\010\n\004ms30\020\002"
  "\022\010\n\004ms40\020\003\022\010\n\004ms50\020\004\022\010\n\004ms60\020\005\022\010\n\004ms75\020\006"
  "\022\t\n\005ms100\020\007\022\t\n\005ms150\020\010\022\t\n\005ms200\020\t\022\t\n\005ms2"
  "50\020\n\022\t\n\005ms300\020\013\022\t\n\005ms500\020\014\022\t\n\005ms750\020\r\022\n\n"
  "\006ms1500\020\016\022\014\n\010infinity\020\017*-\n\014srsran_rat_t\022"
  "\007\n\003lte\020\000\022\006\n\002nr\020\001\022\014\n\010nulltype\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pdcp_5fconfig_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pdcp_5fconfig_5ft_2eproto_sccs[1] = {
  &scc_info_pdcp_config_t_pdcp_5fconfig_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pdcp_5fconfig_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdcp_5fconfig_5ft_2eproto = {
  false, false, descriptor_table_protodef_pdcp_5fconfig_5ft_2eproto, "pdcp_config_t.proto", 1318,
  &descriptor_table_pdcp_5fconfig_5ft_2eproto_once, descriptor_table_pdcp_5fconfig_5ft_2eproto_sccs, descriptor_table_pdcp_5fconfig_5ft_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_pdcp_5fconfig_5ft_2eproto::offsets,
  file_level_metadata_pdcp_5fconfig_5ft_2eproto, 1, file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto, file_level_service_descriptors_pdcp_5fconfig_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pdcp_5fconfig_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pdcp_5fconfig_5ft_2eproto)), true);
namespace fs {
namespace pdcp_rrc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pdcp_rb_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdcp_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto[0];
}
bool pdcp_rb_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* security_direction_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdcp_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto[1];
}
bool security_direction_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pdcp_t_reordering_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdcp_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto[2];
}
bool pdcp_t_reordering_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* pdcp_discard_timer_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdcp_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto[3];
}
bool pdcp_discard_timer_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_rat_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdcp_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_pdcp_5fconfig_5ft_2eproto[4];
}
bool srsran_rat_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void pdcp_config_t::InitAsDefaultInstance() {
}
class pdcp_config_t::_Internal {
 public:
};

pdcp_config_t::pdcp_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.pdcp_rrc.pdcp_config_t)
}
pdcp_config_t::pdcp_config_t(const pdcp_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bearer_id__, &from.bearer_id__,
    static_cast<size_t>(reinterpret_cast<char*>(&rat__) -
    reinterpret_cast<char*>(&bearer_id__)) + sizeof(rat__));
  // @@protoc_insertion_point(copy_constructor:fs.pdcp_rrc.pdcp_config_t)
}

void pdcp_config_t::SharedCtor() {
  ::memset(&bearer_id__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rat__) -
      reinterpret_cast<char*>(&bearer_id__)) + sizeof(rat__));
}

pdcp_config_t::~pdcp_config_t() {
  // @@protoc_insertion_point(destructor:fs.pdcp_rrc.pdcp_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pdcp_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pdcp_config_t::ArenaDtor(void* object) {
  pdcp_config_t* _this = reinterpret_cast< pdcp_config_t* >(object);
  (void)_this;
}
void pdcp_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pdcp_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pdcp_config_t& pdcp_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pdcp_config_t_pdcp_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void pdcp_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.pdcp_rrc.pdcp_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bearer_id__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rat__) -
      reinterpret_cast<char*>(&bearer_id__)) + sizeof(rat__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pdcp_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 bearer_id_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bearer_id__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.pdcp_rb_type_t rb_type_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rb_type_(static_cast<::fs::pdcp_rrc::pdcp_rb_type_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.security_direction_t tx_direction_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tx_direction_(static_cast<::fs::pdcp_rrc::security_direction_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.security_direction_t rx_direction_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rx_direction_(static_cast<::fs::pdcp_rrc::security_direction_t>(val));
        } else goto handle_unusual;
        continue;
      // uint32 sn_len_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sn_len__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.pdcp_t_reordering_t t_reordering_ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_t_reordering_(static_cast<::fs::pdcp_rrc::pdcp_t_reordering_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.pdcp_discard_timer_t discard_timer_ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_discard_timer_(static_cast<::fs::pdcp_rrc::pdcp_discard_timer_t>(val));
        } else goto handle_unusual;
        continue;
      // bool status_report_required_ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_report_required__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.pdcp_rrc.srsran_rat_t rat_ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rat_(static_cast<::fs::pdcp_rrc::srsran_rat_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pdcp_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.pdcp_rrc.pdcp_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bearer_id_ = 1;
  if (this->bearer_id_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bearer_id_(), target);
  }

  // .fs.pdcp_rrc.pdcp_rb_type_t rb_type_ = 2;
  if (this->rb_type_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rb_type_(), target);
  }

  // .fs.pdcp_rrc.security_direction_t tx_direction_ = 3;
  if (this->tx_direction_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tx_direction_(), target);
  }

  // .fs.pdcp_rrc.security_direction_t rx_direction_ = 4;
  if (this->rx_direction_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rx_direction_(), target);
  }

  // uint32 sn_len_ = 5;
  if (this->sn_len_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sn_len_(), target);
  }

  // .fs.pdcp_rrc.pdcp_t_reordering_t t_reordering_ = 6;
  if (this->t_reordering_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_t_reordering_(), target);
  }

  // .fs.pdcp_rrc.pdcp_discard_timer_t discard_timer_ = 7;
  if (this->discard_timer_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_discard_timer_(), target);
  }

  // bool status_report_required_ = 8;
  if (this->status_report_required_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_status_report_required_(), target);
  }

  // .fs.pdcp_rrc.srsran_rat_t rat_ = 9;
  if (this->rat_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_rat_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.pdcp_rrc.pdcp_config_t)
  return target;
}

size_t pdcp_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.pdcp_rrc.pdcp_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bearer_id_ = 1;
  if (this->bearer_id_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bearer_id_());
  }

  // .fs.pdcp_rrc.pdcp_rb_type_t rb_type_ = 2;
  if (this->rb_type_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rb_type_());
  }

  // .fs.pdcp_rrc.security_direction_t tx_direction_ = 3;
  if (this->tx_direction_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tx_direction_());
  }

  // .fs.pdcp_rrc.security_direction_t rx_direction_ = 4;
  if (this->rx_direction_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rx_direction_());
  }

  // uint32 sn_len_ = 5;
  if (this->sn_len_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn_len_());
  }

  // .fs.pdcp_rrc.pdcp_t_reordering_t t_reordering_ = 6;
  if (this->t_reordering_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_t_reordering_());
  }

  // .fs.pdcp_rrc.pdcp_discard_timer_t discard_timer_ = 7;
  if (this->discard_timer_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_discard_timer_());
  }

  // bool status_report_required_ = 8;
  if (this->status_report_required_() != 0) {
    total_size += 1 + 1;
  }

  // .fs.pdcp_rrc.srsran_rat_t rat_ = 9;
  if (this->rat_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rat_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pdcp_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.pdcp_rrc.pdcp_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const pdcp_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pdcp_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.pdcp_rrc.pdcp_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.pdcp_rrc.pdcp_config_t)
    MergeFrom(*source);
  }
}

void pdcp_config_t::MergeFrom(const pdcp_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.pdcp_rrc.pdcp_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bearer_id_() != 0) {
    _internal_set_bearer_id_(from._internal_bearer_id_());
  }
  if (from.rb_type_() != 0) {
    _internal_set_rb_type_(from._internal_rb_type_());
  }
  if (from.tx_direction_() != 0) {
    _internal_set_tx_direction_(from._internal_tx_direction_());
  }
  if (from.rx_direction_() != 0) {
    _internal_set_rx_direction_(from._internal_rx_direction_());
  }
  if (from.sn_len_() != 0) {
    _internal_set_sn_len_(from._internal_sn_len_());
  }
  if (from.t_reordering_() != 0) {
    _internal_set_t_reordering_(from._internal_t_reordering_());
  }
  if (from.discard_timer_() != 0) {
    _internal_set_discard_timer_(from._internal_discard_timer_());
  }
  if (from.status_report_required_() != 0) {
    _internal_set_status_report_required_(from._internal_status_report_required_());
  }
  if (from.rat_() != 0) {
    _internal_set_rat_(from._internal_rat_());
  }
}

void pdcp_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.pdcp_rrc.pdcp_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pdcp_config_t::CopyFrom(const pdcp_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.pdcp_rrc.pdcp_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pdcp_config_t::IsInitialized() const {
  return true;
}

void pdcp_config_t::InternalSwap(pdcp_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pdcp_config_t, rat__)
      + sizeof(pdcp_config_t::rat__)
      - PROTOBUF_FIELD_OFFSET(pdcp_config_t, bearer_id__)>(
          reinterpret_cast<char*>(&bearer_id__),
          reinterpret_cast<char*>(&other->bearer_id__));
}

::PROTOBUF_NAMESPACE_ID::Metadata pdcp_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pdcp_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::pdcp_rrc::pdcp_config_t* Arena::CreateMaybeMessage< ::fs::pdcp_rrc::pdcp_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::pdcp_rrc::pdcp_config_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
