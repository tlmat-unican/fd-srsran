// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phy_mac.proto

#include "srsenb/hdr/funsplit_proto/phy_mac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_dl_sched_grant_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dl_sched_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_raw_buffer_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_srsran_dci_dl_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_location_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_tb_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type0_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type1_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type2_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto;
namespace fs {
namespace phy_mac {
class srsran_ra_type2_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_ra_type2_t> _instance;
} _srsran_ra_type2_t_default_instance_;
class srsran_ra_type1_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_ra_type1_t> _instance;
} _srsran_ra_type1_t_default_instance_;
class srsran_ra_type0_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_ra_type0_t> _instance;
} _srsran_ra_type0_t_default_instance_;
class srsran_dci_tb_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_dci_tb_t> _instance;
} _srsran_dci_tb_t_default_instance_;
class srsran_dci_location_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_dci_location_t> _instance;
} _srsran_dci_location_t_default_instance_;
class srsran_dci_dl_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_dci_dl_t> _instance;
} _srsran_dci_dl_t_default_instance_;
class raw_bufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<raw_buffer> _instance;
} _raw_buffer_default_instance_;
class srsran_softbuffer_tx_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_softbuffer_tx_t> _instance;
} _srsran_softbuffer_tx_t_default_instance_;
class dl_sched_grant_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dl_sched_grant_t> _instance;
} _dl_sched_grant_t_default_instance_;
class dl_sched_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dl_sched_t> _instance;
} _dl_sched_t_default_instance_;
class dl_sched_list_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dl_sched_list_t> _instance;
} _dl_sched_list_t_default_instance_;
}  // namespace phy_mac
}  // namespace fs
static void InitDefaultsscc_info_dl_sched_grant_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_dl_sched_grant_t_default_instance_;
    new (ptr) ::fs::phy_mac::dl_sched_grant_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::dl_sched_grant_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_dl_sched_grant_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_dl_sched_grant_t_phy_5fmac_2eproto}, {
      &scc_info_srsran_dci_dl_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto.base,}};

static void InitDefaultsscc_info_dl_sched_list_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_dl_sched_list_t_default_instance_;
    new (ptr) ::fs::phy_mac::dl_sched_list_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::dl_sched_list_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dl_sched_list_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_dl_sched_list_t_phy_5fmac_2eproto}, {
      &scc_info_dl_sched_t_phy_5fmac_2eproto.base,}};

static void InitDefaultsscc_info_dl_sched_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_dl_sched_t_default_instance_;
    new (ptr) ::fs::phy_mac::dl_sched_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::dl_sched_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dl_sched_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_dl_sched_t_phy_5fmac_2eproto}, {
      &scc_info_dl_sched_grant_t_phy_5fmac_2eproto.base,}};

static void InitDefaultsscc_info_raw_buffer_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_raw_buffer_default_instance_;
    new (ptr) ::fs::phy_mac::raw_buffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::raw_buffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_raw_buffer_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_raw_buffer_phy_5fmac_2eproto}, {}};

static void InitDefaultsscc_info_srsran_dci_dl_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_dci_dl_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_dci_dl_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_dci_dl_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_srsran_dci_dl_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_srsran_dci_dl_t_phy_5fmac_2eproto}, {
      &scc_info_srsran_dci_location_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_ra_type0_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_ra_type1_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_ra_type2_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_dci_tb_t_phy_5fmac_2eproto.base,}};

static void InitDefaultsscc_info_srsran_dci_location_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_dci_location_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_dci_location_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_dci_location_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_location_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_dci_location_t_phy_5fmac_2eproto}, {}};

static void InitDefaultsscc_info_srsran_dci_tb_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_dci_tb_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_dci_tb_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_dci_tb_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_tb_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_dci_tb_t_phy_5fmac_2eproto}, {}};

static void InitDefaultsscc_info_srsran_ra_type0_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_ra_type0_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_ra_type0_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_ra_type0_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type0_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_ra_type0_t_phy_5fmac_2eproto}, {}};

static void InitDefaultsscc_info_srsran_ra_type1_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_ra_type1_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_ra_type1_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_ra_type1_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type1_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_ra_type1_t_phy_5fmac_2eproto}, {}};

static void InitDefaultsscc_info_srsran_ra_type2_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_ra_type2_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_ra_type2_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_ra_type2_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type2_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_ra_type2_t_phy_5fmac_2eproto}, {}};

static void InitDefaultsscc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_mac::_srsran_softbuffer_tx_t_default_instance_;
    new (ptr) ::fs::phy_mac::srsran_softbuffer_tx_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_mac::srsran_softbuffer_tx_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto}, {
      &scc_info_raw_buffer_phy_5fmac_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_phy_5fmac_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_phy_5fmac_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_phy_5fmac_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_phy_5fmac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type2_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type2_t, riv_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type2_t, n_prb1a_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type2_t, n_gap_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type2_t, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type1_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type1_t, vrb_bitmask_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type1_t, rbg_subset_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type1_t, shift_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type0_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_ra_type0_t, rbg_bitmask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_tb_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_tb_t, mcs_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_tb_t, rv_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_tb_t, ndi_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_tb_t, cw_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_location_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_location_t, l_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_location_t, ncce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, tb_cw_swap_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, pconf_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, power_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, is_ra_order_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, cif_present_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, srs_request_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, srs_request_present_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, is_tdd_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, is_dwpts_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, sram_id_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, rnti_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, ue_cc_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, pinfo_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, tpc_pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, ra_preamble_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, ra_mask_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, cif_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, pid_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, dai_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, format_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, location_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, alloc_type_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, type0_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, type1_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, type2_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_dci_dl_t, tb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::raw_buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::raw_buffer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_softbuffer_tx_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_softbuffer_tx_t, max_cb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_softbuffer_tx_t, max_cb_size_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::srsran_softbuffer_tx_t, buffer_b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_grant_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_grant_t, dci_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_grant_t, data_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_grant_t, softbuffer_tx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_grant_t, data_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_t, cfi_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_t, nof_grants_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_t, pdsch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_list_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_mac::dl_sched_list_t, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::phy_mac::srsran_ra_type2_t)},
  { 9, -1, sizeof(::fs::phy_mac::srsran_ra_type1_t)},
  { 17, -1, sizeof(::fs::phy_mac::srsran_ra_type0_t)},
  { 23, -1, sizeof(::fs::phy_mac::srsran_dci_tb_t)},
  { 32, -1, sizeof(::fs::phy_mac::srsran_dci_location_t)},
  { 39, -1, sizeof(::fs::phy_mac::srsran_dci_dl_t)},
  { 70, -1, sizeof(::fs::phy_mac::raw_buffer)},
  { 76, -1, sizeof(::fs::phy_mac::srsran_softbuffer_tx_t)},
  { 84, -1, sizeof(::fs::phy_mac::dl_sched_grant_t)},
  { 93, -1, sizeof(::fs::phy_mac::dl_sched_t)},
  { 101, -1, sizeof(::fs::phy_mac::dl_sched_list_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_ra_type2_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_ra_type1_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_ra_type0_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_dci_tb_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_dci_location_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_dci_dl_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_raw_buffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_srsran_softbuffer_tx_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_dl_sched_grant_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_dl_sched_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_mac::_dl_sched_list_t_default_instance_),
};

const char descriptor_table_protodef_phy_5fmac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rphy_mac.proto\022\nfs.phy_mac\"N\n\021srsran_ra"
  "_type2_t\022\013\n\003riv\030\001 \001(\r\022\017\n\007n_prb1a\030\002 \001(\r\022\r"
  "\n\005n_gap\030\003 \001(\r\022\014\n\004mode\030\004 \001(\r\"K\n\021srsran_ra"
  "_type1_t\022\023\n\013vrb_bitmask\030\001 \001(\r\022\022\n\nrbg_sub"
  "set\030\002 \001(\r\022\r\n\005shift\030\003 \001(\010\"(\n\021srsran_ra_ty"
  "pe0_t\022\023\n\013rbg_bitmask\030\001 \001(\r\"K\n\017srsran_dci"
  "_tb_t\022\017\n\007mcs_idx\030\001 \001(\r\022\n\n\002rv\030\002 \001(\005\022\013\n\003nd"
  "i\030\003 \001(\010\022\016\n\006cw_idx\030\004 \001(\r\"0\n\025srsran_dci_lo"
  "cation_t\022\t\n\001L\030\001 \001(\r\022\014\n\004ncce\030\002 \001(\r\"\213\005\n\017sr"
  "sran_dci_dl_t\022\022\n\ntb_cw_swap\030\001 \001(\010\022\r\n\005pco"
  "nf\030\002 \001(\010\022\024\n\014power_offset\030\003 \001(\010\022\023\n\013is_ra_"
  "order\030\004 \001(\010\022\023\n\013cif_present\030\005 \001(\010\022\023\n\013srs_"
  "request\030\006 \001(\010\022\033\n\023srs_request_present\030\007 \001"
  "(\010\022\016\n\006is_tdd\030\010 \001(\010\022\020\n\010is_dwpts\030\t \001(\010\022\017\n\007"
  "sram_id\030\n \001(\010\022\014\n\004rnti\030\013 \001(\r\022\021\n\tue_cc_idx"
  "\030\014 \001(\r\022\r\n\005pinfo\030\r \001(\r\022\021\n\ttpc_pucch\030\016 \001(\r"
  "\022\023\n\013ra_preamble\030\017 \001(\r\022\023\n\013ra_mask_idx\030\020 \001"
  "(\r\022\013\n\003cif\030\021 \001(\r\022\013\n\003pid\030\022 \001(\r\022\013\n\003dai\030\023 \001("
  "\r\022\016\n\006format\030\024 \001(\005\0223\n\010location\030\025 \001(\0132!.fs"
  ".phy_mac.srsran_dci_location_t\022\022\n\nalloc_"
  "type\030\026 \001(\005\0222\n\013type0_alloc\030\027 \001(\0132\035.fs.phy"
  "_mac.srsran_ra_type0_t\0222\n\013type1_alloc\030\030 "
  "\001(\0132\035.fs.phy_mac.srsran_ra_type1_t\0222\n\013ty"
  "pe2_alloc\030\031 \001(\0132\035.fs.phy_mac.srsran_ra_t"
  "ype2_t\022\'\n\002tb\030\032 \003(\0132\033.fs.phy_mac.srsran_d"
  "ci_tb_t\"\032\n\nraw_buffer\022\014\n\004data\030\001 \001(\014\"g\n\026s"
  "rsran_softbuffer_tx_t\022\016\n\006max_cb\030\001 \001(\r\022\023\n"
  "\013max_cb_size\030\002 \001(\r\022(\n\010buffer_b\030\003 \003(\0132\026.f"
  "s.phy_mac.raw_buffer\"\227\001\n\020dl_sched_grant_"
  "t\022(\n\003dci\030\001 \001(\0132\033.fs.phy_mac.srsran_dci_d"
  "l_t\022\014\n\004data\030\002 \003(\014\0229\n\rsoftbuffer_tx\030\003 \003(\013"
  "2\".fs.phy_mac.srsran_softbuffer_tx_t\022\020\n\010"
  "data_len\030\004 \003(\r\"Z\n\ndl_sched_t\022\013\n\003cfi\030\001 \001("
  "\r\022\022\n\nnof_grants\030\002 \001(\r\022+\n\005pdsch\030\003 \003(\0132\034.f"
  "s.phy_mac.dl_sched_grant_t\"7\n\017dl_sched_l"
  "ist_t\022$\n\004list\030\001 \003(\0132\026.fs.phy_mac.dl_sche"
  "d_tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_phy_5fmac_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_phy_5fmac_2eproto_sccs[11] = {
  &scc_info_dl_sched_grant_t_phy_5fmac_2eproto.base,
  &scc_info_dl_sched_list_t_phy_5fmac_2eproto.base,
  &scc_info_dl_sched_t_phy_5fmac_2eproto.base,
  &scc_info_raw_buffer_phy_5fmac_2eproto.base,
  &scc_info_srsran_dci_dl_t_phy_5fmac_2eproto.base,
  &scc_info_srsran_dci_location_t_phy_5fmac_2eproto.base,
  &scc_info_srsran_dci_tb_t_phy_5fmac_2eproto.base,
  &scc_info_srsran_ra_type0_t_phy_5fmac_2eproto.base,
  &scc_info_srsran_ra_type1_t_phy_5fmac_2eproto.base,
  &scc_info_srsran_ra_type2_t_phy_5fmac_2eproto.base,
  &scc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_phy_5fmac_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phy_5fmac_2eproto = {
  false, false, descriptor_table_protodef_phy_5fmac_2eproto, "phy_mac.proto", 1451,
  &descriptor_table_phy_5fmac_2eproto_once, descriptor_table_phy_5fmac_2eproto_sccs, descriptor_table_phy_5fmac_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_phy_5fmac_2eproto::offsets,
  file_level_metadata_phy_5fmac_2eproto, 11, file_level_enum_descriptors_phy_5fmac_2eproto, file_level_service_descriptors_phy_5fmac_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_phy_5fmac_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_phy_5fmac_2eproto)), true);
namespace fs {
namespace phy_mac {

// ===================================================================

void srsran_ra_type2_t::InitAsDefaultInstance() {
}
class srsran_ra_type2_t::_Internal {
 public:
};

srsran_ra_type2_t::srsran_ra_type2_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_ra_type2_t)
}
srsran_ra_type2_t::srsran_ra_type2_t(const srsran_ra_type2_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&riv_, &from.riv_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&riv_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_ra_type2_t)
}

void srsran_ra_type2_t::SharedCtor() {
  ::memset(&riv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&riv_)) + sizeof(mode_));
}

srsran_ra_type2_t::~srsran_ra_type2_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_ra_type2_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_ra_type2_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_ra_type2_t::ArenaDtor(void* object) {
  srsran_ra_type2_t* _this = reinterpret_cast< srsran_ra_type2_t* >(object);
  (void)_this;
}
void srsran_ra_type2_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_ra_type2_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_ra_type2_t& srsran_ra_type2_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_ra_type2_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_ra_type2_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_ra_type2_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&riv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&riv_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_ra_type2_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 riv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          riv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_prb1a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_prb1a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_gap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_ra_type2_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_ra_type2_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 riv = 1;
  if (this->riv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_riv(), target);
  }

  // uint32 n_prb1a = 2;
  if (this->n_prb1a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n_prb1a(), target);
  }

  // uint32 n_gap = 3;
  if (this->n_gap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_n_gap(), target);
  }

  // uint32 mode = 4;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_ra_type2_t)
  return target;
}

size_t srsran_ra_type2_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_ra_type2_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 riv = 1;
  if (this->riv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_riv());
  }

  // uint32 n_prb1a = 2;
  if (this->n_prb1a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_prb1a());
  }

  // uint32 n_gap = 3;
  if (this->n_gap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_gap());
  }

  // uint32 mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_ra_type2_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_ra_type2_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_ra_type2_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_ra_type2_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_ra_type2_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_ra_type2_t)
    MergeFrom(*source);
  }
}

void srsran_ra_type2_t::MergeFrom(const srsran_ra_type2_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_ra_type2_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.riv() != 0) {
    _internal_set_riv(from._internal_riv());
  }
  if (from.n_prb1a() != 0) {
    _internal_set_n_prb1a(from._internal_n_prb1a());
  }
  if (from.n_gap() != 0) {
    _internal_set_n_gap(from._internal_n_gap());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void srsran_ra_type2_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_ra_type2_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_ra_type2_t::CopyFrom(const srsran_ra_type2_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_ra_type2_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_ra_type2_t::IsInitialized() const {
  return true;
}

void srsran_ra_type2_t::InternalSwap(srsran_ra_type2_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_ra_type2_t, mode_)
      + sizeof(srsran_ra_type2_t::mode_)
      - PROTOBUF_FIELD_OFFSET(srsran_ra_type2_t, riv_)>(
          reinterpret_cast<char*>(&riv_),
          reinterpret_cast<char*>(&other->riv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_ra_type2_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_ra_type1_t::InitAsDefaultInstance() {
}
class srsran_ra_type1_t::_Internal {
 public:
};

srsran_ra_type1_t::srsran_ra_type1_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_ra_type1_t)
}
srsran_ra_type1_t::srsran_ra_type1_t(const srsran_ra_type1_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vrb_bitmask_, &from.vrb_bitmask_,
    static_cast<size_t>(reinterpret_cast<char*>(&shift_) -
    reinterpret_cast<char*>(&vrb_bitmask_)) + sizeof(shift_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_ra_type1_t)
}

void srsran_ra_type1_t::SharedCtor() {
  ::memset(&vrb_bitmask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shift_) -
      reinterpret_cast<char*>(&vrb_bitmask_)) + sizeof(shift_));
}

srsran_ra_type1_t::~srsran_ra_type1_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_ra_type1_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_ra_type1_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_ra_type1_t::ArenaDtor(void* object) {
  srsran_ra_type1_t* _this = reinterpret_cast< srsran_ra_type1_t* >(object);
  (void)_this;
}
void srsran_ra_type1_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_ra_type1_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_ra_type1_t& srsran_ra_type1_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_ra_type1_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_ra_type1_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_ra_type1_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vrb_bitmask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shift_) -
      reinterpret_cast<char*>(&vrb_bitmask_)) + sizeof(shift_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_ra_type1_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 vrb_bitmask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vrb_bitmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rbg_subset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rbg_subset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_ra_type1_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_ra_type1_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vrb_bitmask = 1;
  if (this->vrb_bitmask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vrb_bitmask(), target);
  }

  // uint32 rbg_subset = 2;
  if (this->rbg_subset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rbg_subset(), target);
  }

  // bool shift = 3;
  if (this->shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_ra_type1_t)
  return target;
}

size_t srsran_ra_type1_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_ra_type1_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vrb_bitmask = 1;
  if (this->vrb_bitmask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vrb_bitmask());
  }

  // uint32 rbg_subset = 2;
  if (this->rbg_subset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rbg_subset());
  }

  // bool shift = 3;
  if (this->shift() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_ra_type1_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_ra_type1_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_ra_type1_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_ra_type1_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_ra_type1_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_ra_type1_t)
    MergeFrom(*source);
  }
}

void srsran_ra_type1_t::MergeFrom(const srsran_ra_type1_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_ra_type1_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrb_bitmask() != 0) {
    _internal_set_vrb_bitmask(from._internal_vrb_bitmask());
  }
  if (from.rbg_subset() != 0) {
    _internal_set_rbg_subset(from._internal_rbg_subset());
  }
  if (from.shift() != 0) {
    _internal_set_shift(from._internal_shift());
  }
}

void srsran_ra_type1_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_ra_type1_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_ra_type1_t::CopyFrom(const srsran_ra_type1_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_ra_type1_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_ra_type1_t::IsInitialized() const {
  return true;
}

void srsran_ra_type1_t::InternalSwap(srsran_ra_type1_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_ra_type1_t, shift_)
      + sizeof(srsran_ra_type1_t::shift_)
      - PROTOBUF_FIELD_OFFSET(srsran_ra_type1_t, vrb_bitmask_)>(
          reinterpret_cast<char*>(&vrb_bitmask_),
          reinterpret_cast<char*>(&other->vrb_bitmask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_ra_type1_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_ra_type0_t::InitAsDefaultInstance() {
}
class srsran_ra_type0_t::_Internal {
 public:
};

srsran_ra_type0_t::srsran_ra_type0_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_ra_type0_t)
}
srsran_ra_type0_t::srsran_ra_type0_t(const srsran_ra_type0_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rbg_bitmask_ = from.rbg_bitmask_;
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_ra_type0_t)
}

void srsran_ra_type0_t::SharedCtor() {
  rbg_bitmask_ = 0u;
}

srsran_ra_type0_t::~srsran_ra_type0_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_ra_type0_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_ra_type0_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_ra_type0_t::ArenaDtor(void* object) {
  srsran_ra_type0_t* _this = reinterpret_cast< srsran_ra_type0_t* >(object);
  (void)_this;
}
void srsran_ra_type0_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_ra_type0_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_ra_type0_t& srsran_ra_type0_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_ra_type0_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_ra_type0_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_ra_type0_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rbg_bitmask_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_ra_type0_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rbg_bitmask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rbg_bitmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_ra_type0_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_ra_type0_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rbg_bitmask = 1;
  if (this->rbg_bitmask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rbg_bitmask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_ra_type0_t)
  return target;
}

size_t srsran_ra_type0_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_ra_type0_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rbg_bitmask = 1;
  if (this->rbg_bitmask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rbg_bitmask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_ra_type0_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_ra_type0_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_ra_type0_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_ra_type0_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_ra_type0_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_ra_type0_t)
    MergeFrom(*source);
  }
}

void srsran_ra_type0_t::MergeFrom(const srsran_ra_type0_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_ra_type0_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rbg_bitmask() != 0) {
    _internal_set_rbg_bitmask(from._internal_rbg_bitmask());
  }
}

void srsran_ra_type0_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_ra_type0_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_ra_type0_t::CopyFrom(const srsran_ra_type0_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_ra_type0_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_ra_type0_t::IsInitialized() const {
  return true;
}

void srsran_ra_type0_t::InternalSwap(srsran_ra_type0_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rbg_bitmask_, other->rbg_bitmask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_ra_type0_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_dci_tb_t::InitAsDefaultInstance() {
}
class srsran_dci_tb_t::_Internal {
 public:
};

srsran_dci_tb_t::srsran_dci_tb_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_dci_tb_t)
}
srsran_dci_tb_t::srsran_dci_tb_t(const srsran_dci_tb_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mcs_idx_, &from.mcs_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&cw_idx_) -
    reinterpret_cast<char*>(&mcs_idx_)) + sizeof(cw_idx_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_dci_tb_t)
}

void srsran_dci_tb_t::SharedCtor() {
  ::memset(&mcs_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cw_idx_) -
      reinterpret_cast<char*>(&mcs_idx_)) + sizeof(cw_idx_));
}

srsran_dci_tb_t::~srsran_dci_tb_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_dci_tb_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_dci_tb_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_dci_tb_t::ArenaDtor(void* object) {
  srsran_dci_tb_t* _this = reinterpret_cast< srsran_dci_tb_t* >(object);
  (void)_this;
}
void srsran_dci_tb_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_dci_tb_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_dci_tb_t& srsran_dci_tb_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_dci_tb_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_dci_tb_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_dci_tb_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mcs_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cw_idx_) -
      reinterpret_cast<char*>(&mcs_idx_)) + sizeof(cw_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_dci_tb_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mcs_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mcs_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ndi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ndi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cw_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_dci_tb_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_dci_tb_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mcs_idx = 1;
  if (this->mcs_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mcs_idx(), target);
  }

  // int32 rv = 2;
  if (this->rv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rv(), target);
  }

  // bool ndi = 3;
  if (this->ndi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ndi(), target);
  }

  // uint32 cw_idx = 4;
  if (this->cw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cw_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_dci_tb_t)
  return target;
}

size_t srsran_dci_tb_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_dci_tb_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mcs_idx = 1;
  if (this->mcs_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mcs_idx());
  }

  // int32 rv = 2;
  if (this->rv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rv());
  }

  // bool ndi = 3;
  if (this->ndi() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cw_idx = 4;
  if (this->cw_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cw_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_dci_tb_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_dci_tb_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_dci_tb_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_dci_tb_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_dci_tb_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_dci_tb_t)
    MergeFrom(*source);
  }
}

void srsran_dci_tb_t::MergeFrom(const srsran_dci_tb_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_dci_tb_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mcs_idx() != 0) {
    _internal_set_mcs_idx(from._internal_mcs_idx());
  }
  if (from.rv() != 0) {
    _internal_set_rv(from._internal_rv());
  }
  if (from.ndi() != 0) {
    _internal_set_ndi(from._internal_ndi());
  }
  if (from.cw_idx() != 0) {
    _internal_set_cw_idx(from._internal_cw_idx());
  }
}

void srsran_dci_tb_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_dci_tb_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_dci_tb_t::CopyFrom(const srsran_dci_tb_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_dci_tb_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_dci_tb_t::IsInitialized() const {
  return true;
}

void srsran_dci_tb_t::InternalSwap(srsran_dci_tb_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_dci_tb_t, cw_idx_)
      + sizeof(srsran_dci_tb_t::cw_idx_)
      - PROTOBUF_FIELD_OFFSET(srsran_dci_tb_t, mcs_idx_)>(
          reinterpret_cast<char*>(&mcs_idx_),
          reinterpret_cast<char*>(&other->mcs_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_dci_tb_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_dci_location_t::InitAsDefaultInstance() {
}
class srsran_dci_location_t::_Internal {
 public:
};

srsran_dci_location_t::srsran_dci_location_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_dci_location_t)
}
srsran_dci_location_t::srsran_dci_location_t(const srsran_dci_location_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&l_, &from.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&ncce_) -
    reinterpret_cast<char*>(&l_)) + sizeof(ncce_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_dci_location_t)
}

void srsran_dci_location_t::SharedCtor() {
  ::memset(&l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ncce_) -
      reinterpret_cast<char*>(&l_)) + sizeof(ncce_));
}

srsran_dci_location_t::~srsran_dci_location_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_dci_location_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_dci_location_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_dci_location_t::ArenaDtor(void* object) {
  srsran_dci_location_t* _this = reinterpret_cast< srsran_dci_location_t* >(object);
  (void)_this;
}
void srsran_dci_location_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_dci_location_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_dci_location_t& srsran_dci_location_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_dci_location_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_dci_location_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_dci_location_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ncce_) -
      reinterpret_cast<char*>(&l_)) + sizeof(ncce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_dci_location_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 L = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ncce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ncce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_dci_location_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_dci_location_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 L = 1;
  if (this->l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_l(), target);
  }

  // uint32 ncce = 2;
  if (this->ncce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ncce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_dci_location_t)
  return target;
}

size_t srsran_dci_location_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_dci_location_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 L = 1;
  if (this->l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l());
  }

  // uint32 ncce = 2;
  if (this->ncce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ncce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_dci_location_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_dci_location_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_dci_location_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_dci_location_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_dci_location_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_dci_location_t)
    MergeFrom(*source);
  }
}

void srsran_dci_location_t::MergeFrom(const srsran_dci_location_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_dci_location_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.l() != 0) {
    _internal_set_l(from._internal_l());
  }
  if (from.ncce() != 0) {
    _internal_set_ncce(from._internal_ncce());
  }
}

void srsran_dci_location_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_dci_location_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_dci_location_t::CopyFrom(const srsran_dci_location_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_dci_location_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_dci_location_t::IsInitialized() const {
  return true;
}

void srsran_dci_location_t::InternalSwap(srsran_dci_location_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_dci_location_t, ncce_)
      + sizeof(srsran_dci_location_t::ncce_)
      - PROTOBUF_FIELD_OFFSET(srsran_dci_location_t, l_)>(
          reinterpret_cast<char*>(&l_),
          reinterpret_cast<char*>(&other->l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_dci_location_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_dci_dl_t::InitAsDefaultInstance() {
  ::fs::phy_mac::_srsran_dci_dl_t_default_instance_._instance.get_mutable()->location_ = const_cast< ::fs::phy_mac::srsran_dci_location_t*>(
      ::fs::phy_mac::srsran_dci_location_t::internal_default_instance());
  ::fs::phy_mac::_srsran_dci_dl_t_default_instance_._instance.get_mutable()->type0_alloc_ = const_cast< ::fs::phy_mac::srsran_ra_type0_t*>(
      ::fs::phy_mac::srsran_ra_type0_t::internal_default_instance());
  ::fs::phy_mac::_srsran_dci_dl_t_default_instance_._instance.get_mutable()->type1_alloc_ = const_cast< ::fs::phy_mac::srsran_ra_type1_t*>(
      ::fs::phy_mac::srsran_ra_type1_t::internal_default_instance());
  ::fs::phy_mac::_srsran_dci_dl_t_default_instance_._instance.get_mutable()->type2_alloc_ = const_cast< ::fs::phy_mac::srsran_ra_type2_t*>(
      ::fs::phy_mac::srsran_ra_type2_t::internal_default_instance());
}
class srsran_dci_dl_t::_Internal {
 public:
  static const ::fs::phy_mac::srsran_dci_location_t& location(const srsran_dci_dl_t* msg);
  static const ::fs::phy_mac::srsran_ra_type0_t& type0_alloc(const srsran_dci_dl_t* msg);
  static const ::fs::phy_mac::srsran_ra_type1_t& type1_alloc(const srsran_dci_dl_t* msg);
  static const ::fs::phy_mac::srsran_ra_type2_t& type2_alloc(const srsran_dci_dl_t* msg);
};

const ::fs::phy_mac::srsran_dci_location_t&
srsran_dci_dl_t::_Internal::location(const srsran_dci_dl_t* msg) {
  return *msg->location_;
}
const ::fs::phy_mac::srsran_ra_type0_t&
srsran_dci_dl_t::_Internal::type0_alloc(const srsran_dci_dl_t* msg) {
  return *msg->type0_alloc_;
}
const ::fs::phy_mac::srsran_ra_type1_t&
srsran_dci_dl_t::_Internal::type1_alloc(const srsran_dci_dl_t* msg) {
  return *msg->type1_alloc_;
}
const ::fs::phy_mac::srsran_ra_type2_t&
srsran_dci_dl_t::_Internal::type2_alloc(const srsran_dci_dl_t* msg) {
  return *msg->type2_alloc_;
}
srsran_dci_dl_t::srsran_dci_dl_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tb_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_dci_dl_t)
}
srsran_dci_dl_t::srsran_dci_dl_t(const srsran_dci_dl_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tb_(from.tb_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::fs::phy_mac::srsran_dci_location_t(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_type0_alloc()) {
    type0_alloc_ = new ::fs::phy_mac::srsran_ra_type0_t(*from.type0_alloc_);
  } else {
    type0_alloc_ = nullptr;
  }
  if (from._internal_has_type1_alloc()) {
    type1_alloc_ = new ::fs::phy_mac::srsran_ra_type1_t(*from.type1_alloc_);
  } else {
    type1_alloc_ = nullptr;
  }
  if (from._internal_has_type2_alloc()) {
    type2_alloc_ = new ::fs::phy_mac::srsran_ra_type2_t(*from.type2_alloc_);
  } else {
    type2_alloc_ = nullptr;
  }
  ::memcpy(&tb_cw_swap_, &from.tb_cw_swap_,
    static_cast<size_t>(reinterpret_cast<char*>(&alloc_type_) -
    reinterpret_cast<char*>(&tb_cw_swap_)) + sizeof(alloc_type_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_dci_dl_t)
}

void srsran_dci_dl_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_dci_dl_t_phy_5fmac_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alloc_type_) -
      reinterpret_cast<char*>(&location_)) + sizeof(alloc_type_));
}

srsran_dci_dl_t::~srsran_dci_dl_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_dci_dl_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_dci_dl_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete type0_alloc_;
  if (this != internal_default_instance()) delete type1_alloc_;
  if (this != internal_default_instance()) delete type2_alloc_;
}

void srsran_dci_dl_t::ArenaDtor(void* object) {
  srsran_dci_dl_t* _this = reinterpret_cast< srsran_dci_dl_t* >(object);
  (void)_this;
}
void srsran_dci_dl_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_dci_dl_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_dci_dl_t& srsran_dci_dl_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_dci_dl_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_dci_dl_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_dci_dl_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tb_.Clear();
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && type0_alloc_ != nullptr) {
    delete type0_alloc_;
  }
  type0_alloc_ = nullptr;
  if (GetArena() == nullptr && type1_alloc_ != nullptr) {
    delete type1_alloc_;
  }
  type1_alloc_ = nullptr;
  if (GetArena() == nullptr && type2_alloc_ != nullptr) {
    delete type2_alloc_;
  }
  type2_alloc_ = nullptr;
  ::memset(&tb_cw_swap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alloc_type_) -
      reinterpret_cast<char*>(&tb_cw_swap_)) + sizeof(alloc_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_dci_dl_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool tb_cw_swap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tb_cw_swap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pconf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pconf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool power_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          power_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ra_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_ra_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cif_present = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cif_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool srs_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          srs_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool srs_request_present = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          srs_request_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_tdd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_tdd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_dwpts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_dwpts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sram_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          sram_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rnti = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ue_cc_idx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ue_cc_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pinfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          pinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tpc_pucch = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tpc_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ra_preamble = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ra_preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ra_mask_idx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ra_mask_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cif = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          cif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dai = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          dai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_dci_location_t location = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alloc_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          alloc_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_ra_type0_t type0_alloc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_type0_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_ra_type1_t type1_alloc = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_type1_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_type2_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.phy_mac.srsran_dci_tb_t tb = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_dci_dl_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_dci_dl_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool tb_cw_swap = 1;
  if (this->tb_cw_swap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_tb_cw_swap(), target);
  }

  // bool pconf = 2;
  if (this->pconf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pconf(), target);
  }

  // bool power_offset = 3;
  if (this->power_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_power_offset(), target);
  }

  // bool is_ra_order = 4;
  if (this->is_ra_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_ra_order(), target);
  }

  // bool cif_present = 5;
  if (this->cif_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cif_present(), target);
  }

  // bool srs_request = 6;
  if (this->srs_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_srs_request(), target);
  }

  // bool srs_request_present = 7;
  if (this->srs_request_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_srs_request_present(), target);
  }

  // bool is_tdd = 8;
  if (this->is_tdd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_tdd(), target);
  }

  // bool is_dwpts = 9;
  if (this->is_dwpts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_dwpts(), target);
  }

  // bool sram_id = 10;
  if (this->sram_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_sram_id(), target);
  }

  // uint32 rnti = 11;
  if (this->rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rnti(), target);
  }

  // uint32 ue_cc_idx = 12;
  if (this->ue_cc_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ue_cc_idx(), target);
  }

  // uint32 pinfo = 13;
  if (this->pinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_pinfo(), target);
  }

  // uint32 tpc_pucch = 14;
  if (this->tpc_pucch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tpc_pucch(), target);
  }

  // uint32 ra_preamble = 15;
  if (this->ra_preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ra_preamble(), target);
  }

  // uint32 ra_mask_idx = 16;
  if (this->ra_mask_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_ra_mask_idx(), target);
  }

  // uint32 cif = 17;
  if (this->cif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_cif(), target);
  }

  // uint32 pid = 18;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_pid(), target);
  }

  // uint32 dai = 19;
  if (this->dai() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_dai(), target);
  }

  // int32 format = 20;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_format(), target);
  }

  // .fs.phy_mac.srsran_dci_location_t location = 21;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::location(this), target, stream);
  }

  // int32 alloc_type = 22;
  if (this->alloc_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_alloc_type(), target);
  }

  // .fs.phy_mac.srsran_ra_type0_t type0_alloc = 23;
  if (this->has_type0_alloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::type0_alloc(this), target, stream);
  }

  // .fs.phy_mac.srsran_ra_type1_t type1_alloc = 24;
  if (this->has_type1_alloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::type1_alloc(this), target, stream);
  }

  // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 25;
  if (this->has_type2_alloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::type2_alloc(this), target, stream);
  }

  // repeated .fs.phy_mac.srsran_dci_tb_t tb = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_tb(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_dci_dl_t)
  return target;
}

size_t srsran_dci_dl_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_dci_dl_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.phy_mac.srsran_dci_tb_t tb = 26;
  total_size += 2UL * this->_internal_tb_size();
  for (const auto& msg : this->tb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.phy_mac.srsran_dci_location_t location = 21;
  if (this->has_location()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .fs.phy_mac.srsran_ra_type0_t type0_alloc = 23;
  if (this->has_type0_alloc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type0_alloc_);
  }

  // .fs.phy_mac.srsran_ra_type1_t type1_alloc = 24;
  if (this->has_type1_alloc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type1_alloc_);
  }

  // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 25;
  if (this->has_type2_alloc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type2_alloc_);
  }

  // bool tb_cw_swap = 1;
  if (this->tb_cw_swap() != 0) {
    total_size += 1 + 1;
  }

  // bool pconf = 2;
  if (this->pconf() != 0) {
    total_size += 1 + 1;
  }

  // bool power_offset = 3;
  if (this->power_offset() != 0) {
    total_size += 1 + 1;
  }

  // bool is_ra_order = 4;
  if (this->is_ra_order() != 0) {
    total_size += 1 + 1;
  }

  // bool cif_present = 5;
  if (this->cif_present() != 0) {
    total_size += 1 + 1;
  }

  // bool srs_request = 6;
  if (this->srs_request() != 0) {
    total_size += 1 + 1;
  }

  // bool srs_request_present = 7;
  if (this->srs_request_present() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tdd = 8;
  if (this->is_tdd() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dwpts = 9;
  if (this->is_dwpts() != 0) {
    total_size += 1 + 1;
  }

  // bool sram_id = 10;
  if (this->sram_id() != 0) {
    total_size += 1 + 1;
  }

  // uint32 rnti = 11;
  if (this->rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  // uint32 ue_cc_idx = 12;
  if (this->ue_cc_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ue_cc_idx());
  }

  // uint32 pinfo = 13;
  if (this->pinfo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pinfo());
  }

  // uint32 tpc_pucch = 14;
  if (this->tpc_pucch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tpc_pucch());
  }

  // uint32 ra_preamble = 15;
  if (this->ra_preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ra_preamble());
  }

  // uint32 ra_mask_idx = 16;
  if (this->ra_mask_idx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ra_mask_idx());
  }

  // uint32 cif = 17;
  if (this->cif() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cif());
  }

  // uint32 pid = 18;
  if (this->pid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 dai = 19;
  if (this->dai() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dai());
  }

  // int32 format = 20;
  if (this->format() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // int32 alloc_type = 22;
  if (this->alloc_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_alloc_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_dci_dl_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_dci_dl_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_dci_dl_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_dci_dl_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_dci_dl_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_dci_dl_t)
    MergeFrom(*source);
  }
}

void srsran_dci_dl_t::MergeFrom(const srsran_dci_dl_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_dci_dl_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tb_.MergeFrom(from.tb_);
  if (from.has_location()) {
    _internal_mutable_location()->::fs::phy_mac::srsran_dci_location_t::MergeFrom(from._internal_location());
  }
  if (from.has_type0_alloc()) {
    _internal_mutable_type0_alloc()->::fs::phy_mac::srsran_ra_type0_t::MergeFrom(from._internal_type0_alloc());
  }
  if (from.has_type1_alloc()) {
    _internal_mutable_type1_alloc()->::fs::phy_mac::srsran_ra_type1_t::MergeFrom(from._internal_type1_alloc());
  }
  if (from.has_type2_alloc()) {
    _internal_mutable_type2_alloc()->::fs::phy_mac::srsran_ra_type2_t::MergeFrom(from._internal_type2_alloc());
  }
  if (from.tb_cw_swap() != 0) {
    _internal_set_tb_cw_swap(from._internal_tb_cw_swap());
  }
  if (from.pconf() != 0) {
    _internal_set_pconf(from._internal_pconf());
  }
  if (from.power_offset() != 0) {
    _internal_set_power_offset(from._internal_power_offset());
  }
  if (from.is_ra_order() != 0) {
    _internal_set_is_ra_order(from._internal_is_ra_order());
  }
  if (from.cif_present() != 0) {
    _internal_set_cif_present(from._internal_cif_present());
  }
  if (from.srs_request() != 0) {
    _internal_set_srs_request(from._internal_srs_request());
  }
  if (from.srs_request_present() != 0) {
    _internal_set_srs_request_present(from._internal_srs_request_present());
  }
  if (from.is_tdd() != 0) {
    _internal_set_is_tdd(from._internal_is_tdd());
  }
  if (from.is_dwpts() != 0) {
    _internal_set_is_dwpts(from._internal_is_dwpts());
  }
  if (from.sram_id() != 0) {
    _internal_set_sram_id(from._internal_sram_id());
  }
  if (from.rnti() != 0) {
    _internal_set_rnti(from._internal_rnti());
  }
  if (from.ue_cc_idx() != 0) {
    _internal_set_ue_cc_idx(from._internal_ue_cc_idx());
  }
  if (from.pinfo() != 0) {
    _internal_set_pinfo(from._internal_pinfo());
  }
  if (from.tpc_pucch() != 0) {
    _internal_set_tpc_pucch(from._internal_tpc_pucch());
  }
  if (from.ra_preamble() != 0) {
    _internal_set_ra_preamble(from._internal_ra_preamble());
  }
  if (from.ra_mask_idx() != 0) {
    _internal_set_ra_mask_idx(from._internal_ra_mask_idx());
  }
  if (from.cif() != 0) {
    _internal_set_cif(from._internal_cif());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.dai() != 0) {
    _internal_set_dai(from._internal_dai());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.alloc_type() != 0) {
    _internal_set_alloc_type(from._internal_alloc_type());
  }
}

void srsran_dci_dl_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_dci_dl_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_dci_dl_t::CopyFrom(const srsran_dci_dl_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_dci_dl_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_dci_dl_t::IsInitialized() const {
  return true;
}

void srsran_dci_dl_t::InternalSwap(srsran_dci_dl_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tb_.InternalSwap(&other->tb_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_dci_dl_t, alloc_type_)
      + sizeof(srsran_dci_dl_t::alloc_type_)
      - PROTOBUF_FIELD_OFFSET(srsran_dci_dl_t, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_dci_dl_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void raw_buffer::InitAsDefaultInstance() {
}
class raw_buffer::_Internal {
 public:
};

raw_buffer::raw_buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.raw_buffer)
}
raw_buffer::raw_buffer(const raw_buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.raw_buffer)
}

void raw_buffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_raw_buffer_phy_5fmac_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

raw_buffer::~raw_buffer() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.raw_buffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void raw_buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void raw_buffer::ArenaDtor(void* object) {
  raw_buffer* _this = reinterpret_cast< raw_buffer* >(object);
  (void)_this;
}
void raw_buffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void raw_buffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const raw_buffer& raw_buffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_raw_buffer_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void raw_buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.raw_buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* raw_buffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* raw_buffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.raw_buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.raw_buffer)
  return target;
}

size_t raw_buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.raw_buffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void raw_buffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.raw_buffer)
  GOOGLE_DCHECK_NE(&from, this);
  const raw_buffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<raw_buffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.raw_buffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.raw_buffer)
    MergeFrom(*source);
  }
}

void raw_buffer::MergeFrom(const raw_buffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.raw_buffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void raw_buffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.raw_buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raw_buffer::CopyFrom(const raw_buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.raw_buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raw_buffer::IsInitialized() const {
  return true;
}

void raw_buffer::InternalSwap(raw_buffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata raw_buffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_softbuffer_tx_t::InitAsDefaultInstance() {
}
class srsran_softbuffer_tx_t::_Internal {
 public:
};

srsran_softbuffer_tx_t::srsran_softbuffer_tx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buffer_b_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.srsran_softbuffer_tx_t)
}
srsran_softbuffer_tx_t::srsran_softbuffer_tx_t(const srsran_softbuffer_tx_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_b_(from.buffer_b_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_cb_, &from.max_cb_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_cb_size_) -
    reinterpret_cast<char*>(&max_cb_)) + sizeof(max_cb_size_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.srsran_softbuffer_tx_t)
}

void srsran_softbuffer_tx_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto.base);
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cb_size_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(max_cb_size_));
}

srsran_softbuffer_tx_t::~srsran_softbuffer_tx_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.srsran_softbuffer_tx_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_softbuffer_tx_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_softbuffer_tx_t::ArenaDtor(void* object) {
  srsran_softbuffer_tx_t* _this = reinterpret_cast< srsran_softbuffer_tx_t* >(object);
  (void)_this;
}
void srsran_softbuffer_tx_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_softbuffer_tx_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_softbuffer_tx_t& srsran_softbuffer_tx_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_softbuffer_tx_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void srsran_softbuffer_tx_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.srsran_softbuffer_tx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_b_.Clear();
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cb_size_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(max_cb_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_softbuffer_tx_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_cb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_cb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_cb_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_cb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.phy_mac.raw_buffer buffer_b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer_b(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_softbuffer_tx_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.srsran_softbuffer_tx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_cb(), target);
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_cb_size(), target);
  }

  // repeated .fs.phy_mac.raw_buffer buffer_b = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buffer_b_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buffer_b(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.srsran_softbuffer_tx_t)
  return target;
}

size_t srsran_softbuffer_tx_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.srsran_softbuffer_tx_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.phy_mac.raw_buffer buffer_b = 3;
  total_size += 1UL * this->_internal_buffer_b_size();
  for (const auto& msg : this->buffer_b_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb());
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_softbuffer_tx_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.srsran_softbuffer_tx_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_softbuffer_tx_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_softbuffer_tx_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.srsran_softbuffer_tx_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.srsran_softbuffer_tx_t)
    MergeFrom(*source);
  }
}

void srsran_softbuffer_tx_t::MergeFrom(const srsran_softbuffer_tx_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.srsran_softbuffer_tx_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_b_.MergeFrom(from.buffer_b_);
  if (from.max_cb() != 0) {
    _internal_set_max_cb(from._internal_max_cb());
  }
  if (from.max_cb_size() != 0) {
    _internal_set_max_cb_size(from._internal_max_cb_size());
  }
}

void srsran_softbuffer_tx_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.srsran_softbuffer_tx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_softbuffer_tx_t::CopyFrom(const srsran_softbuffer_tx_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.srsran_softbuffer_tx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_softbuffer_tx_t::IsInitialized() const {
  return true;
}

void srsran_softbuffer_tx_t::InternalSwap(srsran_softbuffer_tx_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buffer_b_.InternalSwap(&other->buffer_b_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_softbuffer_tx_t, max_cb_size_)
      + sizeof(srsran_softbuffer_tx_t::max_cb_size_)
      - PROTOBUF_FIELD_OFFSET(srsran_softbuffer_tx_t, max_cb_)>(
          reinterpret_cast<char*>(&max_cb_),
          reinterpret_cast<char*>(&other->max_cb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_softbuffer_tx_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dl_sched_grant_t::InitAsDefaultInstance() {
  ::fs::phy_mac::_dl_sched_grant_t_default_instance_._instance.get_mutable()->dci_ = const_cast< ::fs::phy_mac::srsran_dci_dl_t*>(
      ::fs::phy_mac::srsran_dci_dl_t::internal_default_instance());
}
class dl_sched_grant_t::_Internal {
 public:
  static const ::fs::phy_mac::srsran_dci_dl_t& dci(const dl_sched_grant_t* msg);
};

const ::fs::phy_mac::srsran_dci_dl_t&
dl_sched_grant_t::_Internal::dci(const dl_sched_grant_t* msg) {
  return *msg->dci_;
}
dl_sched_grant_t::dl_sched_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena),
  softbuffer_tx_(arena),
  data_len_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.dl_sched_grant_t)
}
dl_sched_grant_t::dl_sched_grant_t(const dl_sched_grant_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_),
      softbuffer_tx_(from.softbuffer_tx_),
      data_len_(from.data_len_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dci()) {
    dci_ = new ::fs::phy_mac::srsran_dci_dl_t(*from.dci_);
  } else {
    dci_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.dl_sched_grant_t)
}

void dl_sched_grant_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dl_sched_grant_t_phy_5fmac_2eproto.base);
  dci_ = nullptr;
}

dl_sched_grant_t::~dl_sched_grant_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.dl_sched_grant_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dl_sched_grant_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dci_;
}

void dl_sched_grant_t::ArenaDtor(void* object) {
  dl_sched_grant_t* _this = reinterpret_cast< dl_sched_grant_t* >(object);
  (void)_this;
}
void dl_sched_grant_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dl_sched_grant_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dl_sched_grant_t& dl_sched_grant_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dl_sched_grant_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void dl_sched_grant_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.dl_sched_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  softbuffer_tx_.Clear();
  data_len_.Clear();
  if (GetArena() == nullptr && dci_ != nullptr) {
    delete dci_;
  }
  dci_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dl_sched_grant_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.phy_mac.srsran_dci_dl_t dci = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.phy_mac.srsran_softbuffer_tx_t softbuffer_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_softbuffer_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 data_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data_len(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_data_len(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dl_sched_grant_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.dl_sched_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.phy_mac.srsran_dci_dl_t dci = 1;
  if (this->has_dci()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dci(this), target, stream);
  }

  // repeated bytes data = 2;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .fs.phy_mac.srsran_softbuffer_tx_t softbuffer_tx = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_softbuffer_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_softbuffer_tx(i), target, stream);
  }

  // repeated uint32 data_len = 4;
  {
    int byte_size = _data_len_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_data_len(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.dl_sched_grant_t)
  return target;
}

size_t dl_sched_grant_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.dl_sched_grant_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  // repeated .fs.phy_mac.srsran_softbuffer_tx_t softbuffer_tx = 3;
  total_size += 1UL * this->_internal_softbuffer_tx_size();
  for (const auto& msg : this->softbuffer_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 data_len = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_len_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_len_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .fs.phy_mac.srsran_dci_dl_t dci = 1;
  if (this->has_dci()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dci_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dl_sched_grant_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.dl_sched_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  const dl_sched_grant_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dl_sched_grant_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.dl_sched_grant_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.dl_sched_grant_t)
    MergeFrom(*source);
  }
}

void dl_sched_grant_t::MergeFrom(const dl_sched_grant_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.dl_sched_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  softbuffer_tx_.MergeFrom(from.softbuffer_tx_);
  data_len_.MergeFrom(from.data_len_);
  if (from.has_dci()) {
    _internal_mutable_dci()->::fs::phy_mac::srsran_dci_dl_t::MergeFrom(from._internal_dci());
  }
}

void dl_sched_grant_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.dl_sched_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dl_sched_grant_t::CopyFrom(const dl_sched_grant_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.dl_sched_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dl_sched_grant_t::IsInitialized() const {
  return true;
}

void dl_sched_grant_t::InternalSwap(dl_sched_grant_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  softbuffer_tx_.InternalSwap(&other->softbuffer_tx_);
  data_len_.InternalSwap(&other->data_len_);
  swap(dci_, other->dci_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dl_sched_grant_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dl_sched_t::InitAsDefaultInstance() {
}
class dl_sched_t::_Internal {
 public:
};

dl_sched_t::dl_sched_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pdsch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.dl_sched_t)
}
dl_sched_t::dl_sched_t(const dl_sched_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pdsch_(from.pdsch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cfi_, &from.cfi_,
    static_cast<size_t>(reinterpret_cast<char*>(&nof_grants_) -
    reinterpret_cast<char*>(&cfi_)) + sizeof(nof_grants_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.dl_sched_t)
}

void dl_sched_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dl_sched_t_phy_5fmac_2eproto.base);
  ::memset(&cfi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_grants_) -
      reinterpret_cast<char*>(&cfi_)) + sizeof(nof_grants_));
}

dl_sched_t::~dl_sched_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.dl_sched_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dl_sched_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dl_sched_t::ArenaDtor(void* object) {
  dl_sched_t* _this = reinterpret_cast< dl_sched_t* >(object);
  (void)_this;
}
void dl_sched_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dl_sched_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dl_sched_t& dl_sched_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dl_sched_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void dl_sched_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.dl_sched_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pdsch_.Clear();
  ::memset(&cfi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_grants_) -
      reinterpret_cast<char*>(&cfi_)) + sizeof(nof_grants_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dl_sched_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cfi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cfi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_grants = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nof_grants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.phy_mac.dl_sched_grant_t pdsch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pdsch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dl_sched_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.dl_sched_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cfi = 1;
  if (this->cfi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cfi(), target);
  }

  // uint32 nof_grants = 2;
  if (this->nof_grants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nof_grants(), target);
  }

  // repeated .fs.phy_mac.dl_sched_grant_t pdsch = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pdsch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pdsch(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.dl_sched_t)
  return target;
}

size_t dl_sched_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.dl_sched_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.phy_mac.dl_sched_grant_t pdsch = 3;
  total_size += 1UL * this->_internal_pdsch_size();
  for (const auto& msg : this->pdsch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 cfi = 1;
  if (this->cfi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cfi());
  }

  // uint32 nof_grants = 2;
  if (this->nof_grants() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_grants());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dl_sched_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.dl_sched_t)
  GOOGLE_DCHECK_NE(&from, this);
  const dl_sched_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dl_sched_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.dl_sched_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.dl_sched_t)
    MergeFrom(*source);
  }
}

void dl_sched_t::MergeFrom(const dl_sched_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.dl_sched_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pdsch_.MergeFrom(from.pdsch_);
  if (from.cfi() != 0) {
    _internal_set_cfi(from._internal_cfi());
  }
  if (from.nof_grants() != 0) {
    _internal_set_nof_grants(from._internal_nof_grants());
  }
}

void dl_sched_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.dl_sched_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dl_sched_t::CopyFrom(const dl_sched_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.dl_sched_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dl_sched_t::IsInitialized() const {
  return true;
}

void dl_sched_t::InternalSwap(dl_sched_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pdsch_.InternalSwap(&other->pdsch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dl_sched_t, nof_grants_)
      + sizeof(dl_sched_t::nof_grants_)
      - PROTOBUF_FIELD_OFFSET(dl_sched_t, cfi_)>(
          reinterpret_cast<char*>(&cfi_),
          reinterpret_cast<char*>(&other->cfi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dl_sched_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dl_sched_list_t::InitAsDefaultInstance() {
}
class dl_sched_list_t::_Internal {
 public:
};

dl_sched_list_t::dl_sched_list_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_mac.dl_sched_list_t)
}
dl_sched_list_t::dl_sched_list_t(const dl_sched_list_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.phy_mac.dl_sched_list_t)
}

void dl_sched_list_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dl_sched_list_t_phy_5fmac_2eproto.base);
}

dl_sched_list_t::~dl_sched_list_t() {
  // @@protoc_insertion_point(destructor:fs.phy_mac.dl_sched_list_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dl_sched_list_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dl_sched_list_t::ArenaDtor(void* object) {
  dl_sched_list_t* _this = reinterpret_cast< dl_sched_list_t* >(object);
  (void)_this;
}
void dl_sched_list_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dl_sched_list_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dl_sched_list_t& dl_sched_list_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dl_sched_list_t_phy_5fmac_2eproto.base);
  return *internal_default_instance();
}


void dl_sched_list_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_mac.dl_sched_list_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dl_sched_list_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fs.phy_mac.dl_sched_t list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dl_sched_list_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_mac.dl_sched_list_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.phy_mac.dl_sched_t list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_mac.dl_sched_list_t)
  return target;
}

size_t dl_sched_list_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_mac.dl_sched_list_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.phy_mac.dl_sched_t list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dl_sched_list_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_mac.dl_sched_list_t)
  GOOGLE_DCHECK_NE(&from, this);
  const dl_sched_list_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dl_sched_list_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_mac.dl_sched_list_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_mac.dl_sched_list_t)
    MergeFrom(*source);
  }
}

void dl_sched_list_t::MergeFrom(const dl_sched_list_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_mac.dl_sched_list_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void dl_sched_list_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_mac.dl_sched_list_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dl_sched_list_t::CopyFrom(const dl_sched_list_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_mac.dl_sched_list_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dl_sched_list_t::IsInitialized() const {
  return true;
}

void dl_sched_list_t::InternalSwap(dl_sched_list_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dl_sched_list_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace phy_mac
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_ra_type2_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_ra_type2_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_ra_type2_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_ra_type1_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_ra_type1_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_ra_type1_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_ra_type0_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_ra_type0_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_ra_type0_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_dci_tb_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_dci_tb_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_dci_tb_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_dci_location_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_dci_location_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_dci_location_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_dci_dl_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_dci_dl_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_dci_dl_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::raw_buffer* Arena::CreateMaybeMessage< ::fs::phy_mac::raw_buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::raw_buffer >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::srsran_softbuffer_tx_t* Arena::CreateMaybeMessage< ::fs::phy_mac::srsran_softbuffer_tx_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::srsran_softbuffer_tx_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::dl_sched_grant_t* Arena::CreateMaybeMessage< ::fs::phy_mac::dl_sched_grant_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::dl_sched_grant_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::dl_sched_t* Arena::CreateMaybeMessage< ::fs::phy_mac::dl_sched_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::dl_sched_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_mac::dl_sched_list_t* Arena::CreateMaybeMessage< ::fs::phy_mac::dl_sched_list_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_mac::dl_sched_list_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
