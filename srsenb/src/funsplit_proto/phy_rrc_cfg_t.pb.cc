// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phy_rrc_cfg_t.proto

#include "srsenb/hdr/funsplit_proto/phy_rrc_cfg_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cell_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5frrc_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto;
namespace fs {
namespace phy_rrc {
class srsran_tdd_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_tdd_config_t> _instance;
} _srsran_tdd_config_t_default_instance_;
class srsran_prach_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_prach_cfg_t> _instance;
} _srsran_prach_cfg_t_default_instance_;
class srsran_refsignal_srs_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_refsignal_srs_cfg_t> _instance;
} _srsran_refsignal_srs_cfg_t_default_instance_;
class srsran_refsignal_dmrs_pusch_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_refsignal_dmrs_pusch_cfg_t> _instance;
} _srsran_refsignal_dmrs_pusch_cfg_t_default_instance_;
class srsran_ue_ul_powerctrl_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_ue_ul_powerctrl_t> _instance;
} _srsran_ue_ul_powerctrl_t_default_instance_;
class srsran_pusch_grant_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_pusch_grant_t> _instance;
} _srsran_pusch_grant_t_default_instance_;
class srsran_pusch_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_pusch_cfg_t> _instance;
} _srsran_pusch_cfg_t_default_instance_;
class srsran_ul_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_ul_cfg_t> _instance;
} _srsran_ul_cfg_t_default_instance_;
class phy_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<phy_cfg_t> _instance;
} _phy_cfg_t_default_instance_;
class phy_rrc_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<phy_rrc_cfg_t> _instance;
} _phy_rrc_cfg_t_default_instance_;
class phy_rrc_cfg_list_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<phy_rrc_cfg_list_t> _instance;
} _phy_rrc_cfg_list_t_default_instance_;
}  // namespace phy_rrc
}  // namespace fs
static void InitDefaultsscc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_phy_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::phy_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::phy_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_phy_rrc_cfg_list_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_phy_rrc_cfg_list_t_default_instance_;
    new (ptr) ::fs::phy_rrc::phy_rrc_cfg_list_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::phy_rrc_cfg_list_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_phy_rrc_cfg_list_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_phy_rrc_cfg_list_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_phy_rrc_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::phy_rrc_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::phy_rrc_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_prach_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_prach_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_prach_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_pusch_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_pusch_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_pusch_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_pusch_grant_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_pusch_grant_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_pusch_grant_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_refsignal_dmrs_pusch_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_refsignal_srs_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_refsignal_srs_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_refsignal_srs_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_tdd_config_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_tdd_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_tdd_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_ue_ul_powerctrl_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_ue_ul_powerctrl_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_ue_ul_powerctrl_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_;
    new (ptr) ::fs::phy_rrc::srsran_ul_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::phy_rrc::srsran_ul_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_pusch_hopping_cfg_t_cell_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_phy_5frrc_5fcfg_5ft_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_phy_5frrc_5fcfg_5ft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_phy_5frrc_5fcfg_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_phy_5frrc_5fcfg_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_tdd_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_tdd_config_t, configured_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_tdd_config_t, sf_config_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_tdd_config_t, ss_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, is_nr_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, hs_flag_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, enable_successive_cancellation_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, enable_freq_domain_offset_calc_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, config_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, root_seq_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, zero_corr_zone_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, freq_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, num_ra_preambles_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_prach_cfg_t, tdd_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, simul_ack_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, dedicated_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, common_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, configured_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, subframe_config_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, bw_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, b_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, b_hop_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, n_srs_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, i_srs_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, k_tc_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_srs_cfg_t, n_rrc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t, group_hopping_en_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t, sequence_hopping_en_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t, cyclic_shift_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t, delta_ss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, delta_mcs_based_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, acc_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, p0_nominal_pusch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, alpha_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, p0_nominal_pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, delta_preamble_msg3_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, p0_ue_pusch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, p0_ue_pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, p_srs_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ue_ul_powerctrl_t, delta_f_pucch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, is_rar_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, n_dmrs_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, l_prb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, freq_hopping_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, nof_re_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, nof_symb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, tb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, last_tb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, n_prb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_grant_t, n_prb_tilde_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, rnti_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, max_nof_iterations_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, last_o_cqi_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, k_segm_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, current_tx_nb_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, csi_enable_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, enable_64qam_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, meas_time_en_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, meas_time_value_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, meas_epre_en_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, meas_ta_en_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, meas_evm_en_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, uci_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, uci_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, grant_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, tx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_pusch_cfg_t, rx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, hopping_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, pusch_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, power_ctrl_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, dmrs_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::srsran_ul_cfg_t, srs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_cfg_t, prach_cfg_present_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_cfg_t, dl_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_cfg_t, ul_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_cfg_t, prach_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_rrc_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_rrc_cfg_t, configured_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_rrc_cfg_t, enb_cc_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_rrc_cfg_t, phy_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_rrc_cfg_list_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::phy_rrc::phy_rrc_cfg_list_t, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::phy_rrc::srsran_tdd_config_t)},
  { 8, -1, sizeof(::fs::phy_rrc::srsran_prach_cfg_t)},
  { 23, -1, sizeof(::fs::phy_rrc::srsran_refsignal_srs_cfg_t)},
  { 40, -1, sizeof(::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t)},
  { 49, -1, sizeof(::fs::phy_rrc::srsran_ue_ul_powerctrl_t)},
  { 64, -1, sizeof(::fs::phy_rrc::srsran_pusch_grant_t)},
  { 79, -1, sizeof(::fs::phy_rrc::srsran_pusch_cfg_t)},
  { 101, -1, sizeof(::fs::phy_rrc::srsran_ul_cfg_t)},
  { 112, -1, sizeof(::fs::phy_rrc::phy_cfg_t)},
  { 121, -1, sizeof(::fs::phy_rrc::phy_rrc_cfg_t)},
  { 129, -1, sizeof(::fs::phy_rrc::phy_rrc_cfg_list_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_tdd_config_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_prach_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_refsignal_srs_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_refsignal_dmrs_pusch_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_ue_ul_powerctrl_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_pusch_grant_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_pusch_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_phy_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_phy_rrc_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::phy_rrc::_phy_rrc_cfg_list_t_default_instance_),
};

const char descriptor_table_protodef_phy_5frrc_5fcfg_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023phy_rrc_cfg_t.proto\022\nfs.phy_rrc\032\016ue_cf"
  "g_t.proto\032\020cell_cfg_t.proto\"O\n\023srsran_td"
  "d_config_t\022\022\n\nconfigured\030\001 \001(\010\022\021\n\tsf_con"
  "fig\030\002 \001(\r\022\021\n\tss_config\030\003 \001(\r\"\252\002\n\022srsran_"
  "prach_cfg_t\022\r\n\005is_nr\030\001 \001(\010\022\017\n\007hs_flag\030\002 "
  "\001(\010\022&\n\036enable_successive_cancellation\030\003 "
  "\001(\010\022&\n\036enable_freq_domain_offset_calc\030\004 "
  "\001(\010\022\022\n\nconfig_idx\030\005 \001(\r\022\024\n\014root_seq_idx\030"
  "\006 \001(\r\022\026\n\016zero_corr_zone\030\007 \001(\r\022\023\n\013freq_of"
  "fset\030\010 \001(\r\022\030\n\020num_ra_preambles\030\t \001(\r\0223\n\n"
  "tdd_config\030\n \001(\0132\037.fs.phy_rrc.srsran_tdd"
  "_config_t\"\364\001\n\032srsran_refsignal_srs_cfg_t"
  "\022\021\n\tsimul_ack\030\001 \001(\010\022\031\n\021dedicated_enabled"
  "\030\002 \001(\010\022\026\n\016common_enabled\030\003 \001(\010\022\022\n\nconfig"
  "ured\030\004 \001(\010\022\027\n\017subframe_config\030\005 \001(\r\022\016\n\006b"
  "w_cfg\030\006 \001(\r\022\t\n\001B\030\007 \001(\r\022\r\n\005b_hop\030\010 \001(\r\022\r\n"
  "\005n_srs\030\t \001(\r\022\r\n\005I_srs\030\n \001(\r\022\014\n\004k_tc\030\013 \001("
  "\r\022\r\n\005n_rrc\030\014 \001(\r\"\202\001\n!srsran_refsignal_dm"
  "rs_pusch_cfg_t\022\030\n\020group_hopping_en\030\001 \001(\010"
  "\022\033\n\023sequence_hopping_en\030\002 \001(\010\022\024\n\014cyclic_"
  "shift\030\003 \001(\r\022\020\n\010delta_ss\030\004 \001(\r\"\377\001\n\030srsran"
  "_ue_ul_powerctrl_t\022\027\n\017delta_mcs_based\030\001 "
  "\001(\010\022\023\n\013acc_enabled\030\002 \001(\010\022\030\n\020p0_nominal_p"
  "usch\030\003 \001(\002\022\r\n\005alpha\030\004 \001(\002\022\030\n\020p0_nominal_"
  "pucch\030\005 \001(\002\022\033\n\023delta_preamble_msg3\030\006 \001(\002"
  "\022\023\n\013p0_ue_pusch\030\007 \001(\002\022\023\n\013p0_ue_pucch\030\010 \001"
  "(\002\022\024\n\014p_srs_offset\030\t \001(\002\022\025\n\rdelta_f_pucc"
  "h\030\n \003(\002\"\366\001\n\024srsran_pusch_grant_t\022\016\n\006is_r"
  "ar\030\001 \001(\010\022\016\n\006n_dmrs\030\002 \001(\r\022\r\n\005L_prb\030\003 \001(\r\022"
  "\024\n\014freq_hopping\030\004 \001(\r\022\016\n\006nof_re\030\005 \001(\r\022\020\n"
  "\010nof_symb\030\006 \001(\r\022&\n\002tb\030\007 \001(\0132\032.fs.mac_rrc"
  ".srsran_ra_tb_t\022+\n\007last_tb\030\010 \001(\0132\032.fs.ma"
  "c_rrc.srsran_ra_tb_t\022\r\n\005n_prb\030\t \003(\r\022\023\n\013n"
  "_prb_tilde\030\n \003(\r\"\212\004\n\022srsran_pusch_cfg_t\022"
  "\014\n\004rnti\030\001 \001(\r\022\032\n\022max_nof_iterations\030\002 \001("
  "\r\022\022\n\nlast_O_cqi\030\003 \001(\r\022\016\n\006K_segm\030\004 \001(\r\022\025\n"
  "\rcurrent_tx_nb\030\005 \001(\r\022\022\n\ncsi_enable\030\006 \001(\010"
  "\022\024\n\014enable_64qam\030\007 \001(\010\022\024\n\014meas_time_en\030\010"
  " \001(\010\022\027\n\017meas_time_value\030\t \001(\r\022\024\n\014meas_ep"
  "re_en\030\n \001(\010\022\022\n\nmeas_ta_en\030\013 \001(\010\022\023\n\013meas_"
  "evm_en\030\014 \001(\010\022-\n\007uci_cfg\030\r \001(\0132\034.fs.mac_r"
  "rc.srsran_uci_cfg_t\0227\n\nuci_offset\030\016 \001(\0132"
  "#.fs.mac_rrc.srsran_uci_offset_cfg_t\022/\n\005"
  "grant\030\017 \001(\0132 .fs.phy_rrc.srsran_pusch_gr"
  "ant_t\022.\n\002tx\030\020 \003(\0132\".fs.mac_rrc.srsran_so"
  "ftbuffer_tx_t\022.\n\002rx\030\021 \003(\0132\".fs.mac_rrc.s"
  "rsran_softbuffer_rx_t\"\324\002\n\017srsran_ul_cfg_"
  "t\022-\n\005pucch\030\001 \001(\0132\036.fs.mac_rrc.srsran_puc"
  "ch_cfg_t\0227\n\007hopping\030\002 \001(\0132&.fs.mac_rrc.s"
  "rsran_pusch_hopping_cfg_t\022-\n\005pusch\030\003 \001(\013"
  "2\036.fs.phy_rrc.srsran_pusch_cfg_t\0228\n\npowe"
  "r_ctrl\030\004 \001(\0132$.fs.phy_rrc.srsran_ue_ul_p"
  "owerctrl_t\022;\n\004dmrs\030\005 \001(\0132-.fs.phy_rrc.sr"
  "sran_refsignal_dmrs_pusch_cfg_t\0223\n\003srs\030\006"
  " \001(\0132&.fs.phy_rrc.srsran_refsignal_srs_c"
  "fg_t\"\263\001\n\tphy_cfg_t\022\031\n\021prach_cfg_present\030"
  "\001 \001(\010\022+\n\006dl_cfg\030\002 \001(\0132\033.fs.mac_rrc.srsra"
  "n_dl_cfg_t\022+\n\006ul_cfg\030\003 \001(\0132\033.fs.phy_rrc."
  "srsran_ul_cfg_t\0221\n\tprach_cfg\030\004 \001(\0132\036.fs."
  "phy_rrc.srsran_prach_cfg_t\"_\n\rphy_rrc_cf"
  "g_t\022\022\n\nconfigured\030\001 \001(\010\022\022\n\nenb_cc_idx\030\002 "
  "\001(\r\022&\n\007phy_cfg\030\003 \001(\0132\025.fs.phy_rrc.phy_cf"
  "g_t\"=\n\022phy_rrc_cfg_list_t\022\'\n\004list\030\001 \003(\0132"
  "\031.fs.phy_rrc.phy_rrc_cfg_tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_phy_5frrc_5fcfg_5ft_2eproto_deps[2] = {
  &::descriptor_table_cell_5fcfg_5ft_2eproto,
  &::descriptor_table_ue_5fcfg_5ft_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_phy_5frrc_5fcfg_5ft_2eproto_sccs[11] = {
  &scc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_phy_rrc_cfg_list_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_phy_5frrc_5fcfg_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phy_5frrc_5fcfg_5ft_2eproto = {
  false, false, descriptor_table_protodef_phy_5frrc_5fcfg_5ft_2eproto, "phy_rrc_cfg_t.proto", 2554,
  &descriptor_table_phy_5frrc_5fcfg_5ft_2eproto_once, descriptor_table_phy_5frrc_5fcfg_5ft_2eproto_sccs, descriptor_table_phy_5frrc_5fcfg_5ft_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_phy_5frrc_5fcfg_5ft_2eproto::offsets,
  file_level_metadata_phy_5frrc_5fcfg_5ft_2eproto, 11, file_level_enum_descriptors_phy_5frrc_5fcfg_5ft_2eproto, file_level_service_descriptors_phy_5frrc_5fcfg_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_phy_5frrc_5fcfg_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_phy_5frrc_5fcfg_5ft_2eproto)), true);
namespace fs {
namespace phy_rrc {

// ===================================================================

void srsran_tdd_config_t::InitAsDefaultInstance() {
}
class srsran_tdd_config_t::_Internal {
 public:
};

srsran_tdd_config_t::srsran_tdd_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_tdd_config_t)
}
srsran_tdd_config_t::srsran_tdd_config_t(const srsran_tdd_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&configured_, &from.configured_,
    static_cast<size_t>(reinterpret_cast<char*>(&ss_config_) -
    reinterpret_cast<char*>(&configured_)) + sizeof(ss_config_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_tdd_config_t)
}

void srsran_tdd_config_t::SharedCtor() {
  ::memset(&configured_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ss_config_) -
      reinterpret_cast<char*>(&configured_)) + sizeof(ss_config_));
}

srsran_tdd_config_t::~srsran_tdd_config_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_tdd_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_tdd_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_tdd_config_t::ArenaDtor(void* object) {
  srsran_tdd_config_t* _this = reinterpret_cast< srsran_tdd_config_t* >(object);
  (void)_this;
}
void srsran_tdd_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_tdd_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_tdd_config_t& srsran_tdd_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_tdd_config_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_tdd_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_tdd_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&configured_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ss_config_) -
      reinterpret_cast<char*>(&configured_)) + sizeof(ss_config_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_tdd_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool configured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          configured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sf_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sf_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ss_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ss_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_tdd_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_tdd_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool configured = 1;
  if (this->configured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_configured(), target);
  }

  // uint32 sf_config = 2;
  if (this->sf_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sf_config(), target);
  }

  // uint32 ss_config = 3;
  if (this->ss_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ss_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_tdd_config_t)
  return target;
}

size_t srsran_tdd_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_tdd_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool configured = 1;
  if (this->configured() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sf_config = 2;
  if (this->sf_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sf_config());
  }

  // uint32 ss_config = 3;
  if (this->ss_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ss_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_tdd_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_tdd_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_tdd_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_tdd_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_tdd_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_tdd_config_t)
    MergeFrom(*source);
  }
}

void srsran_tdd_config_t::MergeFrom(const srsran_tdd_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_tdd_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.configured() != 0) {
    _internal_set_configured(from._internal_configured());
  }
  if (from.sf_config() != 0) {
    _internal_set_sf_config(from._internal_sf_config());
  }
  if (from.ss_config() != 0) {
    _internal_set_ss_config(from._internal_ss_config());
  }
}

void srsran_tdd_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_tdd_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_tdd_config_t::CopyFrom(const srsran_tdd_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_tdd_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_tdd_config_t::IsInitialized() const {
  return true;
}

void srsran_tdd_config_t::InternalSwap(srsran_tdd_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_tdd_config_t, ss_config_)
      + sizeof(srsran_tdd_config_t::ss_config_)
      - PROTOBUF_FIELD_OFFSET(srsran_tdd_config_t, configured_)>(
          reinterpret_cast<char*>(&configured_),
          reinterpret_cast<char*>(&other->configured_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_tdd_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_prach_cfg_t::InitAsDefaultInstance() {
  ::fs::phy_rrc::_srsran_prach_cfg_t_default_instance_._instance.get_mutable()->tdd_config_ = const_cast< ::fs::phy_rrc::srsran_tdd_config_t*>(
      ::fs::phy_rrc::srsran_tdd_config_t::internal_default_instance());
}
class srsran_prach_cfg_t::_Internal {
 public:
  static const ::fs::phy_rrc::srsran_tdd_config_t& tdd_config(const srsran_prach_cfg_t* msg);
};

const ::fs::phy_rrc::srsran_tdd_config_t&
srsran_prach_cfg_t::_Internal::tdd_config(const srsran_prach_cfg_t* msg) {
  return *msg->tdd_config_;
}
srsran_prach_cfg_t::srsran_prach_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_prach_cfg_t)
}
srsran_prach_cfg_t::srsran_prach_cfg_t(const srsran_prach_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tdd_config()) {
    tdd_config_ = new ::fs::phy_rrc::srsran_tdd_config_t(*from.tdd_config_);
  } else {
    tdd_config_ = nullptr;
  }
  ::memcpy(&is_nr_, &from.is_nr_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_ra_preambles_) -
    reinterpret_cast<char*>(&is_nr_)) + sizeof(num_ra_preambles_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_prach_cfg_t)
}

void srsran_prach_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  ::memset(&tdd_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ra_preambles_) -
      reinterpret_cast<char*>(&tdd_config_)) + sizeof(num_ra_preambles_));
}

srsran_prach_cfg_t::~srsran_prach_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_prach_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_prach_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tdd_config_;
}

void srsran_prach_cfg_t::ArenaDtor(void* object) {
  srsran_prach_cfg_t* _this = reinterpret_cast< srsran_prach_cfg_t* >(object);
  (void)_this;
}
void srsran_prach_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_prach_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_prach_cfg_t& srsran_prach_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_prach_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_prach_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_prach_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tdd_config_ != nullptr) {
    delete tdd_config_;
  }
  tdd_config_ = nullptr;
  ::memset(&is_nr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ra_preambles_) -
      reinterpret_cast<char*>(&is_nr_)) + sizeof(num_ra_preambles_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_prach_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hs_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hs_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_successive_cancellation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_successive_cancellation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_freq_domain_offset_calc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_freq_domain_offset_calc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 config_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          config_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 root_seq_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          root_seq_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 zero_corr_zone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          zero_corr_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 freq_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          freq_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ra_preambles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          num_ra_preambles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_tdd_config_t tdd_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_prach_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_prach_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_nr = 1;
  if (this->is_nr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_nr(), target);
  }

  // bool hs_flag = 2;
  if (this->hs_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hs_flag(), target);
  }

  // bool enable_successive_cancellation = 3;
  if (this->enable_successive_cancellation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_successive_cancellation(), target);
  }

  // bool enable_freq_domain_offset_calc = 4;
  if (this->enable_freq_domain_offset_calc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_freq_domain_offset_calc(), target);
  }

  // uint32 config_idx = 5;
  if (this->config_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_config_idx(), target);
  }

  // uint32 root_seq_idx = 6;
  if (this->root_seq_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_root_seq_idx(), target);
  }

  // uint32 zero_corr_zone = 7;
  if (this->zero_corr_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_zero_corr_zone(), target);
  }

  // uint32 freq_offset = 8;
  if (this->freq_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_freq_offset(), target);
  }

  // uint32 num_ra_preambles = 9;
  if (this->num_ra_preambles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_ra_preambles(), target);
  }

  // .fs.phy_rrc.srsran_tdd_config_t tdd_config = 10;
  if (this->has_tdd_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tdd_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_prach_cfg_t)
  return target;
}

size_t srsran_prach_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_prach_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.phy_rrc.srsran_tdd_config_t tdd_config = 10;
  if (this->has_tdd_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tdd_config_);
  }

  // bool is_nr = 1;
  if (this->is_nr() != 0) {
    total_size += 1 + 1;
  }

  // bool hs_flag = 2;
  if (this->hs_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_successive_cancellation = 3;
  if (this->enable_successive_cancellation() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_freq_domain_offset_calc = 4;
  if (this->enable_freq_domain_offset_calc() != 0) {
    total_size += 1 + 1;
  }

  // uint32 config_idx = 5;
  if (this->config_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_config_idx());
  }

  // uint32 root_seq_idx = 6;
  if (this->root_seq_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_root_seq_idx());
  }

  // uint32 zero_corr_zone = 7;
  if (this->zero_corr_zone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_zero_corr_zone());
  }

  // uint32 freq_offset = 8;
  if (this->freq_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_freq_offset());
  }

  // uint32 num_ra_preambles = 9;
  if (this->num_ra_preambles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ra_preambles());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_prach_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_prach_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_prach_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_prach_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_prach_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_prach_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_prach_cfg_t::MergeFrom(const srsran_prach_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_prach_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tdd_config()) {
    _internal_mutable_tdd_config()->::fs::phy_rrc::srsran_tdd_config_t::MergeFrom(from._internal_tdd_config());
  }
  if (from.is_nr() != 0) {
    _internal_set_is_nr(from._internal_is_nr());
  }
  if (from.hs_flag() != 0) {
    _internal_set_hs_flag(from._internal_hs_flag());
  }
  if (from.enable_successive_cancellation() != 0) {
    _internal_set_enable_successive_cancellation(from._internal_enable_successive_cancellation());
  }
  if (from.enable_freq_domain_offset_calc() != 0) {
    _internal_set_enable_freq_domain_offset_calc(from._internal_enable_freq_domain_offset_calc());
  }
  if (from.config_idx() != 0) {
    _internal_set_config_idx(from._internal_config_idx());
  }
  if (from.root_seq_idx() != 0) {
    _internal_set_root_seq_idx(from._internal_root_seq_idx());
  }
  if (from.zero_corr_zone() != 0) {
    _internal_set_zero_corr_zone(from._internal_zero_corr_zone());
  }
  if (from.freq_offset() != 0) {
    _internal_set_freq_offset(from._internal_freq_offset());
  }
  if (from.num_ra_preambles() != 0) {
    _internal_set_num_ra_preambles(from._internal_num_ra_preambles());
  }
}

void srsran_prach_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_prach_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_prach_cfg_t::CopyFrom(const srsran_prach_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_prach_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_prach_cfg_t::IsInitialized() const {
  return true;
}

void srsran_prach_cfg_t::InternalSwap(srsran_prach_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_prach_cfg_t, num_ra_preambles_)
      + sizeof(srsran_prach_cfg_t::num_ra_preambles_)
      - PROTOBUF_FIELD_OFFSET(srsran_prach_cfg_t, tdd_config_)>(
          reinterpret_cast<char*>(&tdd_config_),
          reinterpret_cast<char*>(&other->tdd_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_prach_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_refsignal_srs_cfg_t::InitAsDefaultInstance() {
}
class srsran_refsignal_srs_cfg_t::_Internal {
 public:
};

srsran_refsignal_srs_cfg_t::srsran_refsignal_srs_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
}
srsran_refsignal_srs_cfg_t::srsran_refsignal_srs_cfg_t(const srsran_refsignal_srs_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&simul_ack_, &from.simul_ack_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_rrc_) -
    reinterpret_cast<char*>(&simul_ack_)) + sizeof(n_rrc_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
}

void srsran_refsignal_srs_cfg_t::SharedCtor() {
  ::memset(&simul_ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_rrc_) -
      reinterpret_cast<char*>(&simul_ack_)) + sizeof(n_rrc_));
}

srsran_refsignal_srs_cfg_t::~srsran_refsignal_srs_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_refsignal_srs_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_refsignal_srs_cfg_t::ArenaDtor(void* object) {
  srsran_refsignal_srs_cfg_t* _this = reinterpret_cast< srsran_refsignal_srs_cfg_t* >(object);
  (void)_this;
}
void srsran_refsignal_srs_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_refsignal_srs_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_refsignal_srs_cfg_t& srsran_refsignal_srs_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_refsignal_srs_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_refsignal_srs_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&simul_ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_rrc_) -
      reinterpret_cast<char*>(&simul_ack_)) + sizeof(n_rrc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_refsignal_srs_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool simul_ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          simul_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dedicated_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dedicated_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool common_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          common_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool configured = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          configured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 subframe_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subframe_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bw_cfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bw_cfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 B = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 b_hop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          b_hop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_srs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          n_srs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 I_srs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          i_srs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 k_tc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          k_tc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_rrc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          n_rrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_refsignal_srs_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool simul_ack = 1;
  if (this->simul_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_simul_ack(), target);
  }

  // bool dedicated_enabled = 2;
  if (this->dedicated_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_dedicated_enabled(), target);
  }

  // bool common_enabled = 3;
  if (this->common_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_common_enabled(), target);
  }

  // bool configured = 4;
  if (this->configured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_configured(), target);
  }

  // uint32 subframe_config = 5;
  if (this->subframe_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_subframe_config(), target);
  }

  // uint32 bw_cfg = 6;
  if (this->bw_cfg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bw_cfg(), target);
  }

  // uint32 B = 7;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_b(), target);
  }

  // uint32 b_hop = 8;
  if (this->b_hop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_b_hop(), target);
  }

  // uint32 n_srs = 9;
  if (this->n_srs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_n_srs(), target);
  }

  // uint32 I_srs = 10;
  if (this->i_srs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_i_srs(), target);
  }

  // uint32 k_tc = 11;
  if (this->k_tc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_k_tc(), target);
  }

  // uint32 n_rrc = 12;
  if (this->n_rrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_n_rrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  return target;
}

size_t srsran_refsignal_srs_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool simul_ack = 1;
  if (this->simul_ack() != 0) {
    total_size += 1 + 1;
  }

  // bool dedicated_enabled = 2;
  if (this->dedicated_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool common_enabled = 3;
  if (this->common_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool configured = 4;
  if (this->configured() != 0) {
    total_size += 1 + 1;
  }

  // uint32 subframe_config = 5;
  if (this->subframe_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subframe_config());
  }

  // uint32 bw_cfg = 6;
  if (this->bw_cfg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bw_cfg());
  }

  // uint32 B = 7;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b());
  }

  // uint32 b_hop = 8;
  if (this->b_hop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b_hop());
  }

  // uint32 n_srs = 9;
  if (this->n_srs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_srs());
  }

  // uint32 I_srs = 10;
  if (this->i_srs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_i_srs());
  }

  // uint32 k_tc = 11;
  if (this->k_tc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_k_tc());
  }

  // uint32 n_rrc = 12;
  if (this->n_rrc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_rrc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_refsignal_srs_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_refsignal_srs_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_refsignal_srs_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_refsignal_srs_cfg_t::MergeFrom(const srsran_refsignal_srs_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.simul_ack() != 0) {
    _internal_set_simul_ack(from._internal_simul_ack());
  }
  if (from.dedicated_enabled() != 0) {
    _internal_set_dedicated_enabled(from._internal_dedicated_enabled());
  }
  if (from.common_enabled() != 0) {
    _internal_set_common_enabled(from._internal_common_enabled());
  }
  if (from.configured() != 0) {
    _internal_set_configured(from._internal_configured());
  }
  if (from.subframe_config() != 0) {
    _internal_set_subframe_config(from._internal_subframe_config());
  }
  if (from.bw_cfg() != 0) {
    _internal_set_bw_cfg(from._internal_bw_cfg());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (from.b_hop() != 0) {
    _internal_set_b_hop(from._internal_b_hop());
  }
  if (from.n_srs() != 0) {
    _internal_set_n_srs(from._internal_n_srs());
  }
  if (from.i_srs() != 0) {
    _internal_set_i_srs(from._internal_i_srs());
  }
  if (from.k_tc() != 0) {
    _internal_set_k_tc(from._internal_k_tc());
  }
  if (from.n_rrc() != 0) {
    _internal_set_n_rrc(from._internal_n_rrc());
  }
}

void srsran_refsignal_srs_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_refsignal_srs_cfg_t::CopyFrom(const srsran_refsignal_srs_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_refsignal_srs_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_refsignal_srs_cfg_t::IsInitialized() const {
  return true;
}

void srsran_refsignal_srs_cfg_t::InternalSwap(srsran_refsignal_srs_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_refsignal_srs_cfg_t, n_rrc_)
      + sizeof(srsran_refsignal_srs_cfg_t::n_rrc_)
      - PROTOBUF_FIELD_OFFSET(srsran_refsignal_srs_cfg_t, simul_ack_)>(
          reinterpret_cast<char*>(&simul_ack_),
          reinterpret_cast<char*>(&other->simul_ack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_refsignal_srs_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_refsignal_dmrs_pusch_cfg_t::InitAsDefaultInstance() {
}
class srsran_refsignal_dmrs_pusch_cfg_t::_Internal {
 public:
};

srsran_refsignal_dmrs_pusch_cfg_t::srsran_refsignal_dmrs_pusch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
}
srsran_refsignal_dmrs_pusch_cfg_t::srsran_refsignal_dmrs_pusch_cfg_t(const srsran_refsignal_dmrs_pusch_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&group_hopping_en_, &from.group_hopping_en_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_ss_) -
    reinterpret_cast<char*>(&group_hopping_en_)) + sizeof(delta_ss_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
}

void srsran_refsignal_dmrs_pusch_cfg_t::SharedCtor() {
  ::memset(&group_hopping_en_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_ss_) -
      reinterpret_cast<char*>(&group_hopping_en_)) + sizeof(delta_ss_));
}

srsran_refsignal_dmrs_pusch_cfg_t::~srsran_refsignal_dmrs_pusch_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_refsignal_dmrs_pusch_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_refsignal_dmrs_pusch_cfg_t::ArenaDtor(void* object) {
  srsran_refsignal_dmrs_pusch_cfg_t* _this = reinterpret_cast< srsran_refsignal_dmrs_pusch_cfg_t* >(object);
  (void)_this;
}
void srsran_refsignal_dmrs_pusch_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_refsignal_dmrs_pusch_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_refsignal_dmrs_pusch_cfg_t& srsran_refsignal_dmrs_pusch_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_refsignal_dmrs_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_refsignal_dmrs_pusch_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&group_hopping_en_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_ss_) -
      reinterpret_cast<char*>(&group_hopping_en_)) + sizeof(delta_ss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_refsignal_dmrs_pusch_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool group_hopping_en = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_hopping_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sequence_hopping_en = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_hopping_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cyclic_shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cyclic_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delta_ss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_ss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_refsignal_dmrs_pusch_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool group_hopping_en = 1;
  if (this->group_hopping_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_group_hopping_en(), target);
  }

  // bool sequence_hopping_en = 2;
  if (this->sequence_hopping_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_sequence_hopping_en(), target);
  }

  // uint32 cyclic_shift = 3;
  if (this->cyclic_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cyclic_shift(), target);
  }

  // uint32 delta_ss = 4;
  if (this->delta_ss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delta_ss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  return target;
}

size_t srsran_refsignal_dmrs_pusch_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool group_hopping_en = 1;
  if (this->group_hopping_en() != 0) {
    total_size += 1 + 1;
  }

  // bool sequence_hopping_en = 2;
  if (this->sequence_hopping_en() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cyclic_shift = 3;
  if (this->cyclic_shift() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cyclic_shift());
  }

  // uint32 delta_ss = 4;
  if (this->delta_ss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delta_ss());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_refsignal_dmrs_pusch_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_refsignal_dmrs_pusch_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_refsignal_dmrs_pusch_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_refsignal_dmrs_pusch_cfg_t::MergeFrom(const srsran_refsignal_dmrs_pusch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_hopping_en() != 0) {
    _internal_set_group_hopping_en(from._internal_group_hopping_en());
  }
  if (from.sequence_hopping_en() != 0) {
    _internal_set_sequence_hopping_en(from._internal_sequence_hopping_en());
  }
  if (from.cyclic_shift() != 0) {
    _internal_set_cyclic_shift(from._internal_cyclic_shift());
  }
  if (from.delta_ss() != 0) {
    _internal_set_delta_ss(from._internal_delta_ss());
  }
}

void srsran_refsignal_dmrs_pusch_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_refsignal_dmrs_pusch_cfg_t::CopyFrom(const srsran_refsignal_dmrs_pusch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_refsignal_dmrs_pusch_cfg_t::IsInitialized() const {
  return true;
}

void srsran_refsignal_dmrs_pusch_cfg_t::InternalSwap(srsran_refsignal_dmrs_pusch_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_refsignal_dmrs_pusch_cfg_t, delta_ss_)
      + sizeof(srsran_refsignal_dmrs_pusch_cfg_t::delta_ss_)
      - PROTOBUF_FIELD_OFFSET(srsran_refsignal_dmrs_pusch_cfg_t, group_hopping_en_)>(
          reinterpret_cast<char*>(&group_hopping_en_),
          reinterpret_cast<char*>(&other->group_hopping_en_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_refsignal_dmrs_pusch_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_ue_ul_powerctrl_t::InitAsDefaultInstance() {
}
class srsran_ue_ul_powerctrl_t::_Internal {
 public:
};

srsran_ue_ul_powerctrl_t::srsran_ue_ul_powerctrl_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delta_f_pucch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
}
srsran_ue_ul_powerctrl_t::srsran_ue_ul_powerctrl_t(const srsran_ue_ul_powerctrl_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delta_f_pucch_(from.delta_f_pucch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&delta_mcs_based_, &from.delta_mcs_based_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_srs_offset_) -
    reinterpret_cast<char*>(&delta_mcs_based_)) + sizeof(p_srs_offset_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
}

void srsran_ue_ul_powerctrl_t::SharedCtor() {
  ::memset(&delta_mcs_based_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_srs_offset_) -
      reinterpret_cast<char*>(&delta_mcs_based_)) + sizeof(p_srs_offset_));
}

srsran_ue_ul_powerctrl_t::~srsran_ue_ul_powerctrl_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_ue_ul_powerctrl_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_ue_ul_powerctrl_t::ArenaDtor(void* object) {
  srsran_ue_ul_powerctrl_t* _this = reinterpret_cast< srsran_ue_ul_powerctrl_t* >(object);
  (void)_this;
}
void srsran_ue_ul_powerctrl_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_ue_ul_powerctrl_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_ue_ul_powerctrl_t& srsran_ue_ul_powerctrl_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_ue_ul_powerctrl_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_ue_ul_powerctrl_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_f_pucch_.Clear();
  ::memset(&delta_mcs_based_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_srs_offset_) -
      reinterpret_cast<char*>(&delta_mcs_based_)) + sizeof(p_srs_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_ue_ul_powerctrl_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool delta_mcs_based = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          delta_mcs_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool acc_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          acc_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float p0_nominal_pusch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          p0_nominal_pusch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p0_nominal_pucch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          p0_nominal_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float delta_preamble_msg3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          delta_preamble_msg3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p0_ue_pusch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          p0_ue_pusch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p0_ue_pucch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          p0_ue_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_srs_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          p_srs_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float delta_f_pucch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_delta_f_pucch(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          _internal_add_delta_f_pucch(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_ue_ul_powerctrl_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool delta_mcs_based = 1;
  if (this->delta_mcs_based() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_delta_mcs_based(), target);
  }

  // bool acc_enabled = 2;
  if (this->acc_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_acc_enabled(), target);
  }

  // float p0_nominal_pusch = 3;
  if (!(this->p0_nominal_pusch() <= 0 && this->p0_nominal_pusch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p0_nominal_pusch(), target);
  }

  // float alpha = 4;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_alpha(), target);
  }

  // float p0_nominal_pucch = 5;
  if (!(this->p0_nominal_pucch() <= 0 && this->p0_nominal_pucch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_p0_nominal_pucch(), target);
  }

  // float delta_preamble_msg3 = 6;
  if (!(this->delta_preamble_msg3() <= 0 && this->delta_preamble_msg3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_delta_preamble_msg3(), target);
  }

  // float p0_ue_pusch = 7;
  if (!(this->p0_ue_pusch() <= 0 && this->p0_ue_pusch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_p0_ue_pusch(), target);
  }

  // float p0_ue_pucch = 8;
  if (!(this->p0_ue_pucch() <= 0 && this->p0_ue_pucch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_p0_ue_pucch(), target);
  }

  // float p_srs_offset = 9;
  if (!(this->p_srs_offset() <= 0 && this->p_srs_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_p_srs_offset(), target);
  }

  // repeated float delta_f_pucch = 10;
  if (this->_internal_delta_f_pucch_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_delta_f_pucch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  return target;
}

size_t srsran_ue_ul_powerctrl_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float delta_f_pucch = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_delta_f_pucch_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _delta_f_pucch_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool delta_mcs_based = 1;
  if (this->delta_mcs_based() != 0) {
    total_size += 1 + 1;
  }

  // bool acc_enabled = 2;
  if (this->acc_enabled() != 0) {
    total_size += 1 + 1;
  }

  // float p0_nominal_pusch = 3;
  if (!(this->p0_nominal_pusch() <= 0 && this->p0_nominal_pusch() >= 0)) {
    total_size += 1 + 4;
  }

  // float alpha = 4;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float p0_nominal_pucch = 5;
  if (!(this->p0_nominal_pucch() <= 0 && this->p0_nominal_pucch() >= 0)) {
    total_size += 1 + 4;
  }

  // float delta_preamble_msg3 = 6;
  if (!(this->delta_preamble_msg3() <= 0 && this->delta_preamble_msg3() >= 0)) {
    total_size += 1 + 4;
  }

  // float p0_ue_pusch = 7;
  if (!(this->p0_ue_pusch() <= 0 && this->p0_ue_pusch() >= 0)) {
    total_size += 1 + 4;
  }

  // float p0_ue_pucch = 8;
  if (!(this->p0_ue_pucch() <= 0 && this->p0_ue_pucch() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_srs_offset = 9;
  if (!(this->p_srs_offset() <= 0 && this->p_srs_offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_ue_ul_powerctrl_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_ue_ul_powerctrl_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_ue_ul_powerctrl_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
    MergeFrom(*source);
  }
}

void srsran_ue_ul_powerctrl_t::MergeFrom(const srsran_ue_ul_powerctrl_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delta_f_pucch_.MergeFrom(from.delta_f_pucch_);
  if (from.delta_mcs_based() != 0) {
    _internal_set_delta_mcs_based(from._internal_delta_mcs_based());
  }
  if (from.acc_enabled() != 0) {
    _internal_set_acc_enabled(from._internal_acc_enabled());
  }
  if (!(from.p0_nominal_pusch() <= 0 && from.p0_nominal_pusch() >= 0)) {
    _internal_set_p0_nominal_pusch(from._internal_p0_nominal_pusch());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.p0_nominal_pucch() <= 0 && from.p0_nominal_pucch() >= 0)) {
    _internal_set_p0_nominal_pucch(from._internal_p0_nominal_pucch());
  }
  if (!(from.delta_preamble_msg3() <= 0 && from.delta_preamble_msg3() >= 0)) {
    _internal_set_delta_preamble_msg3(from._internal_delta_preamble_msg3());
  }
  if (!(from.p0_ue_pusch() <= 0 && from.p0_ue_pusch() >= 0)) {
    _internal_set_p0_ue_pusch(from._internal_p0_ue_pusch());
  }
  if (!(from.p0_ue_pucch() <= 0 && from.p0_ue_pucch() >= 0)) {
    _internal_set_p0_ue_pucch(from._internal_p0_ue_pucch());
  }
  if (!(from.p_srs_offset() <= 0 && from.p_srs_offset() >= 0)) {
    _internal_set_p_srs_offset(from._internal_p_srs_offset());
  }
}

void srsran_ue_ul_powerctrl_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_ue_ul_powerctrl_t::CopyFrom(const srsran_ue_ul_powerctrl_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_ue_ul_powerctrl_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_ue_ul_powerctrl_t::IsInitialized() const {
  return true;
}

void srsran_ue_ul_powerctrl_t::InternalSwap(srsran_ue_ul_powerctrl_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delta_f_pucch_.InternalSwap(&other->delta_f_pucch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_ue_ul_powerctrl_t, p_srs_offset_)
      + sizeof(srsran_ue_ul_powerctrl_t::p_srs_offset_)
      - PROTOBUF_FIELD_OFFSET(srsran_ue_ul_powerctrl_t, delta_mcs_based_)>(
          reinterpret_cast<char*>(&delta_mcs_based_),
          reinterpret_cast<char*>(&other->delta_mcs_based_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_ue_ul_powerctrl_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_pusch_grant_t::InitAsDefaultInstance() {
  ::fs::phy_rrc::_srsran_pusch_grant_t_default_instance_._instance.get_mutable()->tb_ = const_cast< ::fs::mac_rrc::srsran_ra_tb_t*>(
      ::fs::mac_rrc::srsran_ra_tb_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_pusch_grant_t_default_instance_._instance.get_mutable()->last_tb_ = const_cast< ::fs::mac_rrc::srsran_ra_tb_t*>(
      ::fs::mac_rrc::srsran_ra_tb_t::internal_default_instance());
}
class srsran_pusch_grant_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_ra_tb_t& tb(const srsran_pusch_grant_t* msg);
  static const ::fs::mac_rrc::srsran_ra_tb_t& last_tb(const srsran_pusch_grant_t* msg);
};

const ::fs::mac_rrc::srsran_ra_tb_t&
srsran_pusch_grant_t::_Internal::tb(const srsran_pusch_grant_t* msg) {
  return *msg->tb_;
}
const ::fs::mac_rrc::srsran_ra_tb_t&
srsran_pusch_grant_t::_Internal::last_tb(const srsran_pusch_grant_t* msg) {
  return *msg->last_tb_;
}
void srsran_pusch_grant_t::clear_tb() {
  if (GetArena() == nullptr && tb_ != nullptr) {
    delete tb_;
  }
  tb_ = nullptr;
}
void srsran_pusch_grant_t::clear_last_tb() {
  if (GetArena() == nullptr && last_tb_ != nullptr) {
    delete last_tb_;
  }
  last_tb_ = nullptr;
}
srsran_pusch_grant_t::srsran_pusch_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  n_prb_(arena),
  n_prb_tilde_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_pusch_grant_t)
}
srsran_pusch_grant_t::srsran_pusch_grant_t(const srsran_pusch_grant_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      n_prb_(from.n_prb_),
      n_prb_tilde_(from.n_prb_tilde_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tb()) {
    tb_ = new ::fs::mac_rrc::srsran_ra_tb_t(*from.tb_);
  } else {
    tb_ = nullptr;
  }
  if (from._internal_has_last_tb()) {
    last_tb_ = new ::fs::mac_rrc::srsran_ra_tb_t(*from.last_tb_);
  } else {
    last_tb_ = nullptr;
  }
  ::memcpy(&is_rar_, &from.is_rar_,
    static_cast<size_t>(reinterpret_cast<char*>(&nof_symb_) -
    reinterpret_cast<char*>(&is_rar_)) + sizeof(nof_symb_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_pusch_grant_t)
}

void srsran_pusch_grant_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  ::memset(&tb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_symb_) -
      reinterpret_cast<char*>(&tb_)) + sizeof(nof_symb_));
}

srsran_pusch_grant_t::~srsran_pusch_grant_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_pusch_grant_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_pusch_grant_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tb_;
  if (this != internal_default_instance()) delete last_tb_;
}

void srsran_pusch_grant_t::ArenaDtor(void* object) {
  srsran_pusch_grant_t* _this = reinterpret_cast< srsran_pusch_grant_t* >(object);
  (void)_this;
}
void srsran_pusch_grant_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_pusch_grant_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_pusch_grant_t& srsran_pusch_grant_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_pusch_grant_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_pusch_grant_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_pusch_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_prb_.Clear();
  n_prb_tilde_.Clear();
  if (GetArena() == nullptr && tb_ != nullptr) {
    delete tb_;
  }
  tb_ = nullptr;
  if (GetArena() == nullptr && last_tb_ != nullptr) {
    delete last_tb_;
  }
  last_tb_ = nullptr;
  ::memset(&is_rar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_symb_) -
      reinterpret_cast<char*>(&is_rar_)) + sizeof(nof_symb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_pusch_grant_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_rar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_rar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_dmrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_dmrs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 L_prb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          l_prb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 freq_hopping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          freq_hopping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_re = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nof_re_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_symb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nof_symb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_ra_tb_t tb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_ra_tb_t last_tb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_tb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 n_prb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n_prb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_n_prb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 n_prb_tilde = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n_prb_tilde(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_n_prb_tilde(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_pusch_grant_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_pusch_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_rar = 1;
  if (this->is_rar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_rar(), target);
  }

  // uint32 n_dmrs = 2;
  if (this->n_dmrs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n_dmrs(), target);
  }

  // uint32 L_prb = 3;
  if (this->l_prb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_l_prb(), target);
  }

  // uint32 freq_hopping = 4;
  if (this->freq_hopping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_freq_hopping(), target);
  }

  // uint32 nof_re = 5;
  if (this->nof_re() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nof_re(), target);
  }

  // uint32 nof_symb = 6;
  if (this->nof_symb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_nof_symb(), target);
  }

  // .fs.mac_rrc.srsran_ra_tb_t tb = 7;
  if (this->has_tb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tb(this), target, stream);
  }

  // .fs.mac_rrc.srsran_ra_tb_t last_tb = 8;
  if (this->has_last_tb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::last_tb(this), target, stream);
  }

  // repeated uint32 n_prb = 9;
  {
    int byte_size = _n_prb_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_n_prb(), byte_size, target);
    }
  }

  // repeated uint32 n_prb_tilde = 10;
  {
    int byte_size = _n_prb_tilde_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_n_prb_tilde(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_pusch_grant_t)
  return target;
}

size_t srsran_pusch_grant_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_pusch_grant_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 n_prb = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n_prb_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n_prb_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 n_prb_tilde = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n_prb_tilde_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n_prb_tilde_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .fs.mac_rrc.srsran_ra_tb_t tb = 7;
  if (this->has_tb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tb_);
  }

  // .fs.mac_rrc.srsran_ra_tb_t last_tb = 8;
  if (this->has_last_tb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_tb_);
  }

  // bool is_rar = 1;
  if (this->is_rar() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n_dmrs = 2;
  if (this->n_dmrs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_dmrs());
  }

  // uint32 L_prb = 3;
  if (this->l_prb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l_prb());
  }

  // uint32 freq_hopping = 4;
  if (this->freq_hopping() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_freq_hopping());
  }

  // uint32 nof_re = 5;
  if (this->nof_re() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_re());
  }

  // uint32 nof_symb = 6;
  if (this->nof_symb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_symb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_pusch_grant_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_pusch_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_pusch_grant_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_pusch_grant_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_pusch_grant_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_pusch_grant_t)
    MergeFrom(*source);
  }
}

void srsran_pusch_grant_t::MergeFrom(const srsran_pusch_grant_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_pusch_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n_prb_.MergeFrom(from.n_prb_);
  n_prb_tilde_.MergeFrom(from.n_prb_tilde_);
  if (from.has_tb()) {
    _internal_mutable_tb()->::fs::mac_rrc::srsran_ra_tb_t::MergeFrom(from._internal_tb());
  }
  if (from.has_last_tb()) {
    _internal_mutable_last_tb()->::fs::mac_rrc::srsran_ra_tb_t::MergeFrom(from._internal_last_tb());
  }
  if (from.is_rar() != 0) {
    _internal_set_is_rar(from._internal_is_rar());
  }
  if (from.n_dmrs() != 0) {
    _internal_set_n_dmrs(from._internal_n_dmrs());
  }
  if (from.l_prb() != 0) {
    _internal_set_l_prb(from._internal_l_prb());
  }
  if (from.freq_hopping() != 0) {
    _internal_set_freq_hopping(from._internal_freq_hopping());
  }
  if (from.nof_re() != 0) {
    _internal_set_nof_re(from._internal_nof_re());
  }
  if (from.nof_symb() != 0) {
    _internal_set_nof_symb(from._internal_nof_symb());
  }
}

void srsran_pusch_grant_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_pusch_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_pusch_grant_t::CopyFrom(const srsran_pusch_grant_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_pusch_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_pusch_grant_t::IsInitialized() const {
  return true;
}

void srsran_pusch_grant_t::InternalSwap(srsran_pusch_grant_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  n_prb_.InternalSwap(&other->n_prb_);
  n_prb_tilde_.InternalSwap(&other->n_prb_tilde_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_pusch_grant_t, nof_symb_)
      + sizeof(srsran_pusch_grant_t::nof_symb_)
      - PROTOBUF_FIELD_OFFSET(srsran_pusch_grant_t, tb_)>(
          reinterpret_cast<char*>(&tb_),
          reinterpret_cast<char*>(&other->tb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_pusch_grant_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_pusch_cfg_t::InitAsDefaultInstance() {
  ::fs::phy_rrc::_srsran_pusch_cfg_t_default_instance_._instance.get_mutable()->uci_cfg_ = const_cast< ::fs::mac_rrc::srsran_uci_cfg_t*>(
      ::fs::mac_rrc::srsran_uci_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_pusch_cfg_t_default_instance_._instance.get_mutable()->uci_offset_ = const_cast< ::fs::mac_rrc::srsran_uci_offset_cfg_t*>(
      ::fs::mac_rrc::srsran_uci_offset_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_pusch_cfg_t_default_instance_._instance.get_mutable()->grant_ = const_cast< ::fs::phy_rrc::srsran_pusch_grant_t*>(
      ::fs::phy_rrc::srsran_pusch_grant_t::internal_default_instance());
}
class srsran_pusch_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_uci_cfg_t& uci_cfg(const srsran_pusch_cfg_t* msg);
  static const ::fs::mac_rrc::srsran_uci_offset_cfg_t& uci_offset(const srsran_pusch_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_pusch_grant_t& grant(const srsran_pusch_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_uci_cfg_t&
srsran_pusch_cfg_t::_Internal::uci_cfg(const srsran_pusch_cfg_t* msg) {
  return *msg->uci_cfg_;
}
const ::fs::mac_rrc::srsran_uci_offset_cfg_t&
srsran_pusch_cfg_t::_Internal::uci_offset(const srsran_pusch_cfg_t* msg) {
  return *msg->uci_offset_;
}
const ::fs::phy_rrc::srsran_pusch_grant_t&
srsran_pusch_cfg_t::_Internal::grant(const srsran_pusch_cfg_t* msg) {
  return *msg->grant_;
}
void srsran_pusch_cfg_t::clear_uci_cfg() {
  if (GetArena() == nullptr && uci_cfg_ != nullptr) {
    delete uci_cfg_;
  }
  uci_cfg_ = nullptr;
}
void srsran_pusch_cfg_t::clear_uci_offset() {
  if (GetArena() == nullptr && uci_offset_ != nullptr) {
    delete uci_offset_;
  }
  uci_offset_ = nullptr;
}
void srsran_pusch_cfg_t::clear_tx() {
  tx_.Clear();
}
void srsran_pusch_cfg_t::clear_rx() {
  rx_.Clear();
}
srsran_pusch_cfg_t::srsran_pusch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tx_(arena),
  rx_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_pusch_cfg_t)
}
srsran_pusch_cfg_t::srsran_pusch_cfg_t(const srsran_pusch_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tx_(from.tx_),
      rx_(from.rx_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uci_cfg()) {
    uci_cfg_ = new ::fs::mac_rrc::srsran_uci_cfg_t(*from.uci_cfg_);
  } else {
    uci_cfg_ = nullptr;
  }
  if (from._internal_has_uci_offset()) {
    uci_offset_ = new ::fs::mac_rrc::srsran_uci_offset_cfg_t(*from.uci_offset_);
  } else {
    uci_offset_ = nullptr;
  }
  if (from._internal_has_grant()) {
    grant_ = new ::fs::phy_rrc::srsran_pusch_grant_t(*from.grant_);
  } else {
    grant_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_evm_en_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(meas_evm_en_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_pusch_cfg_t)
}

void srsran_pusch_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  ::memset(&uci_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_evm_en_) -
      reinterpret_cast<char*>(&uci_cfg_)) + sizeof(meas_evm_en_));
}

srsran_pusch_cfg_t::~srsran_pusch_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_pusch_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_pusch_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uci_cfg_;
  if (this != internal_default_instance()) delete uci_offset_;
  if (this != internal_default_instance()) delete grant_;
}

void srsran_pusch_cfg_t::ArenaDtor(void* object) {
  srsran_pusch_cfg_t* _this = reinterpret_cast< srsran_pusch_cfg_t* >(object);
  (void)_this;
}
void srsran_pusch_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_pusch_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_pusch_cfg_t& srsran_pusch_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_pusch_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_pusch_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_pusch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.Clear();
  rx_.Clear();
  if (GetArena() == nullptr && uci_cfg_ != nullptr) {
    delete uci_cfg_;
  }
  uci_cfg_ = nullptr;
  if (GetArena() == nullptr && uci_offset_ != nullptr) {
    delete uci_offset_;
  }
  uci_offset_ = nullptr;
  if (GetArena() == nullptr && grant_ != nullptr) {
    delete grant_;
  }
  grant_ = nullptr;
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_evm_en_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(meas_evm_en_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_pusch_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_nof_iterations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_nof_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_O_cqi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_o_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 K_segm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          k_segm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_tx_nb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_tx_nb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool csi_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          csi_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_64qam = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_64qam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool meas_time_en = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          meas_time_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 meas_time_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          meas_time_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool meas_epre_en = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          meas_epre_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool meas_ta_en = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          meas_ta_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool meas_evm_en = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          meas_evm_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_uci_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uci_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_pusch_grant_t grant = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_grant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_pusch_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_pusch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rnti = 1;
  if (this->rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // uint32 max_nof_iterations = 2;
  if (this->max_nof_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_nof_iterations(), target);
  }

  // uint32 last_O_cqi = 3;
  if (this->last_o_cqi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_o_cqi(), target);
  }

  // uint32 K_segm = 4;
  if (this->k_segm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_k_segm(), target);
  }

  // uint32 current_tx_nb = 5;
  if (this->current_tx_nb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_current_tx_nb(), target);
  }

  // bool csi_enable = 6;
  if (this->csi_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_csi_enable(), target);
  }

  // bool enable_64qam = 7;
  if (this->enable_64qam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_64qam(), target);
  }

  // bool meas_time_en = 8;
  if (this->meas_time_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_meas_time_en(), target);
  }

  // uint32 meas_time_value = 9;
  if (this->meas_time_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_meas_time_value(), target);
  }

  // bool meas_epre_en = 10;
  if (this->meas_epre_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_meas_epre_en(), target);
  }

  // bool meas_ta_en = 11;
  if (this->meas_ta_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_meas_ta_en(), target);
  }

  // bool meas_evm_en = 12;
  if (this->meas_evm_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_meas_evm_en(), target);
  }

  // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 13;
  if (this->has_uci_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::uci_cfg(this), target, stream);
  }

  // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 14;
  if (this->has_uci_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::uci_offset(this), target, stream);
  }

  // .fs.phy_rrc.srsran_pusch_grant_t grant = 15;
  if (this->has_grant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::grant(this), target, stream);
  }

  // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_tx(i), target, stream);
  }

  // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_rx(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_pusch_cfg_t)
  return target;
}

size_t srsran_pusch_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_pusch_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 16;
  total_size += 2UL * this->_internal_tx_size();
  for (const auto& msg : this->tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 17;
  total_size += 2UL * this->_internal_rx_size();
  for (const auto& msg : this->rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 13;
  if (this->has_uci_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uci_cfg_);
  }

  // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 14;
  if (this->has_uci_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uci_offset_);
  }

  // .fs.phy_rrc.srsran_pusch_grant_t grant = 15;
  if (this->has_grant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grant_);
  }

  // uint32 rnti = 1;
  if (this->rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  // uint32 max_nof_iterations = 2;
  if (this->max_nof_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_nof_iterations());
  }

  // uint32 last_O_cqi = 3;
  if (this->last_o_cqi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_o_cqi());
  }

  // uint32 K_segm = 4;
  if (this->k_segm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_k_segm());
  }

  // uint32 current_tx_nb = 5;
  if (this->current_tx_nb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_tx_nb());
  }

  // bool csi_enable = 6;
  if (this->csi_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_64qam = 7;
  if (this->enable_64qam() != 0) {
    total_size += 1 + 1;
  }

  // bool meas_time_en = 8;
  if (this->meas_time_en() != 0) {
    total_size += 1 + 1;
  }

  // bool meas_epre_en = 10;
  if (this->meas_epre_en() != 0) {
    total_size += 1 + 1;
  }

  // uint32 meas_time_value = 9;
  if (this->meas_time_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meas_time_value());
  }

  // bool meas_ta_en = 11;
  if (this->meas_ta_en() != 0) {
    total_size += 1 + 1;
  }

  // bool meas_evm_en = 12;
  if (this->meas_evm_en() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_pusch_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_pusch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_pusch_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_pusch_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_pusch_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_pusch_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_pusch_cfg_t::MergeFrom(const srsran_pusch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_pusch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_.MergeFrom(from.tx_);
  rx_.MergeFrom(from.rx_);
  if (from.has_uci_cfg()) {
    _internal_mutable_uci_cfg()->::fs::mac_rrc::srsran_uci_cfg_t::MergeFrom(from._internal_uci_cfg());
  }
  if (from.has_uci_offset()) {
    _internal_mutable_uci_offset()->::fs::mac_rrc::srsran_uci_offset_cfg_t::MergeFrom(from._internal_uci_offset());
  }
  if (from.has_grant()) {
    _internal_mutable_grant()->::fs::phy_rrc::srsran_pusch_grant_t::MergeFrom(from._internal_grant());
  }
  if (from.rnti() != 0) {
    _internal_set_rnti(from._internal_rnti());
  }
  if (from.max_nof_iterations() != 0) {
    _internal_set_max_nof_iterations(from._internal_max_nof_iterations());
  }
  if (from.last_o_cqi() != 0) {
    _internal_set_last_o_cqi(from._internal_last_o_cqi());
  }
  if (from.k_segm() != 0) {
    _internal_set_k_segm(from._internal_k_segm());
  }
  if (from.current_tx_nb() != 0) {
    _internal_set_current_tx_nb(from._internal_current_tx_nb());
  }
  if (from.csi_enable() != 0) {
    _internal_set_csi_enable(from._internal_csi_enable());
  }
  if (from.enable_64qam() != 0) {
    _internal_set_enable_64qam(from._internal_enable_64qam());
  }
  if (from.meas_time_en() != 0) {
    _internal_set_meas_time_en(from._internal_meas_time_en());
  }
  if (from.meas_epre_en() != 0) {
    _internal_set_meas_epre_en(from._internal_meas_epre_en());
  }
  if (from.meas_time_value() != 0) {
    _internal_set_meas_time_value(from._internal_meas_time_value());
  }
  if (from.meas_ta_en() != 0) {
    _internal_set_meas_ta_en(from._internal_meas_ta_en());
  }
  if (from.meas_evm_en() != 0) {
    _internal_set_meas_evm_en(from._internal_meas_evm_en());
  }
}

void srsran_pusch_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_pusch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_pusch_cfg_t::CopyFrom(const srsran_pusch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_pusch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_pusch_cfg_t::IsInitialized() const {
  return true;
}

void srsran_pusch_cfg_t::InternalSwap(srsran_pusch_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_.InternalSwap(&other->tx_);
  rx_.InternalSwap(&other->rx_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_pusch_cfg_t, meas_evm_en_)
      + sizeof(srsran_pusch_cfg_t::meas_evm_en_)
      - PROTOBUF_FIELD_OFFSET(srsran_pusch_cfg_t, uci_cfg_)>(
          reinterpret_cast<char*>(&uci_cfg_),
          reinterpret_cast<char*>(&other->uci_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_pusch_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_ul_cfg_t::InitAsDefaultInstance() {
  ::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_._instance.get_mutable()->pucch_ = const_cast< ::fs::mac_rrc::srsran_pucch_cfg_t*>(
      ::fs::mac_rrc::srsran_pucch_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_._instance.get_mutable()->hopping_ = const_cast< ::fs::mac_rrc::srsran_pusch_hopping_cfg_t*>(
      ::fs::mac_rrc::srsran_pusch_hopping_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_._instance.get_mutable()->pusch_ = const_cast< ::fs::phy_rrc::srsran_pusch_cfg_t*>(
      ::fs::phy_rrc::srsran_pusch_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_._instance.get_mutable()->power_ctrl_ = const_cast< ::fs::phy_rrc::srsran_ue_ul_powerctrl_t*>(
      ::fs::phy_rrc::srsran_ue_ul_powerctrl_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_._instance.get_mutable()->dmrs_ = const_cast< ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t*>(
      ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_srsran_ul_cfg_t_default_instance_._instance.get_mutable()->srs_ = const_cast< ::fs::phy_rrc::srsran_refsignal_srs_cfg_t*>(
      ::fs::phy_rrc::srsran_refsignal_srs_cfg_t::internal_default_instance());
}
class srsran_ul_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_pucch_cfg_t& pucch(const srsran_ul_cfg_t* msg);
  static const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t& hopping(const srsran_ul_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_pusch_cfg_t& pusch(const srsran_ul_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_ue_ul_powerctrl_t& power_ctrl(const srsran_ul_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t& dmrs(const srsran_ul_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_refsignal_srs_cfg_t& srs(const srsran_ul_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_pucch_cfg_t&
srsran_ul_cfg_t::_Internal::pucch(const srsran_ul_cfg_t* msg) {
  return *msg->pucch_;
}
const ::fs::mac_rrc::srsran_pusch_hopping_cfg_t&
srsran_ul_cfg_t::_Internal::hopping(const srsran_ul_cfg_t* msg) {
  return *msg->hopping_;
}
const ::fs::phy_rrc::srsran_pusch_cfg_t&
srsran_ul_cfg_t::_Internal::pusch(const srsran_ul_cfg_t* msg) {
  return *msg->pusch_;
}
const ::fs::phy_rrc::srsran_ue_ul_powerctrl_t&
srsran_ul_cfg_t::_Internal::power_ctrl(const srsran_ul_cfg_t* msg) {
  return *msg->power_ctrl_;
}
const ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t&
srsran_ul_cfg_t::_Internal::dmrs(const srsran_ul_cfg_t* msg) {
  return *msg->dmrs_;
}
const ::fs::phy_rrc::srsran_refsignal_srs_cfg_t&
srsran_ul_cfg_t::_Internal::srs(const srsran_ul_cfg_t* msg) {
  return *msg->srs_;
}
void srsran_ul_cfg_t::clear_pucch() {
  if (GetArena() == nullptr && pucch_ != nullptr) {
    delete pucch_;
  }
  pucch_ = nullptr;
}
void srsran_ul_cfg_t::clear_hopping() {
  if (GetArena() == nullptr && hopping_ != nullptr) {
    delete hopping_;
  }
  hopping_ = nullptr;
}
srsran_ul_cfg_t::srsran_ul_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.srsran_ul_cfg_t)
}
srsran_ul_cfg_t::srsran_ul_cfg_t(const srsran_ul_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pucch()) {
    pucch_ = new ::fs::mac_rrc::srsran_pucch_cfg_t(*from.pucch_);
  } else {
    pucch_ = nullptr;
  }
  if (from._internal_has_hopping()) {
    hopping_ = new ::fs::mac_rrc::srsran_pusch_hopping_cfg_t(*from.hopping_);
  } else {
    hopping_ = nullptr;
  }
  if (from._internal_has_pusch()) {
    pusch_ = new ::fs::phy_rrc::srsran_pusch_cfg_t(*from.pusch_);
  } else {
    pusch_ = nullptr;
  }
  if (from._internal_has_power_ctrl()) {
    power_ctrl_ = new ::fs::phy_rrc::srsran_ue_ul_powerctrl_t(*from.power_ctrl_);
  } else {
    power_ctrl_ = nullptr;
  }
  if (from._internal_has_dmrs()) {
    dmrs_ = new ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t(*from.dmrs_);
  } else {
    dmrs_ = nullptr;
  }
  if (from._internal_has_srs()) {
    srs_ = new ::fs::phy_rrc::srsran_refsignal_srs_cfg_t(*from.srs_);
  } else {
    srs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.srsran_ul_cfg_t)
}

void srsran_ul_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  ::memset(&pucch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srs_) -
      reinterpret_cast<char*>(&pucch_)) + sizeof(srs_));
}

srsran_ul_cfg_t::~srsran_ul_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.srsran_ul_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_ul_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pucch_;
  if (this != internal_default_instance()) delete hopping_;
  if (this != internal_default_instance()) delete pusch_;
  if (this != internal_default_instance()) delete power_ctrl_;
  if (this != internal_default_instance()) delete dmrs_;
  if (this != internal_default_instance()) delete srs_;
}

void srsran_ul_cfg_t::ArenaDtor(void* object) {
  srsran_ul_cfg_t* _this = reinterpret_cast< srsran_ul_cfg_t* >(object);
  (void)_this;
}
void srsran_ul_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_ul_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_ul_cfg_t& srsran_ul_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_ul_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_ul_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.srsran_ul_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pucch_ != nullptr) {
    delete pucch_;
  }
  pucch_ = nullptr;
  if (GetArena() == nullptr && hopping_ != nullptr) {
    delete hopping_;
  }
  hopping_ = nullptr;
  if (GetArena() == nullptr && pusch_ != nullptr) {
    delete pusch_;
  }
  pusch_ = nullptr;
  if (GetArena() == nullptr && power_ctrl_ != nullptr) {
    delete power_ctrl_;
  }
  power_ctrl_ = nullptr;
  if (GetArena() == nullptr && dmrs_ != nullptr) {
    delete dmrs_;
  }
  dmrs_ = nullptr;
  if (GetArena() == nullptr && srs_ != nullptr) {
    delete srs_;
  }
  srs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_ul_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.srsran_pucch_cfg_t pucch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pucch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_pusch_hopping_cfg_t hopping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hopping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_pusch_cfg_t pusch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pusch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_ue_ul_powerctrl_t power_ctrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_ctrl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t dmrs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmrs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_refsignal_srs_cfg_t srs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_srs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_ul_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.srsran_ul_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_pucch_cfg_t pucch = 1;
  if (this->has_pucch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pucch(this), target, stream);
  }

  // .fs.mac_rrc.srsran_pusch_hopping_cfg_t hopping = 2;
  if (this->has_hopping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hopping(this), target, stream);
  }

  // .fs.phy_rrc.srsran_pusch_cfg_t pusch = 3;
  if (this->has_pusch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pusch(this), target, stream);
  }

  // .fs.phy_rrc.srsran_ue_ul_powerctrl_t power_ctrl = 4;
  if (this->has_power_ctrl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::power_ctrl(this), target, stream);
  }

  // .fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t dmrs = 5;
  if (this->has_dmrs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dmrs(this), target, stream);
  }

  // .fs.phy_rrc.srsran_refsignal_srs_cfg_t srs = 6;
  if (this->has_srs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::srs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.srsran_ul_cfg_t)
  return target;
}

size_t srsran_ul_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.srsran_ul_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_pucch_cfg_t pucch = 1;
  if (this->has_pucch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pucch_);
  }

  // .fs.mac_rrc.srsran_pusch_hopping_cfg_t hopping = 2;
  if (this->has_hopping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hopping_);
  }

  // .fs.phy_rrc.srsran_pusch_cfg_t pusch = 3;
  if (this->has_pusch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pusch_);
  }

  // .fs.phy_rrc.srsran_ue_ul_powerctrl_t power_ctrl = 4;
  if (this->has_power_ctrl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_ctrl_);
  }

  // .fs.phy_rrc.srsran_refsignal_dmrs_pusch_cfg_t dmrs = 5;
  if (this->has_dmrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dmrs_);
  }

  // .fs.phy_rrc.srsran_refsignal_srs_cfg_t srs = 6;
  if (this->has_srs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_ul_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.srsran_ul_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_ul_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_ul_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.srsran_ul_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.srsran_ul_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_ul_cfg_t::MergeFrom(const srsran_ul_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.srsran_ul_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pucch()) {
    _internal_mutable_pucch()->::fs::mac_rrc::srsran_pucch_cfg_t::MergeFrom(from._internal_pucch());
  }
  if (from.has_hopping()) {
    _internal_mutable_hopping()->::fs::mac_rrc::srsran_pusch_hopping_cfg_t::MergeFrom(from._internal_hopping());
  }
  if (from.has_pusch()) {
    _internal_mutable_pusch()->::fs::phy_rrc::srsran_pusch_cfg_t::MergeFrom(from._internal_pusch());
  }
  if (from.has_power_ctrl()) {
    _internal_mutable_power_ctrl()->::fs::phy_rrc::srsran_ue_ul_powerctrl_t::MergeFrom(from._internal_power_ctrl());
  }
  if (from.has_dmrs()) {
    _internal_mutable_dmrs()->::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t::MergeFrom(from._internal_dmrs());
  }
  if (from.has_srs()) {
    _internal_mutable_srs()->::fs::phy_rrc::srsran_refsignal_srs_cfg_t::MergeFrom(from._internal_srs());
  }
}

void srsran_ul_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.srsran_ul_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_ul_cfg_t::CopyFrom(const srsran_ul_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.srsran_ul_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_ul_cfg_t::IsInitialized() const {
  return true;
}

void srsran_ul_cfg_t::InternalSwap(srsran_ul_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_ul_cfg_t, srs_)
      + sizeof(srsran_ul_cfg_t::srs_)
      - PROTOBUF_FIELD_OFFSET(srsran_ul_cfg_t, pucch_)>(
          reinterpret_cast<char*>(&pucch_),
          reinterpret_cast<char*>(&other->pucch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_ul_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void phy_cfg_t::InitAsDefaultInstance() {
  ::fs::phy_rrc::_phy_cfg_t_default_instance_._instance.get_mutable()->dl_cfg_ = const_cast< ::fs::mac_rrc::srsran_dl_cfg_t*>(
      ::fs::mac_rrc::srsran_dl_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_phy_cfg_t_default_instance_._instance.get_mutable()->ul_cfg_ = const_cast< ::fs::phy_rrc::srsran_ul_cfg_t*>(
      ::fs::phy_rrc::srsran_ul_cfg_t::internal_default_instance());
  ::fs::phy_rrc::_phy_cfg_t_default_instance_._instance.get_mutable()->prach_cfg_ = const_cast< ::fs::phy_rrc::srsran_prach_cfg_t*>(
      ::fs::phy_rrc::srsran_prach_cfg_t::internal_default_instance());
}
class phy_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_dl_cfg_t& dl_cfg(const phy_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_ul_cfg_t& ul_cfg(const phy_cfg_t* msg);
  static const ::fs::phy_rrc::srsran_prach_cfg_t& prach_cfg(const phy_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_dl_cfg_t&
phy_cfg_t::_Internal::dl_cfg(const phy_cfg_t* msg) {
  return *msg->dl_cfg_;
}
const ::fs::phy_rrc::srsran_ul_cfg_t&
phy_cfg_t::_Internal::ul_cfg(const phy_cfg_t* msg) {
  return *msg->ul_cfg_;
}
const ::fs::phy_rrc::srsran_prach_cfg_t&
phy_cfg_t::_Internal::prach_cfg(const phy_cfg_t* msg) {
  return *msg->prach_cfg_;
}
void phy_cfg_t::clear_dl_cfg() {
  if (GetArena() == nullptr && dl_cfg_ != nullptr) {
    delete dl_cfg_;
  }
  dl_cfg_ = nullptr;
}
phy_cfg_t::phy_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.phy_cfg_t)
}
phy_cfg_t::phy_cfg_t(const phy_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dl_cfg()) {
    dl_cfg_ = new ::fs::mac_rrc::srsran_dl_cfg_t(*from.dl_cfg_);
  } else {
    dl_cfg_ = nullptr;
  }
  if (from._internal_has_ul_cfg()) {
    ul_cfg_ = new ::fs::phy_rrc::srsran_ul_cfg_t(*from.ul_cfg_);
  } else {
    ul_cfg_ = nullptr;
  }
  if (from._internal_has_prach_cfg()) {
    prach_cfg_ = new ::fs::phy_rrc::srsran_prach_cfg_t(*from.prach_cfg_);
  } else {
    prach_cfg_ = nullptr;
  }
  prach_cfg_present_ = from.prach_cfg_present_;
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.phy_cfg_t)
}

void phy_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  ::memset(&dl_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prach_cfg_present_) -
      reinterpret_cast<char*>(&dl_cfg_)) + sizeof(prach_cfg_present_));
}

phy_cfg_t::~phy_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.phy_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void phy_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dl_cfg_;
  if (this != internal_default_instance()) delete ul_cfg_;
  if (this != internal_default_instance()) delete prach_cfg_;
}

void phy_cfg_t::ArenaDtor(void* object) {
  phy_cfg_t* _this = reinterpret_cast< phy_cfg_t* >(object);
  (void)_this;
}
void phy_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void phy_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const phy_cfg_t& phy_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_phy_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void phy_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.phy_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dl_cfg_ != nullptr) {
    delete dl_cfg_;
  }
  dl_cfg_ = nullptr;
  if (GetArena() == nullptr && ul_cfg_ != nullptr) {
    delete ul_cfg_;
  }
  ul_cfg_ = nullptr;
  if (GetArena() == nullptr && prach_cfg_ != nullptr) {
    delete prach_cfg_;
  }
  prach_cfg_ = nullptr;
  prach_cfg_present_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* phy_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool prach_cfg_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prach_cfg_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_ul_cfg_t ul_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ul_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.srsran_prach_cfg_t prach_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_prach_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* phy_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.phy_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool prach_cfg_present = 1;
  if (this->prach_cfg_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_prach_cfg_present(), target);
  }

  // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 2;
  if (this->has_dl_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dl_cfg(this), target, stream);
  }

  // .fs.phy_rrc.srsran_ul_cfg_t ul_cfg = 3;
  if (this->has_ul_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ul_cfg(this), target, stream);
  }

  // .fs.phy_rrc.srsran_prach_cfg_t prach_cfg = 4;
  if (this->has_prach_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::prach_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.phy_cfg_t)
  return target;
}

size_t phy_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.phy_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 2;
  if (this->has_dl_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dl_cfg_);
  }

  // .fs.phy_rrc.srsran_ul_cfg_t ul_cfg = 3;
  if (this->has_ul_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ul_cfg_);
  }

  // .fs.phy_rrc.srsran_prach_cfg_t prach_cfg = 4;
  if (this->has_prach_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prach_cfg_);
  }

  // bool prach_cfg_present = 1;
  if (this->prach_cfg_present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void phy_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.phy_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const phy_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<phy_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.phy_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.phy_cfg_t)
    MergeFrom(*source);
  }
}

void phy_cfg_t::MergeFrom(const phy_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.phy_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dl_cfg()) {
    _internal_mutable_dl_cfg()->::fs::mac_rrc::srsran_dl_cfg_t::MergeFrom(from._internal_dl_cfg());
  }
  if (from.has_ul_cfg()) {
    _internal_mutable_ul_cfg()->::fs::phy_rrc::srsran_ul_cfg_t::MergeFrom(from._internal_ul_cfg());
  }
  if (from.has_prach_cfg()) {
    _internal_mutable_prach_cfg()->::fs::phy_rrc::srsran_prach_cfg_t::MergeFrom(from._internal_prach_cfg());
  }
  if (from.prach_cfg_present() != 0) {
    _internal_set_prach_cfg_present(from._internal_prach_cfg_present());
  }
}

void phy_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.phy_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phy_cfg_t::CopyFrom(const phy_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.phy_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phy_cfg_t::IsInitialized() const {
  return true;
}

void phy_cfg_t::InternalSwap(phy_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(phy_cfg_t, prach_cfg_present_)
      + sizeof(phy_cfg_t::prach_cfg_present_)
      - PROTOBUF_FIELD_OFFSET(phy_cfg_t, dl_cfg_)>(
          reinterpret_cast<char*>(&dl_cfg_),
          reinterpret_cast<char*>(&other->dl_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata phy_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void phy_rrc_cfg_t::InitAsDefaultInstance() {
  ::fs::phy_rrc::_phy_rrc_cfg_t_default_instance_._instance.get_mutable()->phy_cfg_ = const_cast< ::fs::phy_rrc::phy_cfg_t*>(
      ::fs::phy_rrc::phy_cfg_t::internal_default_instance());
}
class phy_rrc_cfg_t::_Internal {
 public:
  static const ::fs::phy_rrc::phy_cfg_t& phy_cfg(const phy_rrc_cfg_t* msg);
};

const ::fs::phy_rrc::phy_cfg_t&
phy_rrc_cfg_t::_Internal::phy_cfg(const phy_rrc_cfg_t* msg) {
  return *msg->phy_cfg_;
}
phy_rrc_cfg_t::phy_rrc_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.phy_rrc_cfg_t)
}
phy_rrc_cfg_t::phy_rrc_cfg_t(const phy_rrc_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phy_cfg()) {
    phy_cfg_ = new ::fs::phy_rrc::phy_cfg_t(*from.phy_cfg_);
  } else {
    phy_cfg_ = nullptr;
  }
  ::memcpy(&configured_, &from.configured_,
    static_cast<size_t>(reinterpret_cast<char*>(&enb_cc_idx_) -
    reinterpret_cast<char*>(&configured_)) + sizeof(enb_cc_idx_));
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.phy_rrc_cfg_t)
}

void phy_rrc_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  ::memset(&phy_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enb_cc_idx_) -
      reinterpret_cast<char*>(&phy_cfg_)) + sizeof(enb_cc_idx_));
}

phy_rrc_cfg_t::~phy_rrc_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.phy_rrc_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void phy_rrc_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete phy_cfg_;
}

void phy_rrc_cfg_t::ArenaDtor(void* object) {
  phy_rrc_cfg_t* _this = reinterpret_cast< phy_rrc_cfg_t* >(object);
  (void)_this;
}
void phy_rrc_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void phy_rrc_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const phy_rrc_cfg_t& phy_rrc_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_phy_rrc_cfg_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void phy_rrc_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.phy_rrc_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && phy_cfg_ != nullptr) {
    delete phy_cfg_;
  }
  phy_cfg_ = nullptr;
  ::memset(&configured_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enb_cc_idx_) -
      reinterpret_cast<char*>(&configured_)) + sizeof(enb_cc_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* phy_rrc_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool configured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          configured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enb_cc_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enb_cc_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_rrc.phy_cfg_t phy_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phy_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* phy_rrc_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.phy_rrc_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool configured = 1;
  if (this->configured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_configured(), target);
  }

  // uint32 enb_cc_idx = 2;
  if (this->enb_cc_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enb_cc_idx(), target);
  }

  // .fs.phy_rrc.phy_cfg_t phy_cfg = 3;
  if (this->has_phy_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phy_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.phy_rrc_cfg_t)
  return target;
}

size_t phy_rrc_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.phy_rrc_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.phy_rrc.phy_cfg_t phy_cfg = 3;
  if (this->has_phy_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phy_cfg_);
  }

  // bool configured = 1;
  if (this->configured() != 0) {
    total_size += 1 + 1;
  }

  // uint32 enb_cc_idx = 2;
  if (this->enb_cc_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enb_cc_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void phy_rrc_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.phy_rrc_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const phy_rrc_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<phy_rrc_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.phy_rrc_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.phy_rrc_cfg_t)
    MergeFrom(*source);
  }
}

void phy_rrc_cfg_t::MergeFrom(const phy_rrc_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.phy_rrc_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phy_cfg()) {
    _internal_mutable_phy_cfg()->::fs::phy_rrc::phy_cfg_t::MergeFrom(from._internal_phy_cfg());
  }
  if (from.configured() != 0) {
    _internal_set_configured(from._internal_configured());
  }
  if (from.enb_cc_idx() != 0) {
    _internal_set_enb_cc_idx(from._internal_enb_cc_idx());
  }
}

void phy_rrc_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.phy_rrc_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phy_rrc_cfg_t::CopyFrom(const phy_rrc_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.phy_rrc_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phy_rrc_cfg_t::IsInitialized() const {
  return true;
}

void phy_rrc_cfg_t::InternalSwap(phy_rrc_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(phy_rrc_cfg_t, enb_cc_idx_)
      + sizeof(phy_rrc_cfg_t::enb_cc_idx_)
      - PROTOBUF_FIELD_OFFSET(phy_rrc_cfg_t, phy_cfg_)>(
          reinterpret_cast<char*>(&phy_cfg_),
          reinterpret_cast<char*>(&other->phy_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata phy_rrc_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void phy_rrc_cfg_list_t::InitAsDefaultInstance() {
}
class phy_rrc_cfg_list_t::_Internal {
 public:
};

phy_rrc_cfg_list_t::phy_rrc_cfg_list_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.phy_rrc.phy_rrc_cfg_list_t)
}
phy_rrc_cfg_list_t::phy_rrc_cfg_list_t(const phy_rrc_cfg_list_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.phy_rrc.phy_rrc_cfg_list_t)
}

void phy_rrc_cfg_list_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_phy_rrc_cfg_list_t_phy_5frrc_5fcfg_5ft_2eproto.base);
}

phy_rrc_cfg_list_t::~phy_rrc_cfg_list_t() {
  // @@protoc_insertion_point(destructor:fs.phy_rrc.phy_rrc_cfg_list_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void phy_rrc_cfg_list_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void phy_rrc_cfg_list_t::ArenaDtor(void* object) {
  phy_rrc_cfg_list_t* _this = reinterpret_cast< phy_rrc_cfg_list_t* >(object);
  (void)_this;
}
void phy_rrc_cfg_list_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void phy_rrc_cfg_list_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const phy_rrc_cfg_list_t& phy_rrc_cfg_list_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_phy_rrc_cfg_list_t_phy_5frrc_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void phy_rrc_cfg_list_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* phy_rrc_cfg_list_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fs.phy_rrc.phy_rrc_cfg_t list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* phy_rrc_cfg_list_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.phy_rrc.phy_rrc_cfg_t list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.phy_rrc.phy_rrc_cfg_list_t)
  return target;
}

size_t phy_rrc_cfg_list_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.phy_rrc.phy_rrc_cfg_t list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void phy_rrc_cfg_list_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  GOOGLE_DCHECK_NE(&from, this);
  const phy_rrc_cfg_list_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<phy_rrc_cfg_list_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.phy_rrc.phy_rrc_cfg_list_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.phy_rrc.phy_rrc_cfg_list_t)
    MergeFrom(*source);
  }
}

void phy_rrc_cfg_list_t::MergeFrom(const phy_rrc_cfg_list_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void phy_rrc_cfg_list_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phy_rrc_cfg_list_t::CopyFrom(const phy_rrc_cfg_list_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.phy_rrc.phy_rrc_cfg_list_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phy_rrc_cfg_list_t::IsInitialized() const {
  return true;
}

void phy_rrc_cfg_list_t::InternalSwap(phy_rrc_cfg_list_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata phy_rrc_cfg_list_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace phy_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_tdd_config_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_tdd_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_tdd_config_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_prach_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_prach_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_prach_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_refsignal_srs_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_refsignal_srs_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_refsignal_srs_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_refsignal_dmrs_pusch_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_ue_ul_powerctrl_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_ue_ul_powerctrl_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_ue_ul_powerctrl_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_pusch_grant_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_pusch_grant_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_pusch_grant_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_pusch_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_pusch_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_pusch_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::srsran_ul_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::srsran_ul_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::srsran_ul_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::phy_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::phy_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::phy_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::phy_rrc_cfg_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::phy_rrc_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::phy_rrc_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::phy_rrc::phy_rrc_cfg_list_t* Arena::CreateMaybeMessage< ::fs::phy_rrc::phy_rrc_cfg_list_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::phy_rrc::phy_rrc_cfg_list_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
