// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rlc_config_t.proto

#include "srsenb/hdr/funsplit_proto/rlc_config_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rlc_5fconfig_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rlc_5fconfig_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rlc_5fconfig_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto;
namespace fs {
namespace rlc {
class rlc_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rlc_config_t> _instance;
} _rlc_config_t_default_instance_;
class rlc_am_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rlc_am_config_t> _instance;
} _rlc_am_config_t_default_instance_;
class rlc_um_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rlc_um_config_t> _instance;
} _rlc_um_config_t_default_instance_;
class rlc_um_nr_config_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rlc_um_nr_config_t> _instance;
} _rlc_um_nr_config_t_default_instance_;
}  // namespace rlc
}  // namespace fs
static void InitDefaultsscc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::rlc::_rlc_am_config_t_default_instance_;
    new (ptr) ::fs::rlc::rlc_am_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::rlc::rlc_am_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto}, {}};

static void InitDefaultsscc_info_rlc_config_t_rlc_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::rlc::_rlc_config_t_default_instance_;
    new (ptr) ::fs::rlc::rlc_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::rlc::rlc_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_rlc_config_t_rlc_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_rlc_config_t_rlc_5fconfig_5ft_2eproto}, {
      &scc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto.base,
      &scc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto.base,
      &scc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto.base,}};

static void InitDefaultsscc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::rlc::_rlc_um_config_t_default_instance_;
    new (ptr) ::fs::rlc::rlc_um_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::rlc::rlc_um_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto}, {}};

static void InitDefaultsscc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::rlc::_rlc_um_nr_config_t_default_instance_;
    new (ptr) ::fs::rlc::rlc_um_nr_config_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::rlc::rlc_um_nr_config_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rlc_5fconfig_5ft_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rlc_5fconfig_5ft_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rlc_5fconfig_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rlc_5fconfig_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, rat_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, rlc_mode_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, am_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, um_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, um_nr_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_config_t, tx_queue_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, t_poll_retx_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, poll_pdu_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, poll_byte_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, max_retx_thresh_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, t_reordering_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_am_config_t, t_status_prohibit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, t_reordering_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, tx_sn_field_length_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, rx_sn_field_length_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, rx_window_size_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, rx_mod_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, tx_mod_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_config_t, is_mrb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_nr_config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_nr_config_t, sn_field_length_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_nr_config_t, um_window_size_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_nr_config_t, mod_),
  PROTOBUF_FIELD_OFFSET(::fs::rlc::rlc_um_nr_config_t, t_reassembly_ms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::rlc::rlc_config_t)},
  { 11, -1, sizeof(::fs::rlc::rlc_am_config_t)},
  { 22, -1, sizeof(::fs::rlc::rlc_um_config_t)},
  { 34, -1, sizeof(::fs::rlc::rlc_um_nr_config_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::rlc::_rlc_config_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::rlc::_rlc_am_config_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::rlc::_rlc_um_config_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::rlc::_rlc_um_nr_config_t_default_instance_),
};

const char descriptor_table_protodef_rlc_5fconfig_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022rlc_config_t.proto\022\006fs.rlc\"\345\001\n\014rlc_con"
  "fig_t\022!\n\003rat\030\001 \001(\0162\024.fs.rlc.srsran_rat_t"
  "\022$\n\010rlc_mode\030\002 \001(\0162\022.fs.rlc.rlc_mode_t\022#"
  "\n\002am\030\003 \001(\0132\027.fs.rlc.rlc_am_config_t\022#\n\002u"
  "m\030\004 \001(\0132\027.fs.rlc.rlc_um_config_t\022)\n\005um_n"
  "r\030\005 \001(\0132\032.fs.rlc.rlc_um_nr_config_t\022\027\n\017t"
  "x_queue_length\030\006 \001(\r\"\225\001\n\017rlc_am_config_t"
  "\022\023\n\013t_poll_retx\030\001 \001(\r\022\020\n\010poll_pdu\030\002 \001(\r\022"
  "\021\n\tpoll_byte\030\003 \001(\r\022\027\n\017max_retx_thresh\030\004 "
  "\001(\r\022\024\n\014t_reordering\030\005 \001(\r\022\031\n\021t_status_pr"
  "ohibit\030\006 \001(\r\"\335\001\n\017rlc_um_config_t\022\024\n\014t_re"
  "ordering\030\001 \001(\r\0225\n\022tx_sn_field_length\030\002 \001"
  "(\0162\031.fs.rlc.rlc_umd_sn_size_t\0225\n\022rx_sn_f"
  "ield_length\030\003 \001(\0162\031.fs.rlc.rlc_umd_sn_si"
  "ze_t\022\026\n\016rx_window_size\030\004 \001(\r\022\016\n\006rx_mod\030\005"
  " \001(\r\022\016\n\006tx_mod\030\006 \001(\r\022\016\n\006is_mrb\030\007 \001(\010\"\210\001\n"
  "\022rlc_um_nr_config_t\0224\n\017sn_field_length\030\001"
  " \001(\0162\033.fs.rlc.rlc_um_nr_sn_size_t\022\026\n\016UM_"
  "Window_Size\030\002 \001(\r\022\013\n\003mod\030\003 \001(\r\022\027\n\017t_reas"
  "sembly_ms\030\004 \001(\005*1\n\014srsran_rat_t\022\007\n\003lte\020\000"
  "\022\006\n\002nr\020\001\022\020\n\014rat_nulltype\020\002*7\n\nrlc_mode_t"
  "\022\006\n\002tm\020\000\022\006\n\002um\020\001\022\006\n\002am\020\002\022\021\n\rmode_nulltyp"
  "e\020\003*D\n\021rlc_umd_sn_size_t\022\r\n\tsize5bits\020\000\022"
  "\016\n\nsize10bits\020\001\022\020\n\014umd_nulltype\020\002*E\n\023rlc"
  "_um_nr_sn_size_t\022\r\n\tsize6bits\020\000\022\016\n\nsize1"
  "2bits\020\001\022\017\n\013um_nulltype\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rlc_5fconfig_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rlc_5fconfig_5ft_2eproto_sccs[4] = {
  &scc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto.base,
  &scc_info_rlc_config_t_rlc_5fconfig_5ft_2eproto.base,
  &scc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto.base,
  &scc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rlc_5fconfig_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rlc_5fconfig_5ft_2eproto = {
  false, false, descriptor_table_protodef_rlc_5fconfig_5ft_2eproto, "rlc_config_t.proto", 1032,
  &descriptor_table_rlc_5fconfig_5ft_2eproto_once, descriptor_table_rlc_5fconfig_5ft_2eproto_sccs, descriptor_table_rlc_5fconfig_5ft_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_rlc_5fconfig_5ft_2eproto::offsets,
  file_level_metadata_rlc_5fconfig_5ft_2eproto, 4, file_level_enum_descriptors_rlc_5fconfig_5ft_2eproto, file_level_service_descriptors_rlc_5fconfig_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rlc_5fconfig_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rlc_5fconfig_5ft_2eproto)), true);
namespace fs {
namespace rlc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_rat_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rlc_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_rlc_5fconfig_5ft_2eproto[0];
}
bool srsran_rat_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rlc_mode_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rlc_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_rlc_5fconfig_5ft_2eproto[1];
}
bool rlc_mode_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rlc_umd_sn_size_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rlc_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_rlc_5fconfig_5ft_2eproto[2];
}
bool rlc_umd_sn_size_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rlc_um_nr_sn_size_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rlc_5fconfig_5ft_2eproto);
  return file_level_enum_descriptors_rlc_5fconfig_5ft_2eproto[3];
}
bool rlc_um_nr_sn_size_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void rlc_config_t::InitAsDefaultInstance() {
  ::fs::rlc::_rlc_config_t_default_instance_._instance.get_mutable()->am_ = const_cast< ::fs::rlc::rlc_am_config_t*>(
      ::fs::rlc::rlc_am_config_t::internal_default_instance());
  ::fs::rlc::_rlc_config_t_default_instance_._instance.get_mutable()->um_ = const_cast< ::fs::rlc::rlc_um_config_t*>(
      ::fs::rlc::rlc_um_config_t::internal_default_instance());
  ::fs::rlc::_rlc_config_t_default_instance_._instance.get_mutable()->um_nr_ = const_cast< ::fs::rlc::rlc_um_nr_config_t*>(
      ::fs::rlc::rlc_um_nr_config_t::internal_default_instance());
}
class rlc_config_t::_Internal {
 public:
  static const ::fs::rlc::rlc_am_config_t& am(const rlc_config_t* msg);
  static const ::fs::rlc::rlc_um_config_t& um(const rlc_config_t* msg);
  static const ::fs::rlc::rlc_um_nr_config_t& um_nr(const rlc_config_t* msg);
};

const ::fs::rlc::rlc_am_config_t&
rlc_config_t::_Internal::am(const rlc_config_t* msg) {
  return *msg->am_;
}
const ::fs::rlc::rlc_um_config_t&
rlc_config_t::_Internal::um(const rlc_config_t* msg) {
  return *msg->um_;
}
const ::fs::rlc::rlc_um_nr_config_t&
rlc_config_t::_Internal::um_nr(const rlc_config_t* msg) {
  return *msg->um_nr_;
}
rlc_config_t::rlc_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.rlc.rlc_config_t)
}
rlc_config_t::rlc_config_t(const rlc_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_am()) {
    am_ = new ::fs::rlc::rlc_am_config_t(*from.am_);
  } else {
    am_ = nullptr;
  }
  if (from._internal_has_um()) {
    um_ = new ::fs::rlc::rlc_um_config_t(*from.um_);
  } else {
    um_ = nullptr;
  }
  if (from._internal_has_um_nr()) {
    um_nr_ = new ::fs::rlc::rlc_um_nr_config_t(*from.um_nr_);
  } else {
    um_nr_ = nullptr;
  }
  ::memcpy(&rat_, &from.rat_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_queue_length_) -
    reinterpret_cast<char*>(&rat_)) + sizeof(tx_queue_length_));
  // @@protoc_insertion_point(copy_constructor:fs.rlc.rlc_config_t)
}

void rlc_config_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rlc_config_t_rlc_5fconfig_5ft_2eproto.base);
  ::memset(&am_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_queue_length_) -
      reinterpret_cast<char*>(&am_)) + sizeof(tx_queue_length_));
}

rlc_config_t::~rlc_config_t() {
  // @@protoc_insertion_point(destructor:fs.rlc.rlc_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rlc_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete am_;
  if (this != internal_default_instance()) delete um_;
  if (this != internal_default_instance()) delete um_nr_;
}

void rlc_config_t::ArenaDtor(void* object) {
  rlc_config_t* _this = reinterpret_cast< rlc_config_t* >(object);
  (void)_this;
}
void rlc_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rlc_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rlc_config_t& rlc_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rlc_config_t_rlc_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void rlc_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.rlc.rlc_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && am_ != nullptr) {
    delete am_;
  }
  am_ = nullptr;
  if (GetArena() == nullptr && um_ != nullptr) {
    delete um_;
  }
  um_ = nullptr;
  if (GetArena() == nullptr && um_nr_ != nullptr) {
    delete um_nr_;
  }
  um_nr_ = nullptr;
  ::memset(&rat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_queue_length_) -
      reinterpret_cast<char*>(&rat_)) + sizeof(tx_queue_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rlc_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.rlc.srsran_rat_t rat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rat(static_cast<::fs::rlc::srsran_rat_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.rlc.rlc_mode_t rlc_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rlc_mode(static_cast<::fs::rlc::rlc_mode_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.rlc.rlc_am_config_t am = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_am(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.rlc.rlc_um_config_t um = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_um(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.rlc.rlc_um_nr_config_t um_nr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_um_nr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_queue_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tx_queue_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rlc_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.rlc.rlc_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.rlc.srsran_rat_t rat = 1;
  if (this->rat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rat(), target);
  }

  // .fs.rlc.rlc_mode_t rlc_mode = 2;
  if (this->rlc_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rlc_mode(), target);
  }

  // .fs.rlc.rlc_am_config_t am = 3;
  if (this->has_am()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::am(this), target, stream);
  }

  // .fs.rlc.rlc_um_config_t um = 4;
  if (this->has_um()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::um(this), target, stream);
  }

  // .fs.rlc.rlc_um_nr_config_t um_nr = 5;
  if (this->has_um_nr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::um_nr(this), target, stream);
  }

  // uint32 tx_queue_length = 6;
  if (this->tx_queue_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tx_queue_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.rlc.rlc_config_t)
  return target;
}

size_t rlc_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.rlc.rlc_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.rlc.rlc_am_config_t am = 3;
  if (this->has_am()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *am_);
  }

  // .fs.rlc.rlc_um_config_t um = 4;
  if (this->has_um()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *um_);
  }

  // .fs.rlc.rlc_um_nr_config_t um_nr = 5;
  if (this->has_um_nr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *um_nr_);
  }

  // .fs.rlc.srsran_rat_t rat = 1;
  if (this->rat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rat());
  }

  // .fs.rlc.rlc_mode_t rlc_mode = 2;
  if (this->rlc_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rlc_mode());
  }

  // uint32 tx_queue_length = 6;
  if (this->tx_queue_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_queue_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rlc_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.rlc.rlc_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const rlc_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rlc_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.rlc.rlc_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.rlc.rlc_config_t)
    MergeFrom(*source);
  }
}

void rlc_config_t::MergeFrom(const rlc_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.rlc.rlc_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_am()) {
    _internal_mutable_am()->::fs::rlc::rlc_am_config_t::MergeFrom(from._internal_am());
  }
  if (from.has_um()) {
    _internal_mutable_um()->::fs::rlc::rlc_um_config_t::MergeFrom(from._internal_um());
  }
  if (from.has_um_nr()) {
    _internal_mutable_um_nr()->::fs::rlc::rlc_um_nr_config_t::MergeFrom(from._internal_um_nr());
  }
  if (from.rat() != 0) {
    _internal_set_rat(from._internal_rat());
  }
  if (from.rlc_mode() != 0) {
    _internal_set_rlc_mode(from._internal_rlc_mode());
  }
  if (from.tx_queue_length() != 0) {
    _internal_set_tx_queue_length(from._internal_tx_queue_length());
  }
}

void rlc_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.rlc.rlc_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rlc_config_t::CopyFrom(const rlc_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.rlc.rlc_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rlc_config_t::IsInitialized() const {
  return true;
}

void rlc_config_t::InternalSwap(rlc_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rlc_config_t, tx_queue_length_)
      + sizeof(rlc_config_t::tx_queue_length_)
      - PROTOBUF_FIELD_OFFSET(rlc_config_t, am_)>(
          reinterpret_cast<char*>(&am_),
          reinterpret_cast<char*>(&other->am_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rlc_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rlc_am_config_t::InitAsDefaultInstance() {
}
class rlc_am_config_t::_Internal {
 public:
};

rlc_am_config_t::rlc_am_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.rlc.rlc_am_config_t)
}
rlc_am_config_t::rlc_am_config_t(const rlc_am_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_poll_retx_, &from.t_poll_retx_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_status_prohibit_) -
    reinterpret_cast<char*>(&t_poll_retx_)) + sizeof(t_status_prohibit_));
  // @@protoc_insertion_point(copy_constructor:fs.rlc.rlc_am_config_t)
}

void rlc_am_config_t::SharedCtor() {
  ::memset(&t_poll_retx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_status_prohibit_) -
      reinterpret_cast<char*>(&t_poll_retx_)) + sizeof(t_status_prohibit_));
}

rlc_am_config_t::~rlc_am_config_t() {
  // @@protoc_insertion_point(destructor:fs.rlc.rlc_am_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rlc_am_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rlc_am_config_t::ArenaDtor(void* object) {
  rlc_am_config_t* _this = reinterpret_cast< rlc_am_config_t* >(object);
  (void)_this;
}
void rlc_am_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rlc_am_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rlc_am_config_t& rlc_am_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rlc_am_config_t_rlc_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void rlc_am_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.rlc.rlc_am_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_poll_retx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_status_prohibit_) -
      reinterpret_cast<char*>(&t_poll_retx_)) + sizeof(t_status_prohibit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rlc_am_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 t_poll_retx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          t_poll_retx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 poll_pdu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          poll_pdu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 poll_byte = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          poll_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_retx_thresh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_retx_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 t_reordering = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          t_reordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 t_status_prohibit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          t_status_prohibit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rlc_am_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.rlc.rlc_am_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 t_poll_retx = 1;
  if (this->t_poll_retx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_t_poll_retx(), target);
  }

  // uint32 poll_pdu = 2;
  if (this->poll_pdu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_poll_pdu(), target);
  }

  // uint32 poll_byte = 3;
  if (this->poll_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_poll_byte(), target);
  }

  // uint32 max_retx_thresh = 4;
  if (this->max_retx_thresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_retx_thresh(), target);
  }

  // uint32 t_reordering = 5;
  if (this->t_reordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_t_reordering(), target);
  }

  // uint32 t_status_prohibit = 6;
  if (this->t_status_prohibit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_t_status_prohibit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.rlc.rlc_am_config_t)
  return target;
}

size_t rlc_am_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.rlc.rlc_am_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 t_poll_retx = 1;
  if (this->t_poll_retx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_poll_retx());
  }

  // uint32 poll_pdu = 2;
  if (this->poll_pdu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_poll_pdu());
  }

  // uint32 poll_byte = 3;
  if (this->poll_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_poll_byte());
  }

  // uint32 max_retx_thresh = 4;
  if (this->max_retx_thresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_retx_thresh());
  }

  // uint32 t_reordering = 5;
  if (this->t_reordering() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_reordering());
  }

  // uint32 t_status_prohibit = 6;
  if (this->t_status_prohibit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_status_prohibit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rlc_am_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.rlc.rlc_am_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const rlc_am_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rlc_am_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.rlc.rlc_am_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.rlc.rlc_am_config_t)
    MergeFrom(*source);
  }
}

void rlc_am_config_t::MergeFrom(const rlc_am_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.rlc.rlc_am_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t_poll_retx() != 0) {
    _internal_set_t_poll_retx(from._internal_t_poll_retx());
  }
  if (from.poll_pdu() != 0) {
    _internal_set_poll_pdu(from._internal_poll_pdu());
  }
  if (from.poll_byte() != 0) {
    _internal_set_poll_byte(from._internal_poll_byte());
  }
  if (from.max_retx_thresh() != 0) {
    _internal_set_max_retx_thresh(from._internal_max_retx_thresh());
  }
  if (from.t_reordering() != 0) {
    _internal_set_t_reordering(from._internal_t_reordering());
  }
  if (from.t_status_prohibit() != 0) {
    _internal_set_t_status_prohibit(from._internal_t_status_prohibit());
  }
}

void rlc_am_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.rlc.rlc_am_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rlc_am_config_t::CopyFrom(const rlc_am_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.rlc.rlc_am_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rlc_am_config_t::IsInitialized() const {
  return true;
}

void rlc_am_config_t::InternalSwap(rlc_am_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rlc_am_config_t, t_status_prohibit_)
      + sizeof(rlc_am_config_t::t_status_prohibit_)
      - PROTOBUF_FIELD_OFFSET(rlc_am_config_t, t_poll_retx_)>(
          reinterpret_cast<char*>(&t_poll_retx_),
          reinterpret_cast<char*>(&other->t_poll_retx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rlc_am_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rlc_um_config_t::InitAsDefaultInstance() {
}
class rlc_um_config_t::_Internal {
 public:
};

rlc_um_config_t::rlc_um_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.rlc.rlc_um_config_t)
}
rlc_um_config_t::rlc_um_config_t(const rlc_um_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_reordering_, &from.t_reordering_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_mrb_) -
    reinterpret_cast<char*>(&t_reordering_)) + sizeof(is_mrb_));
  // @@protoc_insertion_point(copy_constructor:fs.rlc.rlc_um_config_t)
}

void rlc_um_config_t::SharedCtor() {
  ::memset(&t_reordering_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_mrb_) -
      reinterpret_cast<char*>(&t_reordering_)) + sizeof(is_mrb_));
}

rlc_um_config_t::~rlc_um_config_t() {
  // @@protoc_insertion_point(destructor:fs.rlc.rlc_um_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rlc_um_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rlc_um_config_t::ArenaDtor(void* object) {
  rlc_um_config_t* _this = reinterpret_cast< rlc_um_config_t* >(object);
  (void)_this;
}
void rlc_um_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rlc_um_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rlc_um_config_t& rlc_um_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rlc_um_config_t_rlc_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void rlc_um_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.rlc.rlc_um_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_reordering_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_mrb_) -
      reinterpret_cast<char*>(&t_reordering_)) + sizeof(is_mrb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rlc_um_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 t_reordering = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          t_reordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.rlc.rlc_umd_sn_size_t tx_sn_field_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tx_sn_field_length(static_cast<::fs::rlc::rlc_umd_sn_size_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.rlc.rlc_umd_sn_size_t rx_sn_field_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rx_sn_field_length(static_cast<::fs::rlc::rlc_umd_sn_size_t>(val));
        } else goto handle_unusual;
        continue;
      // uint32 rx_window_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rx_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rx_mod = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rx_mod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_mod = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tx_mod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_mrb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_mrb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rlc_um_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.rlc.rlc_um_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 t_reordering = 1;
  if (this->t_reordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_t_reordering(), target);
  }

  // .fs.rlc.rlc_umd_sn_size_t tx_sn_field_length = 2;
  if (this->tx_sn_field_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tx_sn_field_length(), target);
  }

  // .fs.rlc.rlc_umd_sn_size_t rx_sn_field_length = 3;
  if (this->rx_sn_field_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rx_sn_field_length(), target);
  }

  // uint32 rx_window_size = 4;
  if (this->rx_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rx_window_size(), target);
  }

  // uint32 rx_mod = 5;
  if (this->rx_mod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rx_mod(), target);
  }

  // uint32 tx_mod = 6;
  if (this->tx_mod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tx_mod(), target);
  }

  // bool is_mrb = 7;
  if (this->is_mrb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_mrb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.rlc.rlc_um_config_t)
  return target;
}

size_t rlc_um_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.rlc.rlc_um_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 t_reordering = 1;
  if (this->t_reordering() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_reordering());
  }

  // .fs.rlc.rlc_umd_sn_size_t tx_sn_field_length = 2;
  if (this->tx_sn_field_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tx_sn_field_length());
  }

  // .fs.rlc.rlc_umd_sn_size_t rx_sn_field_length = 3;
  if (this->rx_sn_field_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rx_sn_field_length());
  }

  // uint32 rx_window_size = 4;
  if (this->rx_window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rx_window_size());
  }

  // uint32 rx_mod = 5;
  if (this->rx_mod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rx_mod());
  }

  // uint32 tx_mod = 6;
  if (this->tx_mod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_mod());
  }

  // bool is_mrb = 7;
  if (this->is_mrb() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rlc_um_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.rlc.rlc_um_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const rlc_um_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rlc_um_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.rlc.rlc_um_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.rlc.rlc_um_config_t)
    MergeFrom(*source);
  }
}

void rlc_um_config_t::MergeFrom(const rlc_um_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.rlc.rlc_um_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t_reordering() != 0) {
    _internal_set_t_reordering(from._internal_t_reordering());
  }
  if (from.tx_sn_field_length() != 0) {
    _internal_set_tx_sn_field_length(from._internal_tx_sn_field_length());
  }
  if (from.rx_sn_field_length() != 0) {
    _internal_set_rx_sn_field_length(from._internal_rx_sn_field_length());
  }
  if (from.rx_window_size() != 0) {
    _internal_set_rx_window_size(from._internal_rx_window_size());
  }
  if (from.rx_mod() != 0) {
    _internal_set_rx_mod(from._internal_rx_mod());
  }
  if (from.tx_mod() != 0) {
    _internal_set_tx_mod(from._internal_tx_mod());
  }
  if (from.is_mrb() != 0) {
    _internal_set_is_mrb(from._internal_is_mrb());
  }
}

void rlc_um_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.rlc.rlc_um_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rlc_um_config_t::CopyFrom(const rlc_um_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.rlc.rlc_um_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rlc_um_config_t::IsInitialized() const {
  return true;
}

void rlc_um_config_t::InternalSwap(rlc_um_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rlc_um_config_t, is_mrb_)
      + sizeof(rlc_um_config_t::is_mrb_)
      - PROTOBUF_FIELD_OFFSET(rlc_um_config_t, t_reordering_)>(
          reinterpret_cast<char*>(&t_reordering_),
          reinterpret_cast<char*>(&other->t_reordering_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rlc_um_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rlc_um_nr_config_t::InitAsDefaultInstance() {
}
class rlc_um_nr_config_t::_Internal {
 public:
};

rlc_um_nr_config_t::rlc_um_nr_config_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.rlc.rlc_um_nr_config_t)
}
rlc_um_nr_config_t::rlc_um_nr_config_t(const rlc_um_nr_config_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sn_field_length_, &from.sn_field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_reassembly_ms_) -
    reinterpret_cast<char*>(&sn_field_length_)) + sizeof(t_reassembly_ms_));
  // @@protoc_insertion_point(copy_constructor:fs.rlc.rlc_um_nr_config_t)
}

void rlc_um_nr_config_t::SharedCtor() {
  ::memset(&sn_field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_reassembly_ms_) -
      reinterpret_cast<char*>(&sn_field_length_)) + sizeof(t_reassembly_ms_));
}

rlc_um_nr_config_t::~rlc_um_nr_config_t() {
  // @@protoc_insertion_point(destructor:fs.rlc.rlc_um_nr_config_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rlc_um_nr_config_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rlc_um_nr_config_t::ArenaDtor(void* object) {
  rlc_um_nr_config_t* _this = reinterpret_cast< rlc_um_nr_config_t* >(object);
  (void)_this;
}
void rlc_um_nr_config_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rlc_um_nr_config_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rlc_um_nr_config_t& rlc_um_nr_config_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rlc_um_nr_config_t_rlc_5fconfig_5ft_2eproto.base);
  return *internal_default_instance();
}


void rlc_um_nr_config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.rlc.rlc_um_nr_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sn_field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_reassembly_ms_) -
      reinterpret_cast<char*>(&sn_field_length_)) + sizeof(t_reassembly_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rlc_um_nr_config_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.rlc.rlc_um_nr_sn_size_t sn_field_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sn_field_length(static_cast<::fs::rlc::rlc_um_nr_sn_size_t>(val));
        } else goto handle_unusual;
        continue;
      // uint32 UM_Window_Size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          um_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 t_reassembly_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          t_reassembly_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rlc_um_nr_config_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.rlc.rlc_um_nr_config_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.rlc.rlc_um_nr_sn_size_t sn_field_length = 1;
  if (this->sn_field_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sn_field_length(), target);
  }

  // uint32 UM_Window_Size = 2;
  if (this->um_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_um_window_size(), target);
  }

  // uint32 mod = 3;
  if (this->mod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mod(), target);
  }

  // int32 t_reassembly_ms = 4;
  if (this->t_reassembly_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_t_reassembly_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.rlc.rlc_um_nr_config_t)
  return target;
}

size_t rlc_um_nr_config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.rlc.rlc_um_nr_config_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.rlc.rlc_um_nr_sn_size_t sn_field_length = 1;
  if (this->sn_field_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sn_field_length());
  }

  // uint32 UM_Window_Size = 2;
  if (this->um_window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_um_window_size());
  }

  // uint32 mod = 3;
  if (this->mod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mod());
  }

  // int32 t_reassembly_ms = 4;
  if (this->t_reassembly_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_t_reassembly_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rlc_um_nr_config_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.rlc.rlc_um_nr_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const rlc_um_nr_config_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rlc_um_nr_config_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.rlc.rlc_um_nr_config_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.rlc.rlc_um_nr_config_t)
    MergeFrom(*source);
  }
}

void rlc_um_nr_config_t::MergeFrom(const rlc_um_nr_config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.rlc.rlc_um_nr_config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn_field_length() != 0) {
    _internal_set_sn_field_length(from._internal_sn_field_length());
  }
  if (from.um_window_size() != 0) {
    _internal_set_um_window_size(from._internal_um_window_size());
  }
  if (from.mod() != 0) {
    _internal_set_mod(from._internal_mod());
  }
  if (from.t_reassembly_ms() != 0) {
    _internal_set_t_reassembly_ms(from._internal_t_reassembly_ms());
  }
}

void rlc_um_nr_config_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.rlc.rlc_um_nr_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rlc_um_nr_config_t::CopyFrom(const rlc_um_nr_config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.rlc.rlc_um_nr_config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rlc_um_nr_config_t::IsInitialized() const {
  return true;
}

void rlc_um_nr_config_t::InternalSwap(rlc_um_nr_config_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rlc_um_nr_config_t, t_reassembly_ms_)
      + sizeof(rlc_um_nr_config_t::t_reassembly_ms_)
      - PROTOBUF_FIELD_OFFSET(rlc_um_nr_config_t, sn_field_length_)>(
          reinterpret_cast<char*>(&sn_field_length_),
          reinterpret_cast<char*>(&other->sn_field_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rlc_um_nr_config_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rlc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::rlc::rlc_config_t* Arena::CreateMaybeMessage< ::fs::rlc::rlc_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::rlc::rlc_config_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::rlc::rlc_am_config_t* Arena::CreateMaybeMessage< ::fs::rlc::rlc_am_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::rlc::rlc_am_config_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::rlc::rlc_um_config_t* Arena::CreateMaybeMessage< ::fs::rlc::rlc_um_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::rlc::rlc_um_config_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::rlc::rlc_um_nr_config_t* Arena::CreateMaybeMessage< ::fs::rlc::rlc_um_nr_config_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::rlc::rlc_um_nr_config_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
