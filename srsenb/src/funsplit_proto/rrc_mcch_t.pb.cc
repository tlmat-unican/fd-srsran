// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rrc_mcch_t.proto

#include "srsenb/hdr/funsplit_proto/rrc_mcch_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_choice_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rrc_5fmcch_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tmgi_t_rrc_5fmcch_5ft_2eproto;
namespace fs {
namespace mac_rrc {
class plmn_id_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<plmn_id_t> _instance;
} _plmn_id_t_default_instance_;
class choiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<choice> _instance;
} _choice_default_instance_;
class tmgi_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tmgi_t> _instance;
} _tmgi_t_default_instance_;
class mbms_session_info_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mbms_session_info_t> _instance;
} _mbms_session_info_t_default_instance_;
class pmch_info_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pmch_info_t> _instance;
} _pmch_info_t_default_instance_;
class mbsfn_sf_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mbsfn_sf_cfg_t> _instance;
} _mbsfn_sf_cfg_t_default_instance_;
class mcch_msg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mcch_msg_t> _instance;
} _mcch_msg_t_default_instance_;
class mbms_notif_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mbms_notif_cfg_t> _instance;
} _mbms_notif_cfg_t_default_instance_;
class mcch_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mcch_cfg_t> _instance;
} _mcch_cfg_t_default_instance_;
class mbsfn_area_info_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mbsfn_area_info_t> _instance;
} _mbsfn_area_info_t_default_instance_;
class sib13_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sib13_t> _instance;
} _sib13_t_default_instance_;
class sib2_mbms_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sib2_mbms_t> _instance;
} _sib2_mbms_t_default_instance_;
class bufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<buffer> _instance;
} _buffer_default_instance_;
}  // namespace mac_rrc
}  // namespace fs
static void InitDefaultsscc_info_buffer_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_buffer_default_instance_;
    new (ptr) ::fs::mac_rrc::buffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::buffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_buffer_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_buffer_rrc_5fmcch_5ft_2eproto}, {}};

static void InitDefaultsscc_info_choice_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_choice_default_instance_;
    new (ptr) ::fs::mac_rrc::choice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::choice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_choice_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_choice_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_mbms_notif_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::mbms_notif_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::mbms_notif_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto}, {}};

static void InitDefaultsscc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_mbms_session_info_t_default_instance_;
    new (ptr) ::fs::mac_rrc::mbms_session_info_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::mbms_session_info_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_tmgi_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_mbsfn_area_info_t_default_instance_;
    new (ptr) ::fs::mac_rrc::mbsfn_area_info_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::mbsfn_area_info_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_mbsfn_sf_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::mbsfn_sf_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::mbsfn_sf_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto}, {}};

static void InitDefaultsscc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_mcch_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::mcch_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::mcch_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto}, {}};

static void InitDefaultsscc_info_mcch_msg_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_mcch_msg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::mcch_msg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::mcch_msg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_mcch_msg_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_mcch_msg_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto.base,
      &scc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_plmn_id_t_default_instance_;
    new (ptr) ::fs::mac_rrc::plmn_id_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::plmn_id_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto}, {}};

static void InitDefaultsscc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_pmch_info_t_default_instance_;
    new (ptr) ::fs::mac_rrc::pmch_info_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::pmch_info_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_sib13_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_sib13_t_default_instance_;
    new (ptr) ::fs::mac_rrc::sib13_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::sib13_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_sib13_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_sib13_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto.base,
      &scc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_sib2_mbms_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_sib2_mbms_t_default_instance_;
    new (ptr) ::fs::mac_rrc::sib2_mbms_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::sib2_mbms_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sib2_mbms_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sib2_mbms_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto.base,}};

static void InitDefaultsscc_info_tmgi_t_rrc_5fmcch_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_tmgi_t_default_instance_;
    new (ptr) ::fs::mac_rrc::tmgi_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::tmgi_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tmgi_t_rrc_5fmcch_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tmgi_t_rrc_5fmcch_5ft_2eproto}, {
      &scc_info_choice_rrc_5fmcch_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rrc_5fmcch_5ft_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rrc_5fmcch_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rrc_5fmcch_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::plmn_id_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::plmn_id_t, nof_mnc_digits_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::plmn_id_t, mcc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::plmn_id_t, mnc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::choice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::choice, plmn_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::choice, explicit_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::tmgi_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::tmgi_t, plmn_id_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::tmgi_t, plmn_id_type_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::tmgi_t, serviced_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_session_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_session_info_t, lc_ch_id_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_session_info_t, session_id_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_session_info_t, session_id_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_session_info_t, tmgi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, data_mcs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, sf_alloc_end_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, nof_mbms_session_info_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, max_session_per_pmch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, mch_sched_period_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::pmch_info_t, mbms_session_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_sf_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_sf_cfg_t, sf_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_sf_cfg_t, radioframe_alloc_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_sf_cfg_t, radioframe_alloc_period_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_sf_cfg_t, nof_alloc_subfrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_msg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_msg_t, nof_pmch_info_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_msg_t, nof_common_sf_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_msg_t, common_sf_alloc_period_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_msg_t, common_sf_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_msg_t, pmch_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_notif_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_notif_cfg_t, notif_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_notif_cfg_t, notif_sf_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbms_notif_cfg_t, notif_repeat_coeff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_cfg_t, sf_alloc_info_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_cfg_t, mcch_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_cfg_t, sig_mcs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_cfg_t, mcch_mod_period_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mcch_cfg_t, mcch_repeat_period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_area_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_area_info_t, mbsfn_area_id_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_area_info_t, notif_ind_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_area_info_t, mcch_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::mbsfn_area_info_t, non_mbsfn_region_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib13_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib13_t, max_mbsfn_area_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib13_t, nof_mbsfn_area_info_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib13_t, notif_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib13_t, mbsfn_area_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib2_mbms_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib2_mbms_t, nof_mbsfn_sf_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib2_mbms_t, mbsfn_sf_cfg_list_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib2_mbms_t, max_nof_mbsfn_sf_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::sib2_mbms_t, mbsfn_sf_cfg_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::buffer, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::mac_rrc::plmn_id_t)},
  { 8, -1, sizeof(::fs::mac_rrc::choice)},
  { 15, -1, sizeof(::fs::mac_rrc::tmgi_t)},
  { 23, -1, sizeof(::fs::mac_rrc::mbms_session_info_t)},
  { 32, -1, sizeof(::fs::mac_rrc::pmch_info_t)},
  { 43, -1, sizeof(::fs::mac_rrc::mbsfn_sf_cfg_t)},
  { 52, -1, sizeof(::fs::mac_rrc::mcch_msg_t)},
  { 62, -1, sizeof(::fs::mac_rrc::mbms_notif_cfg_t)},
  { 70, -1, sizeof(::fs::mac_rrc::mcch_cfg_t)},
  { 80, -1, sizeof(::fs::mac_rrc::mbsfn_area_info_t)},
  { 89, -1, sizeof(::fs::mac_rrc::sib13_t)},
  { 98, -1, sizeof(::fs::mac_rrc::sib2_mbms_t)},
  { 107, -1, sizeof(::fs::mac_rrc::buffer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_plmn_id_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_choice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_tmgi_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_mbms_session_info_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_pmch_info_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_mbsfn_sf_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_mcch_msg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_mbms_notif_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_mcch_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_mbsfn_area_info_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_sib13_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_sib2_mbms_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_buffer_default_instance_),
};

const char descriptor_table_protodef_rrc_5fmcch_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rrc_mcch_t.proto\022\nfs.mac_rrc\"=\n\tplmn_i"
  "d_t\022\026\n\016nof_mnc_digits\030\001 \001(\r\022\013\n\003mcc\030\002 \003(\r"
  "\022\013\n\003mnc\030\003 \003(\r\"I\n\006choice\022\020\n\010plmn_idx\030\001 \001("
  "\r\022-\n\016explicit_value\030\002 \001(\0132\025.fs.mac_rrc.p"
  "lmn_id_t\"t\n\006tmgi_t\022#\n\007plmn_id\030\001 \001(\0132\022.fs"
  ".mac_rrc.choice\0220\n\014plmn_id_type\030\002 \001(\0162\032."
  "fs.mac_rrc.plmn_id_type_t\022\023\n\013serviced_id"
  "\030\003 \003(\r\"y\n\023mbms_session_info_t\022\020\n\010lc_ch_i"
  "d\030\001 \001(\r\022\022\n\nsession_id\030\002 \001(\r\022\032\n\022session_i"
  "d_present\030\003 \001(\010\022 \n\004tmgi\030\004 \001(\0132\022.fs.mac_r"
  "rc.tmgi_t\"\355\001\n\013pmch_info_t\022\020\n\010data_mcs\030\001 "
  "\001(\r\022\024\n\014sf_alloc_end\030\002 \001(\r\022\035\n\025nof_mbms_se"
  "ssion_info\030\003 \001(\r\022\034\n\024max_session_per_pmch"
  "\030\004 \001(\r\0228\n\020mch_sched_period\030\005 \001(\0162\036.fs.ma"
  "c_rrc.mch_sched_period_t\022\?\n\026mbms_session"
  "_info_list\030\006 \003(\0132\037.fs.mac_rrc.mbms_sessi"
  "on_info_t\"\267\001\n\016mbsfn_sf_cfg_t\022\020\n\010sf_alloc"
  "\030\001 \001(\r\022\037\n\027radioframe_alloc_offset\030\002 \001(\r\022"
  ";\n\027radioframe_alloc_period\030\003 \001(\0162\032.fs.ma"
  "c_rrc.alloc_period_t\0225\n\020nof_alloc_subfrs"
  "\030\004 \001(\0162\033.fs.mac_rrc.sf_alloc_type_t\"\354\001\n\n"
  "mcch_msg_t\022\025\n\rnof_pmch_info\030\001 \001(\r\022\033\n\023nof"
  "_common_sf_alloc\030\002 \001(\r\022D\n\026common_sf_allo"
  "c_period\030\003 \001(\0162$.fs.mac_rrc.common_sf_al"
  "loc_period_t\0223\n\017common_sf_alloc\030\004 \003(\0132\032."
  "fs.mac_rrc.mbsfn_sf_cfg_t\022/\n\016pmch_info_l"
  "ist\030\005 \003(\0132\027.fs.mac_rrc.pmch_info_t\"o\n\020mb"
  "ms_notif_cfg_t\022\024\n\014notif_offset\030\001 \001(\r\022\024\n\014"
  "notif_sf_idx\030\002 \001(\r\022/\n\022notif_repeat_coeff"
  "\030\003 \001(\0162\023.fs.mac_rrc.coeff_t\"\314\001\n\nmcch_cfg"
  "_t\022\025\n\rsf_alloc_info\030\001 \001(\r\022\023\n\013mcch_offset"
  "\030\002 \001(\r\022&\n\007sig_mcs\030\003 \001(\0162\025.fs.mac_rrc.sig"
  "_mcs_t\0221\n\017mcch_mod_period\030\004 \001(\0162\030.fs.mac"
  "_rrc.mod_period_t\0227\n\022mcch_repeat_period\030"
  "\005 \001(\0162\033.fs.mac_rrc.repeat_period_t\"\237\001\n\021m"
  "bsfn_area_info_t\022\025\n\rmbsfn_area_id\030\001 \001(\r\022"
  "\021\n\tnotif_ind\030\002 \001(\r\022(\n\010mcch_cfg\030\003 \001(\0132\026.f"
  "s.mac_rrc.mcch_cfg_t\0226\n\024non_mbsfn_region"
  "_len\030\004 \001(\0162\030.fs.mac_rrc.region_len_t\"\254\001\n"
  "\007sib13_t\022\026\n\016max_mbsfn_area\030\001 \001(\r\022\033\n\023nof_"
  "mbsfn_area_info\030\002 \001(\r\022/\n\tnotif_cfg\030\003 \001(\013"
  "2\034.fs.mac_rrc.mbms_notif_cfg_t\022;\n\024mbsfn_"
  "area_info_list\030\004 \003(\0132\035.fs.mac_rrc.mbsfn_"
  "area_info_t\"\237\001\n\013sib2_mbms_t\022\030\n\020nof_mbsfn"
  "_sf_cfg\030\001 \001(\005\022!\n\031mbsfn_sf_cfg_list_prese"
  "nt\030\002 \001(\010\022\034\n\024max_nof_mbsfn_sf_cfg\030\003 \001(\r\0225"
  "\n\021mbsfn_sf_cfg_list\030\004 \003(\0132\032.fs.mac_rrc.m"
  "bsfn_sf_cfg_t\"\026\n\006buffer\022\014\n\004data\030\001 \003(\r*\217\001"
  "\n\017repeat_period_t\022\032\n\026repeat_period_nullt"
  "ype\020\000\022\026\n\022repeat_period_rf32\020\001\022\026\n\022repeat_"
  "period_rf64\020\002\022\027\n\023repeat_period_rf128\020\003\022\027"
  "\n\023repeat_period_rf256\020\004*;\n\014mod_period_t\022"
  "\024\n\020mod_period_rf512\020\000\022\025\n\021mod_period_rf10"
  "24\020\001*c\n\tsig_mcs_t\022\016\n\nsig_mcs_n2\020\000\022\016\n\nsig"
  "_mcs_n7\020\001\022\017\n\013sig_mcs_n13\020\002\022\017\n\013sig_mcs_n1"
  "9\020\003\022\024\n\020sig_mcs_nulltype\020\004*%\n\007coeff_t\022\014\n\010"
  "coeff_n2\020\000\022\014\n\010coeff_n4\020\001*M\n\014region_len_t"
  "\022\021\n\rregion_len_s1\020\000\022\021\n\rregion_len_s2\020\001\022\027"
  "\n\023region_len_nulltype\020\002*2\n\016plmn_id_type_"
  "t\022\014\n\010plmn_idx\020\000\022\022\n\016explicit_value\020\001*\217\002\n\022"
  "mch_sched_period_t\022\030\n\024mch_sched_period_r"
  "f8\020\000\022\031\n\025mch_sched_period_rf16\020\001\022\031\n\025mch_s"
  "ched_period_rf32\020\002\022\031\n\025mch_sched_period_r"
  "f64\020\003\022\032\n\026mch_sched_period_rf128\020\004\022\032\n\026mch"
  "_sched_period_rf256\020\005\022\032\n\026mch_sched_perio"
  "d_rf512\020\006\022\033\n\027mch_sched_period_rf1024\020\007\022\035"
  "\n\031mch_sched_period_nulltype\020\010*\253\001\n\016alloc_"
  "period_t\022\023\n\017alloc_period_n1\020\000\022\023\n\017alloc_p"
  "eriod_n2\020\001\022\023\n\017alloc_period_n4\020\002\022\023\n\017alloc"
  "_period_n8\020\003\022\024\n\020alloc_period_n16\020\004\022\024\n\020al"
  "loc_period_n32\020\005\022\031\n\025alloc_period_nulltyp"
  "e\020\006*i\n\017sf_alloc_type_t\022\033\n\027sf_alloc_type_"
  "one_frame\020\000\022\035\n\031sf_alloc_type_four_frames"
  "\020\001\022\032\n\026sf_alloc_type_nulltype\020\002*\246\002\n\030commo"
  "n_sf_alloc_period_t\022#\n\037common_sf_alloc_p"
  "eriod_nulltype\020\000\022\036\n\032common_sf_alloc_peri"
  "od_rf4\020\001\022\036\n\032common_sf_alloc_period_rf8\020\002"
  "\022\037\n\033common_sf_alloc_period_rf16\020\003\022\037\n\033com"
  "mon_sf_alloc_period_rf32\020\004\022\037\n\033common_sf_"
  "alloc_period_rf64\020\005\022 \n\034common_sf_alloc_p"
  "eriod_rf128\020\006\022 \n\034common_sf_alloc_period_"
  "rf256\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rrc_5fmcch_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rrc_5fmcch_5ft_2eproto_sccs[13] = {
  &scc_info_buffer_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_choice_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_mcch_msg_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_sib13_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_sib2_mbms_t_rrc_5fmcch_5ft_2eproto.base,
  &scc_info_tmgi_t_rrc_5fmcch_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rrc_5fmcch_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rrc_5fmcch_5ft_2eproto = {
  false, false, descriptor_table_protodef_rrc_5fmcch_5ft_2eproto, "rrc_mcch_t.proto", 3255,
  &descriptor_table_rrc_5fmcch_5ft_2eproto_once, descriptor_table_rrc_5fmcch_5ft_2eproto_sccs, descriptor_table_rrc_5fmcch_5ft_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_rrc_5fmcch_5ft_2eproto::offsets,
  file_level_metadata_rrc_5fmcch_5ft_2eproto, 13, file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto, file_level_service_descriptors_rrc_5fmcch_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rrc_5fmcch_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto)), true);
namespace fs {
namespace mac_rrc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* repeat_period_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[0];
}
bool repeat_period_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* mod_period_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[1];
}
bool mod_period_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* sig_mcs_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[2];
}
bool sig_mcs_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* coeff_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[3];
}
bool coeff_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* region_len_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[4];
}
bool region_len_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* plmn_id_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[5];
}
bool plmn_id_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* mch_sched_period_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[6];
}
bool mch_sched_period_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* alloc_period_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[7];
}
bool alloc_period_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* sf_alloc_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[8];
}
bool sf_alloc_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* common_sf_alloc_period_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rrc_5fmcch_5ft_2eproto);
  return file_level_enum_descriptors_rrc_5fmcch_5ft_2eproto[9];
}
bool common_sf_alloc_period_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void plmn_id_t::InitAsDefaultInstance() {
}
class plmn_id_t::_Internal {
 public:
};

plmn_id_t::plmn_id_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mcc_(arena),
  mnc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.plmn_id_t)
}
plmn_id_t::plmn_id_t(const plmn_id_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mcc_(from.mcc_),
      mnc_(from.mnc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nof_mnc_digits_ = from.nof_mnc_digits_;
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.plmn_id_t)
}

void plmn_id_t::SharedCtor() {
  nof_mnc_digits_ = 0u;
}

plmn_id_t::~plmn_id_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.plmn_id_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void plmn_id_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void plmn_id_t::ArenaDtor(void* object) {
  plmn_id_t* _this = reinterpret_cast< plmn_id_t* >(object);
  (void)_this;
}
void plmn_id_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void plmn_id_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const plmn_id_t& plmn_id_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_plmn_id_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void plmn_id_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.plmn_id_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcc_.Clear();
  mnc_.Clear();
  nof_mnc_digits_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* plmn_id_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nof_mnc_digits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nof_mnc_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mcc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_mcc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mnc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mnc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_mnc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* plmn_id_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.plmn_id_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nof_mnc_digits = 1;
  if (this->nof_mnc_digits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nof_mnc_digits(), target);
  }

  // repeated uint32 mcc = 2;
  {
    int byte_size = _mcc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_mcc(), byte_size, target);
    }
  }

  // repeated uint32 mnc = 3;
  {
    int byte_size = _mnc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_mnc(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.plmn_id_t)
  return target;
}

size_t plmn_id_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.plmn_id_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mcc = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mcc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mcc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 mnc = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mnc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mnc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 nof_mnc_digits = 1;
  if (this->nof_mnc_digits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_mnc_digits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void plmn_id_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.plmn_id_t)
  GOOGLE_DCHECK_NE(&from, this);
  const plmn_id_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<plmn_id_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.plmn_id_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.plmn_id_t)
    MergeFrom(*source);
  }
}

void plmn_id_t::MergeFrom(const plmn_id_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.plmn_id_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mcc_.MergeFrom(from.mcc_);
  mnc_.MergeFrom(from.mnc_);
  if (from.nof_mnc_digits() != 0) {
    _internal_set_nof_mnc_digits(from._internal_nof_mnc_digits());
  }
}

void plmn_id_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.plmn_id_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plmn_id_t::CopyFrom(const plmn_id_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.plmn_id_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plmn_id_t::IsInitialized() const {
  return true;
}

void plmn_id_t::InternalSwap(plmn_id_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mcc_.InternalSwap(&other->mcc_);
  mnc_.InternalSwap(&other->mnc_);
  swap(nof_mnc_digits_, other->nof_mnc_digits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata plmn_id_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void choice::InitAsDefaultInstance() {
  ::fs::mac_rrc::_choice_default_instance_._instance.get_mutable()->explicit_value_ = const_cast< ::fs::mac_rrc::plmn_id_t*>(
      ::fs::mac_rrc::plmn_id_t::internal_default_instance());
}
class choice::_Internal {
 public:
  static const ::fs::mac_rrc::plmn_id_t& explicit_value(const choice* msg);
};

const ::fs::mac_rrc::plmn_id_t&
choice::_Internal::explicit_value(const choice* msg) {
  return *msg->explicit_value_;
}
choice::choice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.choice)
}
choice::choice(const choice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_explicit_value()) {
    explicit_value_ = new ::fs::mac_rrc::plmn_id_t(*from.explicit_value_);
  } else {
    explicit_value_ = nullptr;
  }
  plmn_idx_ = from.plmn_idx_;
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.choice)
}

void choice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_choice_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&explicit_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plmn_idx_) -
      reinterpret_cast<char*>(&explicit_value_)) + sizeof(plmn_idx_));
}

choice::~choice() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.choice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void choice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete explicit_value_;
}

void choice::ArenaDtor(void* object) {
  choice* _this = reinterpret_cast< choice* >(object);
  (void)_this;
}
void choice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void choice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const choice& choice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_choice_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void choice::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.choice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && explicit_value_ != nullptr) {
    delete explicit_value_;
  }
  explicit_value_ = nullptr;
  plmn_idx_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* choice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 plmn_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          plmn_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.plmn_id_t explicit_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* choice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.choice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 plmn_idx = 1;
  if (this->plmn_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_plmn_idx(), target);
  }

  // .fs.mac_rrc.plmn_id_t explicit_value = 2;
  if (this->has_explicit_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::explicit_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.choice)
  return target;
}

size_t choice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.choice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.plmn_id_t explicit_value = 2;
  if (this->has_explicit_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *explicit_value_);
  }

  // uint32 plmn_idx = 1;
  if (this->plmn_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plmn_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void choice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.choice)
  GOOGLE_DCHECK_NE(&from, this);
  const choice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<choice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.choice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.choice)
    MergeFrom(*source);
  }
}

void choice::MergeFrom(const choice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.choice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_explicit_value()) {
    _internal_mutable_explicit_value()->::fs::mac_rrc::plmn_id_t::MergeFrom(from._internal_explicit_value());
  }
  if (from.plmn_idx() != 0) {
    _internal_set_plmn_idx(from._internal_plmn_idx());
  }
}

void choice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void choice::CopyFrom(const choice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool choice::IsInitialized() const {
  return true;
}

void choice::InternalSwap(choice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(choice, plmn_idx_)
      + sizeof(choice::plmn_idx_)
      - PROTOBUF_FIELD_OFFSET(choice, explicit_value_)>(
          reinterpret_cast<char*>(&explicit_value_),
          reinterpret_cast<char*>(&other->explicit_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata choice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tmgi_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_tmgi_t_default_instance_._instance.get_mutable()->plmn_id_ = const_cast< ::fs::mac_rrc::choice*>(
      ::fs::mac_rrc::choice::internal_default_instance());
}
class tmgi_t::_Internal {
 public:
  static const ::fs::mac_rrc::choice& plmn_id(const tmgi_t* msg);
};

const ::fs::mac_rrc::choice&
tmgi_t::_Internal::plmn_id(const tmgi_t* msg) {
  return *msg->plmn_id_;
}
tmgi_t::tmgi_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  serviced_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.tmgi_t)
}
tmgi_t::tmgi_t(const tmgi_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      serviced_id_(from.serviced_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plmn_id()) {
    plmn_id_ = new ::fs::mac_rrc::choice(*from.plmn_id_);
  } else {
    plmn_id_ = nullptr;
  }
  plmn_id_type_ = from.plmn_id_type_;
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.tmgi_t)
}

void tmgi_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tmgi_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&plmn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plmn_id_type_) -
      reinterpret_cast<char*>(&plmn_id_)) + sizeof(plmn_id_type_));
}

tmgi_t::~tmgi_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.tmgi_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tmgi_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plmn_id_;
}

void tmgi_t::ArenaDtor(void* object) {
  tmgi_t* _this = reinterpret_cast< tmgi_t* >(object);
  (void)_this;
}
void tmgi_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tmgi_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tmgi_t& tmgi_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tmgi_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void tmgi_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.tmgi_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviced_id_.Clear();
  if (GetArena() == nullptr && plmn_id_ != nullptr) {
    delete plmn_id_;
  }
  plmn_id_ = nullptr;
  plmn_id_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tmgi_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.choice plmn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plmn_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.plmn_id_type_t plmn_id_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plmn_id_type(static_cast<::fs::mac_rrc::plmn_id_type_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 serviced_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_serviced_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_serviced_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tmgi_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.tmgi_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.choice plmn_id = 1;
  if (this->has_plmn_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plmn_id(this), target, stream);
  }

  // .fs.mac_rrc.plmn_id_type_t plmn_id_type = 2;
  if (this->plmn_id_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_plmn_id_type(), target);
  }

  // repeated uint32 serviced_id = 3;
  {
    int byte_size = _serviced_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_serviced_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.tmgi_t)
  return target;
}

size_t tmgi_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.tmgi_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 serviced_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->serviced_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _serviced_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .fs.mac_rrc.choice plmn_id = 1;
  if (this->has_plmn_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plmn_id_);
  }

  // .fs.mac_rrc.plmn_id_type_t plmn_id_type = 2;
  if (this->plmn_id_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plmn_id_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tmgi_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.tmgi_t)
  GOOGLE_DCHECK_NE(&from, this);
  const tmgi_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tmgi_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.tmgi_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.tmgi_t)
    MergeFrom(*source);
  }
}

void tmgi_t::MergeFrom(const tmgi_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.tmgi_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serviced_id_.MergeFrom(from.serviced_id_);
  if (from.has_plmn_id()) {
    _internal_mutable_plmn_id()->::fs::mac_rrc::choice::MergeFrom(from._internal_plmn_id());
  }
  if (from.plmn_id_type() != 0) {
    _internal_set_plmn_id_type(from._internal_plmn_id_type());
  }
}

void tmgi_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.tmgi_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tmgi_t::CopyFrom(const tmgi_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.tmgi_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tmgi_t::IsInitialized() const {
  return true;
}

void tmgi_t::InternalSwap(tmgi_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serviced_id_.InternalSwap(&other->serviced_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tmgi_t, plmn_id_type_)
      + sizeof(tmgi_t::plmn_id_type_)
      - PROTOBUF_FIELD_OFFSET(tmgi_t, plmn_id_)>(
          reinterpret_cast<char*>(&plmn_id_),
          reinterpret_cast<char*>(&other->plmn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata tmgi_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mbms_session_info_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_mbms_session_info_t_default_instance_._instance.get_mutable()->tmgi_ = const_cast< ::fs::mac_rrc::tmgi_t*>(
      ::fs::mac_rrc::tmgi_t::internal_default_instance());
}
class mbms_session_info_t::_Internal {
 public:
  static const ::fs::mac_rrc::tmgi_t& tmgi(const mbms_session_info_t* msg);
};

const ::fs::mac_rrc::tmgi_t&
mbms_session_info_t::_Internal::tmgi(const mbms_session_info_t* msg) {
  return *msg->tmgi_;
}
mbms_session_info_t::mbms_session_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.mbms_session_info_t)
}
mbms_session_info_t::mbms_session_info_t(const mbms_session_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tmgi()) {
    tmgi_ = new ::fs::mac_rrc::tmgi_t(*from.tmgi_);
  } else {
    tmgi_ = nullptr;
  }
  ::memcpy(&lc_ch_id_, &from.lc_ch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_present_) -
    reinterpret_cast<char*>(&lc_ch_id_)) + sizeof(session_id_present_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.mbms_session_info_t)
}

void mbms_session_info_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&tmgi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_present_) -
      reinterpret_cast<char*>(&tmgi_)) + sizeof(session_id_present_));
}

mbms_session_info_t::~mbms_session_info_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.mbms_session_info_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mbms_session_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tmgi_;
}

void mbms_session_info_t::ArenaDtor(void* object) {
  mbms_session_info_t* _this = reinterpret_cast< mbms_session_info_t* >(object);
  (void)_this;
}
void mbms_session_info_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mbms_session_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mbms_session_info_t& mbms_session_info_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mbms_session_info_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void mbms_session_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.mbms_session_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tmgi_ != nullptr) {
    delete tmgi_;
  }
  tmgi_ = nullptr;
  ::memset(&lc_ch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_present_) -
      reinterpret_cast<char*>(&lc_ch_id_)) + sizeof(session_id_present_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mbms_session_info_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lc_ch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lc_ch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool session_id_present = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.tmgi_t tmgi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tmgi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mbms_session_info_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.mbms_session_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lc_ch_id = 1;
  if (this->lc_ch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lc_ch_id(), target);
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // bool session_id_present = 3;
  if (this->session_id_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_session_id_present(), target);
  }

  // .fs.mac_rrc.tmgi_t tmgi = 4;
  if (this->has_tmgi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tmgi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.mbms_session_info_t)
  return target;
}

size_t mbms_session_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.mbms_session_info_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.tmgi_t tmgi = 4;
  if (this->has_tmgi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tmgi_);
  }

  // uint32 lc_ch_id = 1;
  if (this->lc_ch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lc_ch_id());
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_session_id());
  }

  // bool session_id_present = 3;
  if (this->session_id_present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mbms_session_info_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.mbms_session_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mbms_session_info_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mbms_session_info_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.mbms_session_info_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.mbms_session_info_t)
    MergeFrom(*source);
  }
}

void mbms_session_info_t::MergeFrom(const mbms_session_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.mbms_session_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tmgi()) {
    _internal_mutable_tmgi()->::fs::mac_rrc::tmgi_t::MergeFrom(from._internal_tmgi());
  }
  if (from.lc_ch_id() != 0) {
    _internal_set_lc_ch_id(from._internal_lc_ch_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.session_id_present() != 0) {
    _internal_set_session_id_present(from._internal_session_id_present());
  }
}

void mbms_session_info_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.mbms_session_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mbms_session_info_t::CopyFrom(const mbms_session_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.mbms_session_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mbms_session_info_t::IsInitialized() const {
  return true;
}

void mbms_session_info_t::InternalSwap(mbms_session_info_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mbms_session_info_t, session_id_present_)
      + sizeof(mbms_session_info_t::session_id_present_)
      - PROTOBUF_FIELD_OFFSET(mbms_session_info_t, tmgi_)>(
          reinterpret_cast<char*>(&tmgi_),
          reinterpret_cast<char*>(&other->tmgi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mbms_session_info_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void pmch_info_t::InitAsDefaultInstance() {
}
class pmch_info_t::_Internal {
 public:
};

pmch_info_t::pmch_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mbms_session_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.pmch_info_t)
}
pmch_info_t::pmch_info_t(const pmch_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mbms_session_info_list_(from.mbms_session_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_mcs_, &from.data_mcs_,
    static_cast<size_t>(reinterpret_cast<char*>(&mch_sched_period_) -
    reinterpret_cast<char*>(&data_mcs_)) + sizeof(mch_sched_period_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.pmch_info_t)
}

void pmch_info_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&data_mcs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mch_sched_period_) -
      reinterpret_cast<char*>(&data_mcs_)) + sizeof(mch_sched_period_));
}

pmch_info_t::~pmch_info_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.pmch_info_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pmch_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pmch_info_t::ArenaDtor(void* object) {
  pmch_info_t* _this = reinterpret_cast< pmch_info_t* >(object);
  (void)_this;
}
void pmch_info_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pmch_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pmch_info_t& pmch_info_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pmch_info_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void pmch_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.pmch_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mbms_session_info_list_.Clear();
  ::memset(&data_mcs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mch_sched_period_) -
      reinterpret_cast<char*>(&data_mcs_)) + sizeof(mch_sched_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pmch_info_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 data_mcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_mcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sf_alloc_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sf_alloc_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_mbms_session_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nof_mbms_session_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_session_per_pmch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_session_per_pmch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.mch_sched_period_t mch_sched_period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mch_sched_period(static_cast<::fs::mac_rrc::mch_sched_period_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.mbms_session_info_t mbms_session_info_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mbms_session_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pmch_info_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.pmch_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_mcs = 1;
  if (this->data_mcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_mcs(), target);
  }

  // uint32 sf_alloc_end = 2;
  if (this->sf_alloc_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sf_alloc_end(), target);
  }

  // uint32 nof_mbms_session_info = 3;
  if (this->nof_mbms_session_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nof_mbms_session_info(), target);
  }

  // uint32 max_session_per_pmch = 4;
  if (this->max_session_per_pmch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_session_per_pmch(), target);
  }

  // .fs.mac_rrc.mch_sched_period_t mch_sched_period = 5;
  if (this->mch_sched_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mch_sched_period(), target);
  }

  // repeated .fs.mac_rrc.mbms_session_info_t mbms_session_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mbms_session_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_mbms_session_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.pmch_info_t)
  return target;
}

size_t pmch_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.pmch_info_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.mbms_session_info_t mbms_session_info_list = 6;
  total_size += 1UL * this->_internal_mbms_session_info_list_size();
  for (const auto& msg : this->mbms_session_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 data_mcs = 1;
  if (this->data_mcs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_mcs());
  }

  // uint32 sf_alloc_end = 2;
  if (this->sf_alloc_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sf_alloc_end());
  }

  // uint32 nof_mbms_session_info = 3;
  if (this->nof_mbms_session_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_mbms_session_info());
  }

  // uint32 max_session_per_pmch = 4;
  if (this->max_session_per_pmch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_session_per_pmch());
  }

  // .fs.mac_rrc.mch_sched_period_t mch_sched_period = 5;
  if (this->mch_sched_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mch_sched_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pmch_info_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.pmch_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  const pmch_info_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pmch_info_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.pmch_info_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.pmch_info_t)
    MergeFrom(*source);
  }
}

void pmch_info_t::MergeFrom(const pmch_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.pmch_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mbms_session_info_list_.MergeFrom(from.mbms_session_info_list_);
  if (from.data_mcs() != 0) {
    _internal_set_data_mcs(from._internal_data_mcs());
  }
  if (from.sf_alloc_end() != 0) {
    _internal_set_sf_alloc_end(from._internal_sf_alloc_end());
  }
  if (from.nof_mbms_session_info() != 0) {
    _internal_set_nof_mbms_session_info(from._internal_nof_mbms_session_info());
  }
  if (from.max_session_per_pmch() != 0) {
    _internal_set_max_session_per_pmch(from._internal_max_session_per_pmch());
  }
  if (from.mch_sched_period() != 0) {
    _internal_set_mch_sched_period(from._internal_mch_sched_period());
  }
}

void pmch_info_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.pmch_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pmch_info_t::CopyFrom(const pmch_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.pmch_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pmch_info_t::IsInitialized() const {
  return true;
}

void pmch_info_t::InternalSwap(pmch_info_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mbms_session_info_list_.InternalSwap(&other->mbms_session_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pmch_info_t, mch_sched_period_)
      + sizeof(pmch_info_t::mch_sched_period_)
      - PROTOBUF_FIELD_OFFSET(pmch_info_t, data_mcs_)>(
          reinterpret_cast<char*>(&data_mcs_),
          reinterpret_cast<char*>(&other->data_mcs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pmch_info_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mbsfn_sf_cfg_t::InitAsDefaultInstance() {
}
class mbsfn_sf_cfg_t::_Internal {
 public:
};

mbsfn_sf_cfg_t::mbsfn_sf_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.mbsfn_sf_cfg_t)
}
mbsfn_sf_cfg_t::mbsfn_sf_cfg_t(const mbsfn_sf_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sf_alloc_, &from.sf_alloc_,
    static_cast<size_t>(reinterpret_cast<char*>(&nof_alloc_subfrs_) -
    reinterpret_cast<char*>(&sf_alloc_)) + sizeof(nof_alloc_subfrs_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.mbsfn_sf_cfg_t)
}

void mbsfn_sf_cfg_t::SharedCtor() {
  ::memset(&sf_alloc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_alloc_subfrs_) -
      reinterpret_cast<char*>(&sf_alloc_)) + sizeof(nof_alloc_subfrs_));
}

mbsfn_sf_cfg_t::~mbsfn_sf_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.mbsfn_sf_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mbsfn_sf_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mbsfn_sf_cfg_t::ArenaDtor(void* object) {
  mbsfn_sf_cfg_t* _this = reinterpret_cast< mbsfn_sf_cfg_t* >(object);
  (void)_this;
}
void mbsfn_sf_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mbsfn_sf_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mbsfn_sf_cfg_t& mbsfn_sf_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mbsfn_sf_cfg_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void mbsfn_sf_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sf_alloc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_alloc_subfrs_) -
      reinterpret_cast<char*>(&sf_alloc_)) + sizeof(nof_alloc_subfrs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mbsfn_sf_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sf_alloc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sf_alloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 radioframe_alloc_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          radioframe_alloc_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.alloc_period_t radioframe_alloc_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_radioframe_alloc_period(static_cast<::fs::mac_rrc::alloc_period_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.sf_alloc_type_t nof_alloc_subfrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nof_alloc_subfrs(static_cast<::fs::mac_rrc::sf_alloc_type_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mbsfn_sf_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sf_alloc = 1;
  if (this->sf_alloc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sf_alloc(), target);
  }

  // uint32 radioframe_alloc_offset = 2;
  if (this->radioframe_alloc_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radioframe_alloc_offset(), target);
  }

  // .fs.mac_rrc.alloc_period_t radioframe_alloc_period = 3;
  if (this->radioframe_alloc_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_radioframe_alloc_period(), target);
  }

  // .fs.mac_rrc.sf_alloc_type_t nof_alloc_subfrs = 4;
  if (this->nof_alloc_subfrs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_nof_alloc_subfrs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.mbsfn_sf_cfg_t)
  return target;
}

size_t mbsfn_sf_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sf_alloc = 1;
  if (this->sf_alloc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sf_alloc());
  }

  // uint32 radioframe_alloc_offset = 2;
  if (this->radioframe_alloc_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radioframe_alloc_offset());
  }

  // .fs.mac_rrc.alloc_period_t radioframe_alloc_period = 3;
  if (this->radioframe_alloc_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_radioframe_alloc_period());
  }

  // .fs.mac_rrc.sf_alloc_type_t nof_alloc_subfrs = 4;
  if (this->nof_alloc_subfrs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nof_alloc_subfrs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mbsfn_sf_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mbsfn_sf_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mbsfn_sf_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.mbsfn_sf_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.mbsfn_sf_cfg_t)
    MergeFrom(*source);
  }
}

void mbsfn_sf_cfg_t::MergeFrom(const mbsfn_sf_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sf_alloc() != 0) {
    _internal_set_sf_alloc(from._internal_sf_alloc());
  }
  if (from.radioframe_alloc_offset() != 0) {
    _internal_set_radioframe_alloc_offset(from._internal_radioframe_alloc_offset());
  }
  if (from.radioframe_alloc_period() != 0) {
    _internal_set_radioframe_alloc_period(from._internal_radioframe_alloc_period());
  }
  if (from.nof_alloc_subfrs() != 0) {
    _internal_set_nof_alloc_subfrs(from._internal_nof_alloc_subfrs());
  }
}

void mbsfn_sf_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mbsfn_sf_cfg_t::CopyFrom(const mbsfn_sf_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.mbsfn_sf_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mbsfn_sf_cfg_t::IsInitialized() const {
  return true;
}

void mbsfn_sf_cfg_t::InternalSwap(mbsfn_sf_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mbsfn_sf_cfg_t, nof_alloc_subfrs_)
      + sizeof(mbsfn_sf_cfg_t::nof_alloc_subfrs_)
      - PROTOBUF_FIELD_OFFSET(mbsfn_sf_cfg_t, sf_alloc_)>(
          reinterpret_cast<char*>(&sf_alloc_),
          reinterpret_cast<char*>(&other->sf_alloc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mbsfn_sf_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mcch_msg_t::InitAsDefaultInstance() {
}
class mcch_msg_t::_Internal {
 public:
};

mcch_msg_t::mcch_msg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  common_sf_alloc_(arena),
  pmch_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.mcch_msg_t)
}
mcch_msg_t::mcch_msg_t(const mcch_msg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      common_sf_alloc_(from.common_sf_alloc_),
      pmch_info_list_(from.pmch_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nof_pmch_info_, &from.nof_pmch_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&common_sf_alloc_period_) -
    reinterpret_cast<char*>(&nof_pmch_info_)) + sizeof(common_sf_alloc_period_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.mcch_msg_t)
}

void mcch_msg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mcch_msg_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&nof_pmch_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&common_sf_alloc_period_) -
      reinterpret_cast<char*>(&nof_pmch_info_)) + sizeof(common_sf_alloc_period_));
}

mcch_msg_t::~mcch_msg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.mcch_msg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mcch_msg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mcch_msg_t::ArenaDtor(void* object) {
  mcch_msg_t* _this = reinterpret_cast< mcch_msg_t* >(object);
  (void)_this;
}
void mcch_msg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mcch_msg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mcch_msg_t& mcch_msg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mcch_msg_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void mcch_msg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.mcch_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  common_sf_alloc_.Clear();
  pmch_info_list_.Clear();
  ::memset(&nof_pmch_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&common_sf_alloc_period_) -
      reinterpret_cast<char*>(&nof_pmch_info_)) + sizeof(common_sf_alloc_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mcch_msg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nof_pmch_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nof_pmch_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_common_sf_alloc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nof_common_sf_alloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.common_sf_alloc_period_t common_sf_alloc_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_common_sf_alloc_period(static_cast<::fs::mac_rrc::common_sf_alloc_period_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.mbsfn_sf_cfg_t common_sf_alloc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_common_sf_alloc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.pmch_info_t pmch_info_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pmch_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mcch_msg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.mcch_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nof_pmch_info = 1;
  if (this->nof_pmch_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nof_pmch_info(), target);
  }

  // uint32 nof_common_sf_alloc = 2;
  if (this->nof_common_sf_alloc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nof_common_sf_alloc(), target);
  }

  // .fs.mac_rrc.common_sf_alloc_period_t common_sf_alloc_period = 3;
  if (this->common_sf_alloc_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_common_sf_alloc_period(), target);
  }

  // repeated .fs.mac_rrc.mbsfn_sf_cfg_t common_sf_alloc = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_common_sf_alloc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_common_sf_alloc(i), target, stream);
  }

  // repeated .fs.mac_rrc.pmch_info_t pmch_info_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pmch_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pmch_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.mcch_msg_t)
  return target;
}

size_t mcch_msg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.mcch_msg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.mbsfn_sf_cfg_t common_sf_alloc = 4;
  total_size += 1UL * this->_internal_common_sf_alloc_size();
  for (const auto& msg : this->common_sf_alloc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_rrc.pmch_info_t pmch_info_list = 5;
  total_size += 1UL * this->_internal_pmch_info_list_size();
  for (const auto& msg : this->pmch_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 nof_pmch_info = 1;
  if (this->nof_pmch_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_pmch_info());
  }

  // uint32 nof_common_sf_alloc = 2;
  if (this->nof_common_sf_alloc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_common_sf_alloc());
  }

  // .fs.mac_rrc.common_sf_alloc_period_t common_sf_alloc_period = 3;
  if (this->common_sf_alloc_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_common_sf_alloc_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mcch_msg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.mcch_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mcch_msg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mcch_msg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.mcch_msg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.mcch_msg_t)
    MergeFrom(*source);
  }
}

void mcch_msg_t::MergeFrom(const mcch_msg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.mcch_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  common_sf_alloc_.MergeFrom(from.common_sf_alloc_);
  pmch_info_list_.MergeFrom(from.pmch_info_list_);
  if (from.nof_pmch_info() != 0) {
    _internal_set_nof_pmch_info(from._internal_nof_pmch_info());
  }
  if (from.nof_common_sf_alloc() != 0) {
    _internal_set_nof_common_sf_alloc(from._internal_nof_common_sf_alloc());
  }
  if (from.common_sf_alloc_period() != 0) {
    _internal_set_common_sf_alloc_period(from._internal_common_sf_alloc_period());
  }
}

void mcch_msg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.mcch_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcch_msg_t::CopyFrom(const mcch_msg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.mcch_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcch_msg_t::IsInitialized() const {
  return true;
}

void mcch_msg_t::InternalSwap(mcch_msg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  common_sf_alloc_.InternalSwap(&other->common_sf_alloc_);
  pmch_info_list_.InternalSwap(&other->pmch_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mcch_msg_t, common_sf_alloc_period_)
      + sizeof(mcch_msg_t::common_sf_alloc_period_)
      - PROTOBUF_FIELD_OFFSET(mcch_msg_t, nof_pmch_info_)>(
          reinterpret_cast<char*>(&nof_pmch_info_),
          reinterpret_cast<char*>(&other->nof_pmch_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mcch_msg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mbms_notif_cfg_t::InitAsDefaultInstance() {
}
class mbms_notif_cfg_t::_Internal {
 public:
};

mbms_notif_cfg_t::mbms_notif_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.mbms_notif_cfg_t)
}
mbms_notif_cfg_t::mbms_notif_cfg_t(const mbms_notif_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&notif_offset_, &from.notif_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&notif_repeat_coeff_) -
    reinterpret_cast<char*>(&notif_offset_)) + sizeof(notif_repeat_coeff_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.mbms_notif_cfg_t)
}

void mbms_notif_cfg_t::SharedCtor() {
  ::memset(&notif_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notif_repeat_coeff_) -
      reinterpret_cast<char*>(&notif_offset_)) + sizeof(notif_repeat_coeff_));
}

mbms_notif_cfg_t::~mbms_notif_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.mbms_notif_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mbms_notif_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mbms_notif_cfg_t::ArenaDtor(void* object) {
  mbms_notif_cfg_t* _this = reinterpret_cast< mbms_notif_cfg_t* >(object);
  (void)_this;
}
void mbms_notif_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mbms_notif_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mbms_notif_cfg_t& mbms_notif_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mbms_notif_cfg_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void mbms_notif_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.mbms_notif_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&notif_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notif_repeat_coeff_) -
      reinterpret_cast<char*>(&notif_offset_)) + sizeof(notif_repeat_coeff_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mbms_notif_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 notif_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          notif_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 notif_sf_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          notif_sf_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.coeff_t notif_repeat_coeff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notif_repeat_coeff(static_cast<::fs::mac_rrc::coeff_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mbms_notif_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.mbms_notif_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 notif_offset = 1;
  if (this->notif_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_notif_offset(), target);
  }

  // uint32 notif_sf_idx = 2;
  if (this->notif_sf_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_notif_sf_idx(), target);
  }

  // .fs.mac_rrc.coeff_t notif_repeat_coeff = 3;
  if (this->notif_repeat_coeff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notif_repeat_coeff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.mbms_notif_cfg_t)
  return target;
}

size_t mbms_notif_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.mbms_notif_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 notif_offset = 1;
  if (this->notif_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notif_offset());
  }

  // uint32 notif_sf_idx = 2;
  if (this->notif_sf_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notif_sf_idx());
  }

  // .fs.mac_rrc.coeff_t notif_repeat_coeff = 3;
  if (this->notif_repeat_coeff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notif_repeat_coeff());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mbms_notif_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.mbms_notif_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mbms_notif_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mbms_notif_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.mbms_notif_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.mbms_notif_cfg_t)
    MergeFrom(*source);
  }
}

void mbms_notif_cfg_t::MergeFrom(const mbms_notif_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.mbms_notif_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notif_offset() != 0) {
    _internal_set_notif_offset(from._internal_notif_offset());
  }
  if (from.notif_sf_idx() != 0) {
    _internal_set_notif_sf_idx(from._internal_notif_sf_idx());
  }
  if (from.notif_repeat_coeff() != 0) {
    _internal_set_notif_repeat_coeff(from._internal_notif_repeat_coeff());
  }
}

void mbms_notif_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.mbms_notif_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mbms_notif_cfg_t::CopyFrom(const mbms_notif_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.mbms_notif_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mbms_notif_cfg_t::IsInitialized() const {
  return true;
}

void mbms_notif_cfg_t::InternalSwap(mbms_notif_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mbms_notif_cfg_t, notif_repeat_coeff_)
      + sizeof(mbms_notif_cfg_t::notif_repeat_coeff_)
      - PROTOBUF_FIELD_OFFSET(mbms_notif_cfg_t, notif_offset_)>(
          reinterpret_cast<char*>(&notif_offset_),
          reinterpret_cast<char*>(&other->notif_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mbms_notif_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mcch_cfg_t::InitAsDefaultInstance() {
}
class mcch_cfg_t::_Internal {
 public:
};

mcch_cfg_t::mcch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.mcch_cfg_t)
}
mcch_cfg_t::mcch_cfg_t(const mcch_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sf_alloc_info_, &from.sf_alloc_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcch_repeat_period_) -
    reinterpret_cast<char*>(&sf_alloc_info_)) + sizeof(mcch_repeat_period_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.mcch_cfg_t)
}

void mcch_cfg_t::SharedCtor() {
  ::memset(&sf_alloc_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcch_repeat_period_) -
      reinterpret_cast<char*>(&sf_alloc_info_)) + sizeof(mcch_repeat_period_));
}

mcch_cfg_t::~mcch_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.mcch_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mcch_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mcch_cfg_t::ArenaDtor(void* object) {
  mcch_cfg_t* _this = reinterpret_cast< mcch_cfg_t* >(object);
  (void)_this;
}
void mcch_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mcch_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mcch_cfg_t& mcch_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mcch_cfg_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void mcch_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.mcch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sf_alloc_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcch_repeat_period_) -
      reinterpret_cast<char*>(&sf_alloc_info_)) + sizeof(mcch_repeat_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mcch_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sf_alloc_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sf_alloc_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mcch_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mcch_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.sig_mcs_t sig_mcs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sig_mcs(static_cast<::fs::mac_rrc::sig_mcs_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.mod_period_t mcch_mod_period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mcch_mod_period(static_cast<::fs::mac_rrc::mod_period_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.repeat_period_t mcch_repeat_period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mcch_repeat_period(static_cast<::fs::mac_rrc::repeat_period_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mcch_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.mcch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sf_alloc_info = 1;
  if (this->sf_alloc_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sf_alloc_info(), target);
  }

  // uint32 mcch_offset = 2;
  if (this->mcch_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mcch_offset(), target);
  }

  // .fs.mac_rrc.sig_mcs_t sig_mcs = 3;
  if (this->sig_mcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sig_mcs(), target);
  }

  // .fs.mac_rrc.mod_period_t mcch_mod_period = 4;
  if (this->mcch_mod_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_mcch_mod_period(), target);
  }

  // .fs.mac_rrc.repeat_period_t mcch_repeat_period = 5;
  if (this->mcch_repeat_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mcch_repeat_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.mcch_cfg_t)
  return target;
}

size_t mcch_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.mcch_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sf_alloc_info = 1;
  if (this->sf_alloc_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sf_alloc_info());
  }

  // uint32 mcch_offset = 2;
  if (this->mcch_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mcch_offset());
  }

  // .fs.mac_rrc.sig_mcs_t sig_mcs = 3;
  if (this->sig_mcs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sig_mcs());
  }

  // .fs.mac_rrc.mod_period_t mcch_mod_period = 4;
  if (this->mcch_mod_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mcch_mod_period());
  }

  // .fs.mac_rrc.repeat_period_t mcch_repeat_period = 5;
  if (this->mcch_repeat_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mcch_repeat_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mcch_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.mcch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mcch_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mcch_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.mcch_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.mcch_cfg_t)
    MergeFrom(*source);
  }
}

void mcch_cfg_t::MergeFrom(const mcch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.mcch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sf_alloc_info() != 0) {
    _internal_set_sf_alloc_info(from._internal_sf_alloc_info());
  }
  if (from.mcch_offset() != 0) {
    _internal_set_mcch_offset(from._internal_mcch_offset());
  }
  if (from.sig_mcs() != 0) {
    _internal_set_sig_mcs(from._internal_sig_mcs());
  }
  if (from.mcch_mod_period() != 0) {
    _internal_set_mcch_mod_period(from._internal_mcch_mod_period());
  }
  if (from.mcch_repeat_period() != 0) {
    _internal_set_mcch_repeat_period(from._internal_mcch_repeat_period());
  }
}

void mcch_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.mcch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcch_cfg_t::CopyFrom(const mcch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.mcch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcch_cfg_t::IsInitialized() const {
  return true;
}

void mcch_cfg_t::InternalSwap(mcch_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mcch_cfg_t, mcch_repeat_period_)
      + sizeof(mcch_cfg_t::mcch_repeat_period_)
      - PROTOBUF_FIELD_OFFSET(mcch_cfg_t, sf_alloc_info_)>(
          reinterpret_cast<char*>(&sf_alloc_info_),
          reinterpret_cast<char*>(&other->sf_alloc_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mcch_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mbsfn_area_info_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_mbsfn_area_info_t_default_instance_._instance.get_mutable()->mcch_cfg_ = const_cast< ::fs::mac_rrc::mcch_cfg_t*>(
      ::fs::mac_rrc::mcch_cfg_t::internal_default_instance());
}
class mbsfn_area_info_t::_Internal {
 public:
  static const ::fs::mac_rrc::mcch_cfg_t& mcch_cfg(const mbsfn_area_info_t* msg);
};

const ::fs::mac_rrc::mcch_cfg_t&
mbsfn_area_info_t::_Internal::mcch_cfg(const mbsfn_area_info_t* msg) {
  return *msg->mcch_cfg_;
}
mbsfn_area_info_t::mbsfn_area_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.mbsfn_area_info_t)
}
mbsfn_area_info_t::mbsfn_area_info_t(const mbsfn_area_info_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mcch_cfg()) {
    mcch_cfg_ = new ::fs::mac_rrc::mcch_cfg_t(*from.mcch_cfg_);
  } else {
    mcch_cfg_ = nullptr;
  }
  ::memcpy(&mbsfn_area_id_, &from.mbsfn_area_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&non_mbsfn_region_len_) -
    reinterpret_cast<char*>(&mbsfn_area_id_)) + sizeof(non_mbsfn_region_len_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.mbsfn_area_info_t)
}

void mbsfn_area_info_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&mcch_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&non_mbsfn_region_len_) -
      reinterpret_cast<char*>(&mcch_cfg_)) + sizeof(non_mbsfn_region_len_));
}

mbsfn_area_info_t::~mbsfn_area_info_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.mbsfn_area_info_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mbsfn_area_info_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mcch_cfg_;
}

void mbsfn_area_info_t::ArenaDtor(void* object) {
  mbsfn_area_info_t* _this = reinterpret_cast< mbsfn_area_info_t* >(object);
  (void)_this;
}
void mbsfn_area_info_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mbsfn_area_info_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mbsfn_area_info_t& mbsfn_area_info_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mbsfn_area_info_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void mbsfn_area_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.mbsfn_area_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mcch_cfg_ != nullptr) {
    delete mcch_cfg_;
  }
  mcch_cfg_ = nullptr;
  ::memset(&mbsfn_area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&non_mbsfn_region_len_) -
      reinterpret_cast<char*>(&mbsfn_area_id_)) + sizeof(non_mbsfn_region_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mbsfn_area_info_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mbsfn_area_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mbsfn_area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 notif_ind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          notif_ind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.mcch_cfg_t mcch_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mcch_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.region_len_t non_mbsfn_region_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_non_mbsfn_region_len(static_cast<::fs::mac_rrc::region_len_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mbsfn_area_info_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.mbsfn_area_info_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mbsfn_area_id = 1;
  if (this->mbsfn_area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mbsfn_area_id(), target);
  }

  // uint32 notif_ind = 2;
  if (this->notif_ind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_notif_ind(), target);
  }

  // .fs.mac_rrc.mcch_cfg_t mcch_cfg = 3;
  if (this->has_mcch_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mcch_cfg(this), target, stream);
  }

  // .fs.mac_rrc.region_len_t non_mbsfn_region_len = 4;
  if (this->non_mbsfn_region_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_non_mbsfn_region_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.mbsfn_area_info_t)
  return target;
}

size_t mbsfn_area_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.mbsfn_area_info_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.mcch_cfg_t mcch_cfg = 3;
  if (this->has_mcch_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mcch_cfg_);
  }

  // uint32 mbsfn_area_id = 1;
  if (this->mbsfn_area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mbsfn_area_id());
  }

  // uint32 notif_ind = 2;
  if (this->notif_ind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notif_ind());
  }

  // .fs.mac_rrc.region_len_t non_mbsfn_region_len = 4;
  if (this->non_mbsfn_region_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_non_mbsfn_region_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mbsfn_area_info_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.mbsfn_area_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mbsfn_area_info_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mbsfn_area_info_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.mbsfn_area_info_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.mbsfn_area_info_t)
    MergeFrom(*source);
  }
}

void mbsfn_area_info_t::MergeFrom(const mbsfn_area_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.mbsfn_area_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mcch_cfg()) {
    _internal_mutable_mcch_cfg()->::fs::mac_rrc::mcch_cfg_t::MergeFrom(from._internal_mcch_cfg());
  }
  if (from.mbsfn_area_id() != 0) {
    _internal_set_mbsfn_area_id(from._internal_mbsfn_area_id());
  }
  if (from.notif_ind() != 0) {
    _internal_set_notif_ind(from._internal_notif_ind());
  }
  if (from.non_mbsfn_region_len() != 0) {
    _internal_set_non_mbsfn_region_len(from._internal_non_mbsfn_region_len());
  }
}

void mbsfn_area_info_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.mbsfn_area_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mbsfn_area_info_t::CopyFrom(const mbsfn_area_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.mbsfn_area_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mbsfn_area_info_t::IsInitialized() const {
  return true;
}

void mbsfn_area_info_t::InternalSwap(mbsfn_area_info_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mbsfn_area_info_t, non_mbsfn_region_len_)
      + sizeof(mbsfn_area_info_t::non_mbsfn_region_len_)
      - PROTOBUF_FIELD_OFFSET(mbsfn_area_info_t, mcch_cfg_)>(
          reinterpret_cast<char*>(&mcch_cfg_),
          reinterpret_cast<char*>(&other->mcch_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mbsfn_area_info_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sib13_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_sib13_t_default_instance_._instance.get_mutable()->notif_cfg_ = const_cast< ::fs::mac_rrc::mbms_notif_cfg_t*>(
      ::fs::mac_rrc::mbms_notif_cfg_t::internal_default_instance());
}
class sib13_t::_Internal {
 public:
  static const ::fs::mac_rrc::mbms_notif_cfg_t& notif_cfg(const sib13_t* msg);
};

const ::fs::mac_rrc::mbms_notif_cfg_t&
sib13_t::_Internal::notif_cfg(const sib13_t* msg) {
  return *msg->notif_cfg_;
}
sib13_t::sib13_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mbsfn_area_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.sib13_t)
}
sib13_t::sib13_t(const sib13_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mbsfn_area_info_list_(from.mbsfn_area_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notif_cfg()) {
    notif_cfg_ = new ::fs::mac_rrc::mbms_notif_cfg_t(*from.notif_cfg_);
  } else {
    notif_cfg_ = nullptr;
  }
  ::memcpy(&max_mbsfn_area_, &from.max_mbsfn_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&nof_mbsfn_area_info_) -
    reinterpret_cast<char*>(&max_mbsfn_area_)) + sizeof(nof_mbsfn_area_info_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.sib13_t)
}

void sib13_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sib13_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&notif_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_mbsfn_area_info_) -
      reinterpret_cast<char*>(&notif_cfg_)) + sizeof(nof_mbsfn_area_info_));
}

sib13_t::~sib13_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.sib13_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sib13_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete notif_cfg_;
}

void sib13_t::ArenaDtor(void* object) {
  sib13_t* _this = reinterpret_cast< sib13_t* >(object);
  (void)_this;
}
void sib13_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sib13_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sib13_t& sib13_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sib13_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void sib13_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.sib13_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mbsfn_area_info_list_.Clear();
  if (GetArena() == nullptr && notif_cfg_ != nullptr) {
    delete notif_cfg_;
  }
  notif_cfg_ = nullptr;
  ::memset(&max_mbsfn_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_mbsfn_area_info_) -
      reinterpret_cast<char*>(&max_mbsfn_area_)) + sizeof(nof_mbsfn_area_info_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sib13_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_mbsfn_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_mbsfn_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_mbsfn_area_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nof_mbsfn_area_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.mbms_notif_cfg_t notif_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_notif_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.mbsfn_area_info_t mbsfn_area_info_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mbsfn_area_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sib13_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.sib13_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_mbsfn_area = 1;
  if (this->max_mbsfn_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_mbsfn_area(), target);
  }

  // uint32 nof_mbsfn_area_info = 2;
  if (this->nof_mbsfn_area_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nof_mbsfn_area_info(), target);
  }

  // .fs.mac_rrc.mbms_notif_cfg_t notif_cfg = 3;
  if (this->has_notif_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::notif_cfg(this), target, stream);
  }

  // repeated .fs.mac_rrc.mbsfn_area_info_t mbsfn_area_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mbsfn_area_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mbsfn_area_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.sib13_t)
  return target;
}

size_t sib13_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.sib13_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.mbsfn_area_info_t mbsfn_area_info_list = 4;
  total_size += 1UL * this->_internal_mbsfn_area_info_list_size();
  for (const auto& msg : this->mbsfn_area_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.mac_rrc.mbms_notif_cfg_t notif_cfg = 3;
  if (this->has_notif_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notif_cfg_);
  }

  // uint32 max_mbsfn_area = 1;
  if (this->max_mbsfn_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_mbsfn_area());
  }

  // uint32 nof_mbsfn_area_info = 2;
  if (this->nof_mbsfn_area_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_mbsfn_area_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sib13_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.sib13_t)
  GOOGLE_DCHECK_NE(&from, this);
  const sib13_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sib13_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.sib13_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.sib13_t)
    MergeFrom(*source);
  }
}

void sib13_t::MergeFrom(const sib13_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.sib13_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mbsfn_area_info_list_.MergeFrom(from.mbsfn_area_info_list_);
  if (from.has_notif_cfg()) {
    _internal_mutable_notif_cfg()->::fs::mac_rrc::mbms_notif_cfg_t::MergeFrom(from._internal_notif_cfg());
  }
  if (from.max_mbsfn_area() != 0) {
    _internal_set_max_mbsfn_area(from._internal_max_mbsfn_area());
  }
  if (from.nof_mbsfn_area_info() != 0) {
    _internal_set_nof_mbsfn_area_info(from._internal_nof_mbsfn_area_info());
  }
}

void sib13_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.sib13_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sib13_t::CopyFrom(const sib13_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.sib13_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sib13_t::IsInitialized() const {
  return true;
}

void sib13_t::InternalSwap(sib13_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mbsfn_area_info_list_.InternalSwap(&other->mbsfn_area_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sib13_t, nof_mbsfn_area_info_)
      + sizeof(sib13_t::nof_mbsfn_area_info_)
      - PROTOBUF_FIELD_OFFSET(sib13_t, notif_cfg_)>(
          reinterpret_cast<char*>(&notif_cfg_),
          reinterpret_cast<char*>(&other->notif_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sib13_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sib2_mbms_t::InitAsDefaultInstance() {
}
class sib2_mbms_t::_Internal {
 public:
};

sib2_mbms_t::sib2_mbms_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mbsfn_sf_cfg_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.sib2_mbms_t)
}
sib2_mbms_t::sib2_mbms_t(const sib2_mbms_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mbsfn_sf_cfg_list_(from.mbsfn_sf_cfg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nof_mbsfn_sf_cfg_, &from.nof_mbsfn_sf_cfg_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_nof_mbsfn_sf_cfg_) -
    reinterpret_cast<char*>(&nof_mbsfn_sf_cfg_)) + sizeof(max_nof_mbsfn_sf_cfg_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.sib2_mbms_t)
}

void sib2_mbms_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sib2_mbms_t_rrc_5fmcch_5ft_2eproto.base);
  ::memset(&nof_mbsfn_sf_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_nof_mbsfn_sf_cfg_) -
      reinterpret_cast<char*>(&nof_mbsfn_sf_cfg_)) + sizeof(max_nof_mbsfn_sf_cfg_));
}

sib2_mbms_t::~sib2_mbms_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.sib2_mbms_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sib2_mbms_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sib2_mbms_t::ArenaDtor(void* object) {
  sib2_mbms_t* _this = reinterpret_cast< sib2_mbms_t* >(object);
  (void)_this;
}
void sib2_mbms_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sib2_mbms_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sib2_mbms_t& sib2_mbms_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sib2_mbms_t_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void sib2_mbms_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.sib2_mbms_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mbsfn_sf_cfg_list_.Clear();
  ::memset(&nof_mbsfn_sf_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_nof_mbsfn_sf_cfg_) -
      reinterpret_cast<char*>(&nof_mbsfn_sf_cfg_)) + sizeof(max_nof_mbsfn_sf_cfg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sib2_mbms_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nof_mbsfn_sf_cfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nof_mbsfn_sf_cfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mbsfn_sf_cfg_list_present = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mbsfn_sf_cfg_list_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_nof_mbsfn_sf_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_nof_mbsfn_sf_cfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.mbsfn_sf_cfg_t mbsfn_sf_cfg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mbsfn_sf_cfg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sib2_mbms_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.sib2_mbms_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nof_mbsfn_sf_cfg = 1;
  if (this->nof_mbsfn_sf_cfg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nof_mbsfn_sf_cfg(), target);
  }

  // bool mbsfn_sf_cfg_list_present = 2;
  if (this->mbsfn_sf_cfg_list_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mbsfn_sf_cfg_list_present(), target);
  }

  // uint32 max_nof_mbsfn_sf_cfg = 3;
  if (this->max_nof_mbsfn_sf_cfg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_nof_mbsfn_sf_cfg(), target);
  }

  // repeated .fs.mac_rrc.mbsfn_sf_cfg_t mbsfn_sf_cfg_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mbsfn_sf_cfg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mbsfn_sf_cfg_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.sib2_mbms_t)
  return target;
}

size_t sib2_mbms_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.sib2_mbms_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.mbsfn_sf_cfg_t mbsfn_sf_cfg_list = 4;
  total_size += 1UL * this->_internal_mbsfn_sf_cfg_list_size();
  for (const auto& msg : this->mbsfn_sf_cfg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 nof_mbsfn_sf_cfg = 1;
  if (this->nof_mbsfn_sf_cfg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nof_mbsfn_sf_cfg());
  }

  // bool mbsfn_sf_cfg_list_present = 2;
  if (this->mbsfn_sf_cfg_list_present() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_nof_mbsfn_sf_cfg = 3;
  if (this->max_nof_mbsfn_sf_cfg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_nof_mbsfn_sf_cfg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sib2_mbms_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.sib2_mbms_t)
  GOOGLE_DCHECK_NE(&from, this);
  const sib2_mbms_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sib2_mbms_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.sib2_mbms_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.sib2_mbms_t)
    MergeFrom(*source);
  }
}

void sib2_mbms_t::MergeFrom(const sib2_mbms_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.sib2_mbms_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mbsfn_sf_cfg_list_.MergeFrom(from.mbsfn_sf_cfg_list_);
  if (from.nof_mbsfn_sf_cfg() != 0) {
    _internal_set_nof_mbsfn_sf_cfg(from._internal_nof_mbsfn_sf_cfg());
  }
  if (from.mbsfn_sf_cfg_list_present() != 0) {
    _internal_set_mbsfn_sf_cfg_list_present(from._internal_mbsfn_sf_cfg_list_present());
  }
  if (from.max_nof_mbsfn_sf_cfg() != 0) {
    _internal_set_max_nof_mbsfn_sf_cfg(from._internal_max_nof_mbsfn_sf_cfg());
  }
}

void sib2_mbms_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.sib2_mbms_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sib2_mbms_t::CopyFrom(const sib2_mbms_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.sib2_mbms_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sib2_mbms_t::IsInitialized() const {
  return true;
}

void sib2_mbms_t::InternalSwap(sib2_mbms_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mbsfn_sf_cfg_list_.InternalSwap(&other->mbsfn_sf_cfg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sib2_mbms_t, max_nof_mbsfn_sf_cfg_)
      + sizeof(sib2_mbms_t::max_nof_mbsfn_sf_cfg_)
      - PROTOBUF_FIELD_OFFSET(sib2_mbms_t, nof_mbsfn_sf_cfg_)>(
          reinterpret_cast<char*>(&nof_mbsfn_sf_cfg_),
          reinterpret_cast<char*>(&other->nof_mbsfn_sf_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sib2_mbms_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void buffer::InitAsDefaultInstance() {
}
class buffer::_Internal {
 public:
};

buffer::buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.buffer)
}
buffer::buffer(const buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.buffer)
}

void buffer::SharedCtor() {
}

buffer::~buffer() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.buffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void buffer::ArenaDtor(void* object) {
  buffer* _this = reinterpret_cast< buffer* >(object);
  (void)_this;
}
void buffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void buffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const buffer& buffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_buffer_rrc_5fmcch_5ft_2eproto.base);
  return *internal_default_instance();
}


void buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* buffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* buffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.buffer)
  return target;
}

size_t buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.buffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void buffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.buffer)
  GOOGLE_DCHECK_NE(&from, this);
  const buffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<buffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.buffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.buffer)
    MergeFrom(*source);
  }
}

void buffer::MergeFrom(const buffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.buffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void buffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer::CopyFrom(const buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer::IsInitialized() const {
  return true;
}

void buffer::InternalSwap(buffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata buffer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mac_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::plmn_id_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::plmn_id_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::plmn_id_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::choice* Arena::CreateMaybeMessage< ::fs::mac_rrc::choice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::choice >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::tmgi_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::tmgi_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::tmgi_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::mbms_session_info_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::mbms_session_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::mbms_session_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::pmch_info_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::pmch_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::pmch_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::mbsfn_sf_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::mbsfn_sf_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::mbsfn_sf_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::mcch_msg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::mcch_msg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::mcch_msg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::mbms_notif_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::mbms_notif_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::mbms_notif_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::mcch_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::mcch_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::mcch_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::mbsfn_area_info_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::mbsfn_area_info_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::mbsfn_area_info_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::sib13_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::sib13_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::sib13_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::sib2_mbms_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::sib2_mbms_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::sib2_mbms_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::buffer* Arena::CreateMaybeMessage< ::fs::mac_rrc::buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::buffer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
