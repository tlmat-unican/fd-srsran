// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ue_cfg_t.proto

#include "srsenb/hdr/funsplit_proto/ue_cfg_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ue_5fcfg_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto;
namespace fs {
namespace mac_rrc {
class ant_info_ded_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ant_info_ded_t> _instance;
} _ant_info_ded_t_default_instance_;
class ue_bearer_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ue_bearer_cfg_t> _instance;
} _ue_bearer_cfg_t_default_instance_;
class srsran_cqi_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_cqi_cfg_t> _instance;
} _srsran_cqi_cfg_t_default_instance_;
class srsran_uci_cfg_ack_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_uci_cfg_ack_t> _instance;
} _srsran_uci_cfg_ack_t_default_instance_;
class srsran_uci_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_uci_cfg_t> _instance;
} _srsran_uci_cfg_t_default_instance_;
class srsran_pucch_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_pucch_cfg_t> _instance;
} _srsran_pucch_cfg_t_default_instance_;
class srsran_uci_offset_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_uci_offset_cfg_t> _instance;
} _srsran_uci_offset_cfg_t_default_instance_;
class srsran_dci_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_dci_cfg_t> _instance;
} _srsran_dci_cfg_t_default_instance_;
class srsran_ra_tb_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_ra_tb_t> _instance;
} _srsran_ra_tb_t_default_instance_;
class srsran_pdsch_grant_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_pdsch_grant_t> _instance;
} _srsran_pdsch_grant_t_default_instance_;
class srsran_cqi_report_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_cqi_report_cfg_t> _instance;
} _srsran_cqi_report_cfg_t_default_instance_;
class srsran_softbuffer_rx_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_softbuffer_rx_t> _instance;
} _srsran_softbuffer_rx_t_default_instance_;
class srsran_softbuffer_tx_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_softbuffer_tx_t> _instance;
} _srsran_softbuffer_tx_t_default_instance_;
class srsran_pdsch_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_pdsch_cfg_t> _instance;
} _srsran_pdsch_cfg_t_default_instance_;
class srsran_dl_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_dl_cfg_t> _instance;
} _srsran_dl_cfg_t_default_instance_;
class cc_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cc_cfg_t> _instance;
} _cc_cfg_t_default_instance_;
class ue_cfg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ue_cfg_t> _instance;
} _ue_cfg_t_default_instance_;
}  // namespace mac_rrc
}  // namespace fs
static void InitDefaultsscc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_ant_info_ded_t_default_instance_;
    new (ptr) ::fs::mac_rrc::ant_info_ded_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::ant_info_ded_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_cc_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::cc_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::cc_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_cqi_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_cqi_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_cqi_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_cqi_report_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_cqi_report_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_cqi_report_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_dci_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_dci_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_dci_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_dl_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_dl_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_dl_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_pdsch_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_pdsch_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_pdsch_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_pdsch_grant_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_pdsch_grant_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_pdsch_grant_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_pucch_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_pucch_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_pucch_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_ra_tb_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_ra_tb_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_ra_tb_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_softbuffer_rx_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_softbuffer_rx_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_softbuffer_rx_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_softbuffer_tx_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_softbuffer_tx_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_softbuffer_tx_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_uci_cfg_ack_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_uci_cfg_ack_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_uci_cfg_ack_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_uci_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_uci_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_uci_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto.base,}};

static void InitDefaultsscc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_srsran_uci_offset_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::srsran_uci_offset_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::srsran_uci_offset_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_ue_bearer_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::ue_bearer_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::ue_bearer_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto}, {}};

static void InitDefaultsscc_info_ue_cfg_t_ue_5fcfg_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_rrc::_ue_cfg_t_default_instance_;
    new (ptr) ::fs::mac_rrc::ue_cfg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_rrc::ue_cfg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ue_cfg_t_ue_5fcfg_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ue_cfg_t_ue_5fcfg_5ft_2eproto}, {
      &scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto.base,
      &scc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ue_5fcfg_5ft_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ue_5fcfg_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ue_5fcfg_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ant_info_ded_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ant_info_ded_t, tx_mode_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ant_info_ded_t, cookbook_subset_type_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ant_info_ded_t, codebook_subset_restrict_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ant_info_ded_t, ue_tx_ant_sel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_bearer_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_bearer_cfg_t, priority_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_bearer_cfg_t, bsd_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_bearer_cfg_t, pbr_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_bearer_cfg_t, group_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_bearer_cfg_t, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, data_enable_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, pmi_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, four_antenna_ports_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, rank_is_not_one_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, subband_label_2_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, scell_index_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, l_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, n_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, type_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_cfg_t, ri_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, pending_tb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, nof_acks_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, ncce_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, n_bundle_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, tdd_ack_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, tdd_ack_m_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, tdd_is_multiplex_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, tpc_for_pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_ack_t, grant_cc_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_t, ack_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_t, cqi_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_cfg_t, is_scheduling_request_tti_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, rnti_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, uci_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, delta_pucch_shift_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_rb_2_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_cs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_pucch_v_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, group_hopping_en_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, i_sr_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, sr_configured_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_pucch_1_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_pucch_2_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_pucch_sr_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, simul_cqi_ack_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, tdd_ack_multiplex_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, sps_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, ack_nack_feedback_mode_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n1_pucch_an_cs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n3_pucch_an_list_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, threshold_format1_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, threshold_data_valid_format1a_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, threshold_data_valid_format2_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, threshold_data_valid_format3_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, threshold_dmrs_detection_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, meas_ta_en_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, format_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, n_pucch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pucch_cfg_t, pucch2_drs_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_offset_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_offset_cfg_t, i_offset_cqi_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_offset_cfg_t, i_offset_ri_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_uci_offset_cfg_t, i_offset_ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, multiple_csi_request_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, cif_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, cif_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, srs_request_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, ra_format_enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dci_cfg_t, is_not_ue_ss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, mod_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, tbs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, rv_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, nof_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, cw_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, enabled_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_ra_tb_t, mcs_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, tx_scheme_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, pmi_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, nof_prb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, nof_re_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, nof_tb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, nof_layers_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, prb_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, nof_symb_slot_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, last_tbs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_grant_t, tb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, periodic_configured_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, aperiodic_configured_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, pmi_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, ri_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, ri_idx_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, format_is_subband_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, subband_size_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, periodic_mode_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_cqi_report_cfg_t, aperiodic_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, max_cb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, max_cb_size_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, tb_crc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, buffer_f_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, data_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_rx_t, cb_crc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_tx_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_tx_t, max_cb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_tx_t, max_cb_size_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_softbuffer_tx_t, buffer_b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, grant_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, rnti_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, max_nof_iterations_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, decoder_type_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, p_a_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, p_b_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, rs_power_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, power_scale_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, csi_enable_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, use_tbs_index_alt_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, tx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, rx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, meas_evm_en_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, meas_time_en_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_pdsch_cfg_t, meas_time_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dl_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dl_cfg_t, cqi_report_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dl_cfg_t, pdsch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dl_cfg_t, dci_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dl_cfg_t, tm_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::srsran_dl_cfg_t, dci_common_ss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cc_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cc_cfg_t, active_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cc_cfg_t, enb_cc_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cc_cfg_t, dl_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::cc_cfg_t, aperiodic_cqi_period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, maxharq_tx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, continuous_pusch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, uci_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, pucch_cfg_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, ue_bearers_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, supported_cc_list_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, dl_ant_info_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, use_tbs_index_alt_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, measgap_period_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, measgap_offset_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_rrc::ue_cfg_t, support_ul64qam_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::mac_rrc::ant_info_ded_t)},
  { 9, -1, sizeof(::fs::mac_rrc::ue_bearer_cfg_t)},
  { 19, -1, sizeof(::fs::mac_rrc::srsran_cqi_cfg_t)},
  { 34, -1, sizeof(::fs::mac_rrc::srsran_uci_cfg_ack_t)},
  { 48, -1, sizeof(::fs::mac_rrc::srsran_uci_cfg_t)},
  { 56, -1, sizeof(::fs::mac_rrc::srsran_pucch_cfg_t)},
  { 88, -1, sizeof(::fs::mac_rrc::srsran_uci_offset_cfg_t)},
  { 96, -1, sizeof(::fs::mac_rrc::srsran_dci_cfg_t)},
  { 107, -1, sizeof(::fs::mac_rrc::srsran_ra_tb_t)},
  { 119, -1, sizeof(::fs::mac_rrc::srsran_pdsch_grant_t)},
  { 134, -1, sizeof(::fs::mac_rrc::srsran_cqi_report_cfg_t)},
  { 148, -1, sizeof(::fs::mac_rrc::srsran_softbuffer_rx_t)},
  { 159, -1, sizeof(::fs::mac_rrc::srsran_softbuffer_tx_t)},
  { 167, -1, sizeof(::fs::mac_rrc::srsran_pdsch_cfg_t)},
  { 187, -1, sizeof(::fs::mac_rrc::srsran_dl_cfg_t)},
  { 197, -1, sizeof(::fs::mac_rrc::cc_cfg_t)},
  { 206, -1, sizeof(::fs::mac_rrc::ue_cfg_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_ant_info_ded_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_ue_bearer_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_cqi_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_uci_cfg_ack_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_uci_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_pucch_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_uci_offset_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_dci_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_ra_tb_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_pdsch_grant_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_cqi_report_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_softbuffer_rx_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_softbuffer_tx_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_pdsch_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_srsran_dl_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_cc_cfg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_rrc::_ue_cfg_t_default_instance_),
};

const char descriptor_table_protodef_ue_5fcfg_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ue_cfg_t.proto\022\nfs.mac_rrc\"\304\001\n\016ant_inf"
  "o_ded_t\022&\n\007tx_mode\030\001 \001(\0162\025.fs.mac_rrc.TX"
  "_MODE_T\0224\n\024cookbook_subset_type\030\002 \001(\0162\026."
  "fs.mac_rrc.CODEBOOK_T\022 \n\030codebook_subset"
  "_restrict\030\003 \001(\004\0222\n\rue_tx_ant_sel\030\004 \001(\0162\033"
  ".fs.mac_rrc.UE_TX_ANT_SEL_T\"x\n\017ue_bearer"
  "_cfg_t\022\020\n\010priority\030\001 \001(\005\022\013\n\003bsd\030\002 \001(\r\022\013\n"
  "\003pbr\030\003 \001(\r\022\r\n\005group\030\004 \001(\005\022*\n\tdirection\030\005"
  " \001(\0162\027.fs.mac_rrc.DIRECTION_T\"\367\001\n\020srsran"
  "_cqi_cfg_t\022\023\n\013data_enable\030\001 \001(\010\022\023\n\013pmi_p"
  "resent\030\002 \001(\010\022\032\n\022four_antenna_ports\030\003 \001(\010"
  "\022\027\n\017rank_is_not_one\030\004 \001(\010\022\034\n\024subband_lab"
  "el_2_bits\030\005 \001(\010\022\023\n\013scell_index\030\006 \001(\r\022\t\n\001"
  "L\030\007 \001(\r\022\t\n\001N\030\010 \001(\r\022+\n\004type\030\t \001(\0162\035.fs.ma"
  "c_rrc.srsran_cqi_type_t\022\016\n\006ri_len\030\n \001(\r\""
  "\307\001\n\024srsran_uci_cfg_ack_t\022\022\n\npending_tb\030\001"
  " \003(\010\022\020\n\010nof_acks\030\002 \001(\r\022\014\n\004ncce\030\003 \003(\r\022\020\n\010"
  "N_bundle\030\004 \001(\r\022\017\n\007tdd_ack\030\005 \001(\r\022\021\n\ttdd_a"
  "ck_m\030\006 \001(\r\022\030\n\020tdd_is_multiplex\030\007 \001(\010\022\025\n\r"
  "tpc_for_pucch\030\010 \001(\r\022\024\n\014grant_cc_idx\030\t \001("
  "\r\"\217\001\n\020srsran_uci_cfg_t\022-\n\003ack\030\001 \003(\0132 .fs"
  ".mac_rrc.srsran_uci_cfg_ack_t\022)\n\003cqi\030\002 \001"
  "(\0132\034.fs.mac_rrc.srsran_cqi_cfg_t\022!\n\031is_s"
  "cheduling_request_tti\030\003 \001(\010\"\375\005\n\022srsran_p"
  "ucch_cfg_t\022\014\n\004rnti\030\001 \001(\r\022-\n\007uci_cfg\030\002 \001("
  "\0132\034.fs.mac_rrc.srsran_uci_cfg_t\022\031\n\021delta"
  "_pucch_shift\030\003 \001(\r\022\016\n\006n_rb_2\030\004 \001(\r\022\014\n\004N_"
  "cs\030\005 \001(\r\022\021\n\tN_pucch_v\030\006 \001(\r\022\030\n\020group_hop"
  "ping_en\030\007 \001(\010\022\014\n\004I_sr\030\010 \001(\r\022\025\n\rsr_config"
  "ured\030\t \001(\010\022\021\n\tn_pucch_1\030\n \003(\r\022\021\n\tn_pucch"
  "_2\030\013 \001(\r\022\022\n\nn_pucch_sr\030\014 \001(\r\022\025\n\rsimul_cq"
  "i_ack\030\r \001(\010\022\031\n\021tdd_ack_multiplex\030\016 \001(\010\022\023"
  "\n\013sps_enabled\030\017 \001(\010\022K\n\026ack_nack_feedback"
  "_mode\030\020 \001(\0162+.fs.mac_rrc.srsran_ack_nack"
  "_feedback_mode_t\022\026\n\016n1_pucch_an_cs\030\021 \003(\r"
  "\022\030\n\020n3_pucch_an_list\030\022 \003(\r\022\031\n\021threshold_"
  "format1\030\023 \001(\002\022%\n\035threshold_data_valid_fo"
  "rmat1a\030\024 \001(\002\022$\n\034threshold_data_valid_for"
  "mat2\030\025 \001(\002\022$\n\034threshold_data_valid_forma"
  "t3\030\026 \001(\002\022 \n\030threshold_dmrs_detection\030\027 \001"
  "(\002\022\022\n\nmeas_ta_en\030\030 \001(\010\0221\n\006format\030\031 \001(\0162!"
  ".fs.mac_rrc.srsran_pucch_format_t\022\017\n\007n_p"
  "ucch\030\032 \001(\r\022\027\n\017pucch2_drs_bits\030\033 \003(\r\"Z\n\027s"
  "rsran_uci_offset_cfg_t\022\024\n\014I_offset_cqi\030\001"
  " \001(\r\022\023\n\013I_offset_ri\030\002 \001(\r\022\024\n\014I_offset_ac"
  "k\030\003 \001(\r\"\260\001\n\020srsran_dci_cfg_t\022$\n\034multiple"
  "_csi_request_enabled\030\001 \001(\010\022\023\n\013cif_enable"
  "d\030\002 \001(\010\022\023\n\013cif_present\030\003 \001(\010\022\033\n\023srs_requ"
  "est_enabled\030\004 \001(\010\022\031\n\021ra_format_enabled\030\005"
  " \001(\010\022\024\n\014is_not_ue_ss\030\006 \001(\010\"\224\001\n\016srsran_ra"
  "_tb_t\022%\n\003mod\030\001 \001(\0162\030.fs.mac_rrc.srsran_m"
  "od_t\022\013\n\003tbs\030\002 \001(\005\022\n\n\002rv\030\003 \001(\005\022\020\n\010nof_bit"
  "s\030\004 \001(\r\022\016\n\006cw_idx\030\005 \001(\r\022\017\n\007enabled\030\006 \001(\010"
  "\022\017\n\007mcs_idx\030\007 \001(\r\"\375\001\n\024srsran_pdsch_grant"
  "_t\0221\n\ttx_scheme\030\001 \001(\0162\036.fs.mac_rrc.srsra"
  "n_tx_scheme_t\022\013\n\003pmi\030\002 \001(\r\022\017\n\007nof_prb\030\004 "
  "\001(\r\022\016\n\006nof_re\030\005 \001(\r\022\016\n\006nof_tb\030\t \001(\r\022\022\n\nn"
  "of_layers\030\n \001(\r\022\017\n\007prb_idx\030\003 \003(\010\022\025\n\rnof_"
  "symb_slot\030\006 \003(\r\022\020\n\010last_tbs\030\010 \003(\005\022&\n\002tb\030"
  "\007 \003(\0132\032.fs.mac_rrc.srsran_ra_tb_t\"\271\002\n\027sr"
  "sran_cqi_report_cfg_t\022\033\n\023periodic_config"
  "ured\030\001 \001(\010\022\034\n\024aperiodic_configured\030\002 \001(\010"
  "\022\017\n\007pmi_idx\030\003 \001(\r\022\016\n\006ri_idx\030\004 \001(\r\022\026\n\016ri_"
  "idx_present\030\005 \001(\010\022\031\n\021format_is_subband\030\006"
  " \001(\010\022\024\n\014subband_size\030\007 \001(\r\022;\n\rperiodic_m"
  "ode\030\010 \001(\0162$.fs.mac_rrc.srsran_cqi_report"
  "_mode_t\022<\n\016aperiodic_mode\030\t \001(\0162$.fs.mac"
  "_rrc.srsran_cqi_report_mode_t\"}\n\026srsran_"
  "softbuffer_rx_t\022\016\n\006max_cb\030\001 \001(\r\022\023\n\013max_c"
  "b_size\030\002 \001(\r\022\016\n\006tb_crc\030\006 \001(\010\022\020\n\010buffer_f"
  "\030\003 \003(\005\022\014\n\004data\030\004 \003(\r\022\016\n\006cb_crc\030\005 \003(\010\"O\n\026"
  "srsran_softbuffer_tx_t\022\016\n\006max_cb\030\001 \001(\r\022\023"
  "\n\013max_cb_size\030\002 \001(\r\022\020\n\010buffer_b\030\003 \003(\r\"\274\003"
  "\n\022srsran_pdsch_cfg_t\022/\n\005grant\030\001 \001(\0132 .fs"
  ".mac_rrc.srsran_pdsch_grant_t\022\014\n\004rnti\030\002 "
  "\001(\r\022\032\n\022max_nof_iterations\030\003 \001(\r\0227\n\014decod"
  "er_type\030\004 \001(\0162!.fs.mac_rrc.srsran_mimo_d"
  "ecoder_t\022\013\n\003p_a\030\005 \001(\002\022\013\n\003p_b\030\006 \001(\r\022\020\n\010rs"
  "_power\030\007 \001(\002\022\023\n\013power_scale\030\010 \001(\010\022\022\n\ncsi"
  "_enable\030\t \001(\010\022\031\n\021use_tbs_index_alt\030\n \001(\010"
  "\022.\n\002tx\030\013 \003(\0132\".fs.mac_rrc.srsran_softbuf"
  "fer_tx_t\022.\n\002rx\030\014 \003(\0132\".fs.mac_rrc.srsran"
  "_softbuffer_rx_t\022\023\n\013meas_evm_en\030\r \001(\010\022\024\n"
  "\014meas_time_en\030\016 \001(\010\022\027\n\017meas_time_value\030\017"
  " \001(\r\"\340\001\n\017srsran_dl_cfg_t\0227\n\ncqi_report\030\001"
  " \001(\0132#.fs.mac_rrc.srsran_cqi_report_cfg_"
  "t\022-\n\005pdsch\030\002 \001(\0132\036.fs.mac_rrc.srsran_pds"
  "ch_cfg_t\022)\n\003dci\030\003 \001(\0132\034.fs.mac_rrc.srsra"
  "n_dci_cfg_t\022#\n\002tm\030\004 \001(\0162\027.fs.mac_rrc.srs"
  "ran_tm_t\022\025\n\rdci_common_ss\030\005 \001(\010\"y\n\010cc_cf"
  "g_t\022\016\n\006active\030\001 \001(\010\022\022\n\nenb_cc_idx\030\002 \001(\r\022"
  "+\n\006dl_cfg\030\003 \001(\0132\033.fs.mac_rrc.srsran_dl_c"
  "fg_t\022\034\n\024aperiodic_cqi_period\030\004 \001(\r\"\264\003\n\010u"
  "e_cfg_t\022\022\n\nmaxharq_tx\030\001 \001(\r\022\030\n\020continuou"
  "s_pusch\030\002 \001(\010\0227\n\nuci_offset\030\003 \001(\0132#.fs.m"
  "ac_rrc.srsran_uci_offset_cfg_t\0221\n\tpucch_"
  "cfg\030\004 \001(\0132\036.fs.mac_rrc.srsran_pucch_cfg_"
  "t\022/\n\nue_bearers\030\005 \003(\0132\033.fs.mac_rrc.ue_be"
  "arer_cfg_t\022/\n\021supported_cc_list\030\006 \003(\0132\024."
  "fs.mac_rrc.cc_cfg_t\022/\n\013dl_ant_info\030\007 \001(\013"
  "2\032.fs.mac_rrc.ant_info_ded_t\022\031\n\021use_tbs_"
  "index_alt\030\010 \001(\010\022\026\n\016measgap_period\030\t \001(\r\022"
  "\026\n\016measgap_offset\030\n \001(\r\0220\n\017support_ul64q"
  "am\030\013 \001(\0162\027.fs.mac_rrc.UL64QAM_CAP*a\n\013DIR"
  "ECTION_T\022\024\n\020DIRECTION_T_IDLE\020\000\022\022\n\016DIRECT"
  "ION_T_UL\020\001\022\022\n\016DIRECTION_T_DL\020\002\022\024\n\020DIRECT"
  "ION_T_BOTH\020\003*\367\001\n\025srsran_pucch_format_t\022\031"
  "\n\025SRSRAN_PUCCH_FORMAT_1\020\000\022\032\n\026SRSRAN_PUCC"
  "H_FORMAT_1A\020\001\022\032\n\026SRSRAN_PUCCH_FORMAT_1B\020"
  "\002\022\031\n\025SRSRAN_PUCCH_FORMAT_2\020\003\022\032\n\026SRSRAN_P"
  "UCCH_FORMAT_2A\020\004\022\032\n\026SRSRAN_PUCCH_FORMAT_"
  "2B\020\005\022\031\n\025SRSRAN_PUCCH_FORMAT_3\020\006\022\035\n\031SRSRA"
  "N_PUCCH_FORMAT_ERROR\020\007*\334\001\n\037srsran_ack_na"
  "ck_feedback_mode_t\022.\n*SRSRAN_PUCCH_ACK_N"
  "ACK_FEEDBACK_MODE_NORMAL\020\000\022*\n&SRSRAN_PUC"
  "CH_ACK_NACK_FEEDBACK_MODE_CS\020\001\022.\n*SRSRAN"
  "_PUCCH_ACK_NACK_FEEDBACK_MODE_PUCCH3\020\002\022-"
  "\n)SRSRAN_PUCCH_ACK_NACK_FEEDBACK_MODE_ER"
  "ROR\020\003*\216\001\n\021srsran_cqi_type_t\022\034\n\030SRSRAN_CQ"
  "I_TYPE_WIDEBAND\020\000\022\033\n\027SRSRAN_CQI_TYPE_SUB"
  "BAND\020\001\022\036\n\032SRSRAN_CQI_TYPE_SUBBAND_UE\020\002\022\036"
  "\n\032SRSRAN_CQI_TYPE_SUBBAND_HL\020\003*\237\001\n\013srsra"
  "n_tm_t\022\016\n\nSRSRAN_TM1\020\000\022\016\n\nSRSRAN_TM2\020\001\022\016"
  "\n\nSRSRAN_TM3\020\002\022\016\n\nSRSRAN_TM4\020\003\022\016\n\nSRSRAN"
  "_TM5\020\004\022\016\n\nSRSRAN_TM6\020\005\022\016\n\nSRSRAN_TM7\020\006\022\016"
  "\n\nSRSRAN_TM8\020\007\022\020\n\014SRSRAN_TMINV\020\010*Q\n\025srsr"
  "an_mimo_decoder_t\022\032\n\026SRSRAN_MIMO_DECODER"
  "_ZF\020\000\022\034\n\030SRSRAN_MIMO_DECODER_MMSE\020\001*\222\001\n\014"
  "srsran_mod_t\022\023\n\017SRSRAN_MOD_BPSK\020\000\022\023\n\017SRS"
  "RAN_MOD_QPSK\020\001\022\024\n\020SRSRAN_MOD_16QAM\020\002\022\024\n\020"
  "SRSRAN_MOD_64QAM\020\003\022\025\n\021SRSRAN_MOD_256QAM\020"
  "\004\022\025\n\021SRSRAN_MOD_NITEMS\020\005*\207\001\n\022srsran_tx_s"
  "cheme_t\022\031\n\025SRSRAN_TXSCHEME_PORT0\020\000\022\035\n\031SR"
  "SRAN_TXSCHEME_DIVERSITY\020\001\022\036\n\032SRSRAN_TXSC"
  "HEME_SPATIALMUX\020\002\022\027\n\023SRSRAN_TXSCHEME_CDD"
  "\020\003*\362\001\n\030srsran_cqi_report_mode_t\022\026\n\022SRSRA"
  "N_CQI_MODE_10\020\000\022\026\n\022SRSRAN_CQI_MODE_11\020\001\022"
  "\026\n\022SRSRAN_CQI_MODE_12\020\002\022\026\n\022SRSRAN_CQI_MO"
  "DE_20\020\003\022\026\n\022SRSRAN_CQI_MODE_21\020\004\022\026\n\022SRSRA"
  "N_CQI_MODE_22\020\005\022\026\n\022SRSRAN_CQI_MODE_30\020\006\022"
  "\026\n\022SRSRAN_CQI_MODE_31\020\007\022\026\n\022SRSRAN_CQI_MO"
  "DE_NA\020\010*[\n\013UL64QAM_CAP\022\031\n\025UL64QAM_CAP_UN"
  "DEFINED\020\000\022\030\n\024UL64QAM_CAP_DISABLED\020\001\022\027\n\023U"
  "L64QAM_CAP_ENABLED\020\002*p\n\tTX_MODE_T\022\007\n\003TM1"
  "\020\000\022\007\n\003TM2\020\001\022\007\n\003TM3\020\002\022\007\n\003TM4\020\003\022\007\n\003TM5\020\004\022\007"
  "\n\003TM6\020\005\022\007\n\003TM7\020\006\022\014\n\010TM8_V920\020\007\022\026\n\022TX_MOD"
  "E_T_NULLTYPE\020\010*\271\001\n\nCODEBOOK_T\022\021\n\rN2_TX_A"
  "NT_TM3\020\000\022\021\n\rN4_TX_ANT_TM3\020\001\022\021\n\rN2_TX_ANT"
  "_TM4\020\002\022\021\n\rN4_TX_ANT_TM4\020\003\022\021\n\rN2_TX_ANT_T"
  "M5\020\004\022\021\n\rN4_TX_ANT_TM5\020\005\022\021\n\rN2_TX_ANT_TM6"
  "\020\006\022\021\n\rN4_TX_ANT_TM6\020\007\022\023\n\017CODEBOOK_T_NONE"
  "\020\010*n\n\017UE_TX_ANT_SEL_T\022\033\n\027UE_TX_ANT_SEL_T"
  "_RELEASE\020\000\022\037\n\033UE_TX_ANT_SEL_T_CLOSED_LOO"
  "P\020\001\022\035\n\031UE_TX_ANT_SEL_T_OPEN_LOOP\020\002b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ue_5fcfg_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ue_5fcfg_5ft_2eproto_sccs[17] = {
  &scc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto.base,
  &scc_info_ue_cfg_t_ue_5fcfg_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ue_5fcfg_5ft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ue_5fcfg_5ft_2eproto = {
  false, false, descriptor_table_protodef_ue_5fcfg_5ft_2eproto, "ue_cfg_t.proto", 6162,
  &descriptor_table_ue_5fcfg_5ft_2eproto_once, descriptor_table_ue_5fcfg_5ft_2eproto_sccs, descriptor_table_ue_5fcfg_5ft_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_ue_5fcfg_5ft_2eproto::offsets,
  file_level_metadata_ue_5fcfg_5ft_2eproto, 17, file_level_enum_descriptors_ue_5fcfg_5ft_2eproto, file_level_service_descriptors_ue_5fcfg_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ue_5fcfg_5ft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto)), true);
namespace fs {
namespace mac_rrc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DIRECTION_T_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[0];
}
bool DIRECTION_T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_pucch_format_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[1];
}
bool srsran_pucch_format_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_ack_nack_feedback_mode_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[2];
}
bool srsran_ack_nack_feedback_mode_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_cqi_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[3];
}
bool srsran_cqi_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_tm_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[4];
}
bool srsran_tm_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_mimo_decoder_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[5];
}
bool srsran_mimo_decoder_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_mod_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[6];
}
bool srsran_mod_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_tx_scheme_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[7];
}
bool srsran_tx_scheme_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* srsran_cqi_report_mode_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[8];
}
bool srsran_cqi_report_mode_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UL64QAM_CAP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[9];
}
bool UL64QAM_CAP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TX_MODE_T_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[10];
}
bool TX_MODE_T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CODEBOOK_T_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[11];
}
bool CODEBOOK_T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UE_TX_ANT_SEL_T_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ue_5fcfg_5ft_2eproto);
  return file_level_enum_descriptors_ue_5fcfg_5ft_2eproto[12];
}
bool UE_TX_ANT_SEL_T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ant_info_ded_t::InitAsDefaultInstance() {
}
class ant_info_ded_t::_Internal {
 public:
};

ant_info_ded_t::ant_info_ded_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.ant_info_ded_t)
}
ant_info_ded_t::ant_info_ded_t(const ant_info_ded_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_mode_, &from.tx_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&ue_tx_ant_sel_) -
    reinterpret_cast<char*>(&tx_mode_)) + sizeof(ue_tx_ant_sel_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.ant_info_ded_t)
}

void ant_info_ded_t::SharedCtor() {
  ::memset(&tx_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_tx_ant_sel_) -
      reinterpret_cast<char*>(&tx_mode_)) + sizeof(ue_tx_ant_sel_));
}

ant_info_ded_t::~ant_info_ded_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.ant_info_ded_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ant_info_ded_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ant_info_ded_t::ArenaDtor(void* object) {
  ant_info_ded_t* _this = reinterpret_cast< ant_info_ded_t* >(object);
  (void)_this;
}
void ant_info_ded_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ant_info_ded_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ant_info_ded_t& ant_info_ded_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ant_info_ded_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void ant_info_ded_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.ant_info_ded_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_tx_ant_sel_) -
      reinterpret_cast<char*>(&tx_mode_)) + sizeof(ue_tx_ant_sel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ant_info_ded_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.TX_MODE_T tx_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tx_mode(static_cast<::fs::mac_rrc::TX_MODE_T>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.CODEBOOK_T cookbook_subset_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cookbook_subset_type(static_cast<::fs::mac_rrc::CODEBOOK_T>(val));
        } else goto handle_unusual;
        continue;
      // uint64 codebook_subset_restrict = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          codebook_subset_restrict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.UE_TX_ANT_SEL_T ue_tx_ant_sel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ue_tx_ant_sel(static_cast<::fs::mac_rrc::UE_TX_ANT_SEL_T>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ant_info_ded_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.ant_info_ded_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.TX_MODE_T tx_mode = 1;
  if (this->tx_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tx_mode(), target);
  }

  // .fs.mac_rrc.CODEBOOK_T cookbook_subset_type = 2;
  if (this->cookbook_subset_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cookbook_subset_type(), target);
  }

  // uint64 codebook_subset_restrict = 3;
  if (this->codebook_subset_restrict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_codebook_subset_restrict(), target);
  }

  // .fs.mac_rrc.UE_TX_ANT_SEL_T ue_tx_ant_sel = 4;
  if (this->ue_tx_ant_sel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ue_tx_ant_sel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.ant_info_ded_t)
  return target;
}

size_t ant_info_ded_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.ant_info_ded_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.TX_MODE_T tx_mode = 1;
  if (this->tx_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tx_mode());
  }

  // .fs.mac_rrc.CODEBOOK_T cookbook_subset_type = 2;
  if (this->cookbook_subset_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cookbook_subset_type());
  }

  // uint64 codebook_subset_restrict = 3;
  if (this->codebook_subset_restrict() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_codebook_subset_restrict());
  }

  // .fs.mac_rrc.UE_TX_ANT_SEL_T ue_tx_ant_sel = 4;
  if (this->ue_tx_ant_sel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ue_tx_ant_sel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ant_info_ded_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.ant_info_ded_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ant_info_ded_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ant_info_ded_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.ant_info_ded_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.ant_info_ded_t)
    MergeFrom(*source);
  }
}

void ant_info_ded_t::MergeFrom(const ant_info_ded_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.ant_info_ded_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_mode() != 0) {
    _internal_set_tx_mode(from._internal_tx_mode());
  }
  if (from.cookbook_subset_type() != 0) {
    _internal_set_cookbook_subset_type(from._internal_cookbook_subset_type());
  }
  if (from.codebook_subset_restrict() != 0) {
    _internal_set_codebook_subset_restrict(from._internal_codebook_subset_restrict());
  }
  if (from.ue_tx_ant_sel() != 0) {
    _internal_set_ue_tx_ant_sel(from._internal_ue_tx_ant_sel());
  }
}

void ant_info_ded_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.ant_info_ded_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ant_info_ded_t::CopyFrom(const ant_info_ded_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.ant_info_ded_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ant_info_ded_t::IsInitialized() const {
  return true;
}

void ant_info_ded_t::InternalSwap(ant_info_ded_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ant_info_ded_t, ue_tx_ant_sel_)
      + sizeof(ant_info_ded_t::ue_tx_ant_sel_)
      - PROTOBUF_FIELD_OFFSET(ant_info_ded_t, tx_mode_)>(
          reinterpret_cast<char*>(&tx_mode_),
          reinterpret_cast<char*>(&other->tx_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ant_info_ded_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ue_bearer_cfg_t::InitAsDefaultInstance() {
}
class ue_bearer_cfg_t::_Internal {
 public:
};

ue_bearer_cfg_t::ue_bearer_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.ue_bearer_cfg_t)
}
ue_bearer_cfg_t::ue_bearer_cfg_t(const ue_bearer_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.ue_bearer_cfg_t)
}

void ue_bearer_cfg_t::SharedCtor() {
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(direction_));
}

ue_bearer_cfg_t::~ue_bearer_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.ue_bearer_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ue_bearer_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ue_bearer_cfg_t::ArenaDtor(void* object) {
  ue_bearer_cfg_t* _this = reinterpret_cast< ue_bearer_cfg_t* >(object);
  (void)_this;
}
void ue_bearer_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ue_bearer_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ue_bearer_cfg_t& ue_bearer_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ue_bearer_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void ue_bearer_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.ue_bearer_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ue_bearer_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bsd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bsd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pbr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pbr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.DIRECTION_T direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::fs::mac_rrc::DIRECTION_T>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ue_bearer_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.ue_bearer_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 priority = 1;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_priority(), target);
  }

  // uint32 bsd = 2;
  if (this->bsd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bsd(), target);
  }

  // uint32 pbr = 3;
  if (this->pbr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pbr(), target);
  }

  // int32 group = 4;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_group(), target);
  }

  // .fs.mac_rrc.DIRECTION_T direction = 5;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.ue_bearer_cfg_t)
  return target;
}

size_t ue_bearer_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.ue_bearer_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  // uint32 bsd = 2;
  if (this->bsd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bsd());
  }

  // uint32 pbr = 3;
  if (this->pbr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pbr());
  }

  // int32 group = 4;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());
  }

  // .fs.mac_rrc.DIRECTION_T direction = 5;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ue_bearer_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.ue_bearer_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ue_bearer_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ue_bearer_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.ue_bearer_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.ue_bearer_cfg_t)
    MergeFrom(*source);
  }
}

void ue_bearer_cfg_t::MergeFrom(const ue_bearer_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.ue_bearer_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.bsd() != 0) {
    _internal_set_bsd(from._internal_bsd());
  }
  if (from.pbr() != 0) {
    _internal_set_pbr(from._internal_pbr());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void ue_bearer_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.ue_bearer_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ue_bearer_cfg_t::CopyFrom(const ue_bearer_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.ue_bearer_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ue_bearer_cfg_t::IsInitialized() const {
  return true;
}

void ue_bearer_cfg_t::InternalSwap(ue_bearer_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ue_bearer_cfg_t, direction_)
      + sizeof(ue_bearer_cfg_t::direction_)
      - PROTOBUF_FIELD_OFFSET(ue_bearer_cfg_t, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ue_bearer_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_cqi_cfg_t::InitAsDefaultInstance() {
}
class srsran_cqi_cfg_t::_Internal {
 public:
};

srsran_cqi_cfg_t::srsran_cqi_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_cqi_cfg_t)
}
srsran_cqi_cfg_t::srsran_cqi_cfg_t(const srsran_cqi_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_enable_, &from.data_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&ri_len_) -
    reinterpret_cast<char*>(&data_enable_)) + sizeof(ri_len_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_cqi_cfg_t)
}

void srsran_cqi_cfg_t::SharedCtor() {
  ::memset(&data_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ri_len_) -
      reinterpret_cast<char*>(&data_enable_)) + sizeof(ri_len_));
}

srsran_cqi_cfg_t::~srsran_cqi_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_cqi_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_cqi_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_cqi_cfg_t::ArenaDtor(void* object) {
  srsran_cqi_cfg_t* _this = reinterpret_cast< srsran_cqi_cfg_t* >(object);
  (void)_this;
}
void srsran_cqi_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_cqi_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_cqi_cfg_t& srsran_cqi_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_cqi_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_cqi_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_cqi_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ri_len_) -
      reinterpret_cast<char*>(&data_enable_)) + sizeof(ri_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_cqi_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool data_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pmi_present = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pmi_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool four_antenna_ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          four_antenna_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rank_is_not_one = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rank_is_not_one_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool subband_label_2_bits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subband_label_2_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 scell_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          scell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 L = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 N = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_cqi_type_t type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fs::mac_rrc::srsran_cqi_type_t>(val));
        } else goto handle_unusual;
        continue;
      // uint32 ri_len = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ri_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_cqi_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_cqi_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool data_enable = 1;
  if (this->data_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_data_enable(), target);
  }

  // bool pmi_present = 2;
  if (this->pmi_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pmi_present(), target);
  }

  // bool four_antenna_ports = 3;
  if (this->four_antenna_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_four_antenna_ports(), target);
  }

  // bool rank_is_not_one = 4;
  if (this->rank_is_not_one() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rank_is_not_one(), target);
  }

  // bool subband_label_2_bits = 5;
  if (this->subband_label_2_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_subband_label_2_bits(), target);
  }

  // uint32 scell_index = 6;
  if (this->scell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scell_index(), target);
  }

  // uint32 L = 7;
  if (this->l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_l(), target);
  }

  // uint32 N = 8;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_n(), target);
  }

  // .fs.mac_rrc.srsran_cqi_type_t type = 9;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // uint32 ri_len = 10;
  if (this->ri_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ri_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_cqi_cfg_t)
  return target;
}

size_t srsran_cqi_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_cqi_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool data_enable = 1;
  if (this->data_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool pmi_present = 2;
  if (this->pmi_present() != 0) {
    total_size += 1 + 1;
  }

  // bool four_antenna_ports = 3;
  if (this->four_antenna_ports() != 0) {
    total_size += 1 + 1;
  }

  // bool rank_is_not_one = 4;
  if (this->rank_is_not_one() != 0) {
    total_size += 1 + 1;
  }

  // bool subband_label_2_bits = 5;
  if (this->subband_label_2_bits() != 0) {
    total_size += 1 + 1;
  }

  // uint32 scell_index = 6;
  if (this->scell_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scell_index());
  }

  // uint32 L = 7;
  if (this->l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l());
  }

  // uint32 N = 8;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n());
  }

  // .fs.mac_rrc.srsran_cqi_type_t type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 ri_len = 10;
  if (this->ri_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ri_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_cqi_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_cqi_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_cqi_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_cqi_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_cqi_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_cqi_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_cqi_cfg_t::MergeFrom(const srsran_cqi_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_cqi_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_enable() != 0) {
    _internal_set_data_enable(from._internal_data_enable());
  }
  if (from.pmi_present() != 0) {
    _internal_set_pmi_present(from._internal_pmi_present());
  }
  if (from.four_antenna_ports() != 0) {
    _internal_set_four_antenna_ports(from._internal_four_antenna_ports());
  }
  if (from.rank_is_not_one() != 0) {
    _internal_set_rank_is_not_one(from._internal_rank_is_not_one());
  }
  if (from.subband_label_2_bits() != 0) {
    _internal_set_subband_label_2_bits(from._internal_subband_label_2_bits());
  }
  if (from.scell_index() != 0) {
    _internal_set_scell_index(from._internal_scell_index());
  }
  if (from.l() != 0) {
    _internal_set_l(from._internal_l());
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ri_len() != 0) {
    _internal_set_ri_len(from._internal_ri_len());
  }
}

void srsran_cqi_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_cqi_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_cqi_cfg_t::CopyFrom(const srsran_cqi_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_cqi_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_cqi_cfg_t::IsInitialized() const {
  return true;
}

void srsran_cqi_cfg_t::InternalSwap(srsran_cqi_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_cqi_cfg_t, ri_len_)
      + sizeof(srsran_cqi_cfg_t::ri_len_)
      - PROTOBUF_FIELD_OFFSET(srsran_cqi_cfg_t, data_enable_)>(
          reinterpret_cast<char*>(&data_enable_),
          reinterpret_cast<char*>(&other->data_enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_cqi_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_uci_cfg_ack_t::InitAsDefaultInstance() {
}
class srsran_uci_cfg_ack_t::_Internal {
 public:
};

srsran_uci_cfg_ack_t::srsran_uci_cfg_ack_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pending_tb_(arena),
  ncce_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_uci_cfg_ack_t)
}
srsran_uci_cfg_ack_t::srsran_uci_cfg_ack_t(const srsran_uci_cfg_ack_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pending_tb_(from.pending_tb_),
      ncce_(from.ncce_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nof_acks_, &from.nof_acks_,
    static_cast<size_t>(reinterpret_cast<char*>(&grant_cc_idx_) -
    reinterpret_cast<char*>(&nof_acks_)) + sizeof(grant_cc_idx_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_uci_cfg_ack_t)
}

void srsran_uci_cfg_ack_t::SharedCtor() {
  ::memset(&nof_acks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grant_cc_idx_) -
      reinterpret_cast<char*>(&nof_acks_)) + sizeof(grant_cc_idx_));
}

srsran_uci_cfg_ack_t::~srsran_uci_cfg_ack_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_uci_cfg_ack_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_uci_cfg_ack_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_uci_cfg_ack_t::ArenaDtor(void* object) {
  srsran_uci_cfg_ack_t* _this = reinterpret_cast< srsran_uci_cfg_ack_t* >(object);
  (void)_this;
}
void srsran_uci_cfg_ack_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_uci_cfg_ack_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_uci_cfg_ack_t& srsran_uci_cfg_ack_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_uci_cfg_ack_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_uci_cfg_ack_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_tb_.Clear();
  ncce_.Clear();
  ::memset(&nof_acks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grant_cc_idx_) -
      reinterpret_cast<char*>(&nof_acks_)) + sizeof(grant_cc_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_uci_cfg_ack_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool pending_tb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_pending_tb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_pending_tb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_acks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nof_acks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ncce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ncce(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_ncce(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 N_bundle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n_bundle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tdd_ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tdd_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tdd_ack_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tdd_ack_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tdd_is_multiplex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tdd_is_multiplex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tpc_for_pucch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tpc_for_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grant_cc_idx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          grant_cc_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_uci_cfg_ack_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool pending_tb = 1;
  if (this->_internal_pending_tb_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_pending_tb(), target);
  }

  // uint32 nof_acks = 2;
  if (this->nof_acks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nof_acks(), target);
  }

  // repeated uint32 ncce = 3;
  {
    int byte_size = _ncce_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_ncce(), byte_size, target);
    }
  }

  // uint32 N_bundle = 4;
  if (this->n_bundle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_n_bundle(), target);
  }

  // uint32 tdd_ack = 5;
  if (this->tdd_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tdd_ack(), target);
  }

  // uint32 tdd_ack_m = 6;
  if (this->tdd_ack_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tdd_ack_m(), target);
  }

  // bool tdd_is_multiplex = 7;
  if (this->tdd_is_multiplex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_tdd_is_multiplex(), target);
  }

  // uint32 tpc_for_pucch = 8;
  if (this->tpc_for_pucch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tpc_for_pucch(), target);
  }

  // uint32 grant_cc_idx = 9;
  if (this->grant_cc_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_grant_cc_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_uci_cfg_ack_t)
  return target;
}

size_t srsran_uci_cfg_ack_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool pending_tb = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pending_tb_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pending_tb_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ncce = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ncce_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ncce_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 nof_acks = 2;
  if (this->nof_acks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_acks());
  }

  // uint32 N_bundle = 4;
  if (this->n_bundle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_bundle());
  }

  // uint32 tdd_ack = 5;
  if (this->tdd_ack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tdd_ack());
  }

  // uint32 tdd_ack_m = 6;
  if (this->tdd_ack_m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tdd_ack_m());
  }

  // bool tdd_is_multiplex = 7;
  if (this->tdd_is_multiplex() != 0) {
    total_size += 1 + 1;
  }

  // uint32 tpc_for_pucch = 8;
  if (this->tpc_for_pucch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tpc_for_pucch());
  }

  // uint32 grant_cc_idx = 9;
  if (this->grant_cc_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grant_cc_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_uci_cfg_ack_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_uci_cfg_ack_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_uci_cfg_ack_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_uci_cfg_ack_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_uci_cfg_ack_t)
    MergeFrom(*source);
  }
}

void srsran_uci_cfg_ack_t::MergeFrom(const srsran_uci_cfg_ack_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_tb_.MergeFrom(from.pending_tb_);
  ncce_.MergeFrom(from.ncce_);
  if (from.nof_acks() != 0) {
    _internal_set_nof_acks(from._internal_nof_acks());
  }
  if (from.n_bundle() != 0) {
    _internal_set_n_bundle(from._internal_n_bundle());
  }
  if (from.tdd_ack() != 0) {
    _internal_set_tdd_ack(from._internal_tdd_ack());
  }
  if (from.tdd_ack_m() != 0) {
    _internal_set_tdd_ack_m(from._internal_tdd_ack_m());
  }
  if (from.tdd_is_multiplex() != 0) {
    _internal_set_tdd_is_multiplex(from._internal_tdd_is_multiplex());
  }
  if (from.tpc_for_pucch() != 0) {
    _internal_set_tpc_for_pucch(from._internal_tpc_for_pucch());
  }
  if (from.grant_cc_idx() != 0) {
    _internal_set_grant_cc_idx(from._internal_grant_cc_idx());
  }
}

void srsran_uci_cfg_ack_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_uci_cfg_ack_t::CopyFrom(const srsran_uci_cfg_ack_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_uci_cfg_ack_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_uci_cfg_ack_t::IsInitialized() const {
  return true;
}

void srsran_uci_cfg_ack_t::InternalSwap(srsran_uci_cfg_ack_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pending_tb_.InternalSwap(&other->pending_tb_);
  ncce_.InternalSwap(&other->ncce_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_uci_cfg_ack_t, grant_cc_idx_)
      + sizeof(srsran_uci_cfg_ack_t::grant_cc_idx_)
      - PROTOBUF_FIELD_OFFSET(srsran_uci_cfg_ack_t, nof_acks_)>(
          reinterpret_cast<char*>(&nof_acks_),
          reinterpret_cast<char*>(&other->nof_acks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_uci_cfg_ack_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_uci_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_srsran_uci_cfg_t_default_instance_._instance.get_mutable()->cqi_ = const_cast< ::fs::mac_rrc::srsran_cqi_cfg_t*>(
      ::fs::mac_rrc::srsran_cqi_cfg_t::internal_default_instance());
}
class srsran_uci_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_cqi_cfg_t& cqi(const srsran_uci_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_cqi_cfg_t&
srsran_uci_cfg_t::_Internal::cqi(const srsran_uci_cfg_t* msg) {
  return *msg->cqi_;
}
srsran_uci_cfg_t::srsran_uci_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_uci_cfg_t)
}
srsran_uci_cfg_t::srsran_uci_cfg_t(const srsran_uci_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ack_(from.ack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cqi()) {
    cqi_ = new ::fs::mac_rrc::srsran_cqi_cfg_t(*from.cqi_);
  } else {
    cqi_ = nullptr;
  }
  is_scheduling_request_tti_ = from.is_scheduling_request_tti_;
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_uci_cfg_t)
}

void srsran_uci_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&cqi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_scheduling_request_tti_) -
      reinterpret_cast<char*>(&cqi_)) + sizeof(is_scheduling_request_tti_));
}

srsran_uci_cfg_t::~srsran_uci_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_uci_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_uci_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cqi_;
}

void srsran_uci_cfg_t::ArenaDtor(void* object) {
  srsran_uci_cfg_t* _this = reinterpret_cast< srsran_uci_cfg_t* >(object);
  (void)_this;
}
void srsran_uci_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_uci_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_uci_cfg_t& srsran_uci_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_uci_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_uci_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_uci_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_.Clear();
  if (GetArena() == nullptr && cqi_ != nullptr) {
    delete cqi_;
  }
  cqi_ = nullptr;
  is_scheduling_request_tti_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_uci_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fs.mac_rrc.srsran_uci_cfg_ack_t ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_cqi_cfg_t cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cqi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_scheduling_request_tti = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_scheduling_request_tti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_uci_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_uci_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.srsran_uci_cfg_ack_t ack = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ack(i), target, stream);
  }

  // .fs.mac_rrc.srsran_cqi_cfg_t cqi = 2;
  if (this->has_cqi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cqi(this), target, stream);
  }

  // bool is_scheduling_request_tti = 3;
  if (this->is_scheduling_request_tti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_scheduling_request_tti(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_uci_cfg_t)
  return target;
}

size_t srsran_uci_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_uci_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.srsran_uci_cfg_ack_t ack = 1;
  total_size += 1UL * this->_internal_ack_size();
  for (const auto& msg : this->ack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.mac_rrc.srsran_cqi_cfg_t cqi = 2;
  if (this->has_cqi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cqi_);
  }

  // bool is_scheduling_request_tti = 3;
  if (this->is_scheduling_request_tti() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_uci_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_uci_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_uci_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_uci_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_uci_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_uci_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_uci_cfg_t::MergeFrom(const srsran_uci_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_uci_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_.MergeFrom(from.ack_);
  if (from.has_cqi()) {
    _internal_mutable_cqi()->::fs::mac_rrc::srsran_cqi_cfg_t::MergeFrom(from._internal_cqi());
  }
  if (from.is_scheduling_request_tti() != 0) {
    _internal_set_is_scheduling_request_tti(from._internal_is_scheduling_request_tti());
  }
}

void srsran_uci_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_uci_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_uci_cfg_t::CopyFrom(const srsran_uci_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_uci_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_uci_cfg_t::IsInitialized() const {
  return true;
}

void srsran_uci_cfg_t::InternalSwap(srsran_uci_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ack_.InternalSwap(&other->ack_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_uci_cfg_t, is_scheduling_request_tti_)
      + sizeof(srsran_uci_cfg_t::is_scheduling_request_tti_)
      - PROTOBUF_FIELD_OFFSET(srsran_uci_cfg_t, cqi_)>(
          reinterpret_cast<char*>(&cqi_),
          reinterpret_cast<char*>(&other->cqi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_uci_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_pucch_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_srsran_pucch_cfg_t_default_instance_._instance.get_mutable()->uci_cfg_ = const_cast< ::fs::mac_rrc::srsran_uci_cfg_t*>(
      ::fs::mac_rrc::srsran_uci_cfg_t::internal_default_instance());
}
class srsran_pucch_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_uci_cfg_t& uci_cfg(const srsran_pucch_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_uci_cfg_t&
srsran_pucch_cfg_t::_Internal::uci_cfg(const srsran_pucch_cfg_t* msg) {
  return *msg->uci_cfg_;
}
srsran_pucch_cfg_t::srsran_pucch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  n_pucch_1_(arena),
  n1_pucch_an_cs_(arena),
  n3_pucch_an_list_(arena),
  pucch2_drs_bits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_pucch_cfg_t)
}
srsran_pucch_cfg_t::srsran_pucch_cfg_t(const srsran_pucch_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      n_pucch_1_(from.n_pucch_1_),
      n1_pucch_an_cs_(from.n1_pucch_an_cs_),
      n3_pucch_an_list_(from.n3_pucch_an_list_),
      pucch2_drs_bits_(from.pucch2_drs_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uci_cfg()) {
    uci_cfg_ = new ::fs::mac_rrc::srsran_uci_cfg_t(*from.uci_cfg_);
  } else {
    uci_cfg_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_pucch_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(n_pucch_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_pucch_cfg_t)
}

void srsran_pucch_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&uci_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_pucch_) -
      reinterpret_cast<char*>(&uci_cfg_)) + sizeof(n_pucch_));
}

srsran_pucch_cfg_t::~srsran_pucch_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_pucch_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_pucch_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uci_cfg_;
}

void srsran_pucch_cfg_t::ArenaDtor(void* object) {
  srsran_pucch_cfg_t* _this = reinterpret_cast< srsran_pucch_cfg_t* >(object);
  (void)_this;
}
void srsran_pucch_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_pucch_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_pucch_cfg_t& srsran_pucch_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_pucch_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_pucch_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_pucch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_pucch_1_.Clear();
  n1_pucch_an_cs_.Clear();
  n3_pucch_an_list_.Clear();
  pucch2_drs_bits_.Clear();
  if (GetArena() == nullptr && uci_cfg_ != nullptr) {
    delete uci_cfg_;
  }
  uci_cfg_ = nullptr;
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_pucch_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(n_pucch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_pucch_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uci_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delta_pucch_shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delta_pucch_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_rb_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n_rb_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 N_cs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          n_cs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 N_pucch_v = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          n_pucch_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool group_hopping_en = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          group_hopping_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 I_sr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          i_sr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sr_configured = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sr_configured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 n_pucch_1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n_pucch_1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_n_pucch_1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_pucch_2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          n_pucch_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_pucch_sr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          n_pucch_sr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool simul_cqi_ack = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          simul_cqi_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tdd_ack_multiplex = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tdd_ack_multiplex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sps_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          sps_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ack_nack_feedback_mode(static_cast<::fs::mac_rrc::srsran_ack_nack_feedback_mode_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 n1_pucch_an_cs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n1_pucch_an_cs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_n1_pucch_an_cs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 n3_pucch_an_list = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n3_pucch_an_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_n3_pucch_an_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float threshold_format1 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          threshold_format1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float threshold_data_valid_format1a = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          threshold_data_valid_format1a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float threshold_data_valid_format2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          threshold_data_valid_format2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float threshold_data_valid_format3 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          threshold_data_valid_format3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float threshold_dmrs_detection = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          threshold_dmrs_detection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool meas_ta_en = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          meas_ta_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_pucch_format_t format = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::fs::mac_rrc::srsran_pucch_format_t>(val));
        } else goto handle_unusual;
        continue;
      // uint32 n_pucch = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          n_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 pucch2_drs_bits = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pucch2_drs_bits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_pucch2_drs_bits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_pucch_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_pucch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rnti = 1;
  if (this->rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 2;
  if (this->has_uci_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uci_cfg(this), target, stream);
  }

  // uint32 delta_pucch_shift = 3;
  if (this->delta_pucch_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_delta_pucch_shift(), target);
  }

  // uint32 n_rb_2 = 4;
  if (this->n_rb_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_n_rb_2(), target);
  }

  // uint32 N_cs = 5;
  if (this->n_cs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_n_cs(), target);
  }

  // uint32 N_pucch_v = 6;
  if (this->n_pucch_v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_n_pucch_v(), target);
  }

  // bool group_hopping_en = 7;
  if (this->group_hopping_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_group_hopping_en(), target);
  }

  // uint32 I_sr = 8;
  if (this->i_sr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_i_sr(), target);
  }

  // bool sr_configured = 9;
  if (this->sr_configured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_sr_configured(), target);
  }

  // repeated uint32 n_pucch_1 = 10;
  {
    int byte_size = _n_pucch_1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_n_pucch_1(), byte_size, target);
    }
  }

  // uint32 n_pucch_2 = 11;
  if (this->n_pucch_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_n_pucch_2(), target);
  }

  // uint32 n_pucch_sr = 12;
  if (this->n_pucch_sr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_n_pucch_sr(), target);
  }

  // bool simul_cqi_ack = 13;
  if (this->simul_cqi_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_simul_cqi_ack(), target);
  }

  // bool tdd_ack_multiplex = 14;
  if (this->tdd_ack_multiplex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_tdd_ack_multiplex(), target);
  }

  // bool sps_enabled = 15;
  if (this->sps_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_sps_enabled(), target);
  }

  // .fs.mac_rrc.srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode = 16;
  if (this->ack_nack_feedback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_ack_nack_feedback_mode(), target);
  }

  // repeated uint32 n1_pucch_an_cs = 17;
  {
    int byte_size = _n1_pucch_an_cs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          17, _internal_n1_pucch_an_cs(), byte_size, target);
    }
  }

  // repeated uint32 n3_pucch_an_list = 18;
  {
    int byte_size = _n3_pucch_an_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          18, _internal_n3_pucch_an_list(), byte_size, target);
    }
  }

  // float threshold_format1 = 19;
  if (!(this->threshold_format1() <= 0 && this->threshold_format1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_threshold_format1(), target);
  }

  // float threshold_data_valid_format1a = 20;
  if (!(this->threshold_data_valid_format1a() <= 0 && this->threshold_data_valid_format1a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_threshold_data_valid_format1a(), target);
  }

  // float threshold_data_valid_format2 = 21;
  if (!(this->threshold_data_valid_format2() <= 0 && this->threshold_data_valid_format2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_threshold_data_valid_format2(), target);
  }

  // float threshold_data_valid_format3 = 22;
  if (!(this->threshold_data_valid_format3() <= 0 && this->threshold_data_valid_format3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_threshold_data_valid_format3(), target);
  }

  // float threshold_dmrs_detection = 23;
  if (!(this->threshold_dmrs_detection() <= 0 && this->threshold_dmrs_detection() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_threshold_dmrs_detection(), target);
  }

  // bool meas_ta_en = 24;
  if (this->meas_ta_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_meas_ta_en(), target);
  }

  // .fs.mac_rrc.srsran_pucch_format_t format = 25;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_format(), target);
  }

  // uint32 n_pucch = 26;
  if (this->n_pucch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_n_pucch(), target);
  }

  // repeated uint32 pucch2_drs_bits = 27;
  {
    int byte_size = _pucch2_drs_bits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          27, _internal_pucch2_drs_bits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_pucch_cfg_t)
  return target;
}

size_t srsran_pucch_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_pucch_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 n_pucch_1 = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n_pucch_1_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n_pucch_1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 n1_pucch_an_cs = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n1_pucch_an_cs_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n1_pucch_an_cs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 n3_pucch_an_list = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n3_pucch_an_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n3_pucch_an_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 pucch2_drs_bits = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pucch2_drs_bits_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pucch2_drs_bits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .fs.mac_rrc.srsran_uci_cfg_t uci_cfg = 2;
  if (this->has_uci_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uci_cfg_);
  }

  // uint32 rnti = 1;
  if (this->rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  // uint32 delta_pucch_shift = 3;
  if (this->delta_pucch_shift() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delta_pucch_shift());
  }

  // uint32 n_rb_2 = 4;
  if (this->n_rb_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_rb_2());
  }

  // uint32 N_cs = 5;
  if (this->n_cs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_cs());
  }

  // uint32 N_pucch_v = 6;
  if (this->n_pucch_v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_pucch_v());
  }

  // uint32 I_sr = 8;
  if (this->i_sr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_i_sr());
  }

  // bool group_hopping_en = 7;
  if (this->group_hopping_en() != 0) {
    total_size += 1 + 1;
  }

  // bool sr_configured = 9;
  if (this->sr_configured() != 0) {
    total_size += 1 + 1;
  }

  // bool simul_cqi_ack = 13;
  if (this->simul_cqi_ack() != 0) {
    total_size += 1 + 1;
  }

  // bool tdd_ack_multiplex = 14;
  if (this->tdd_ack_multiplex() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n_pucch_2 = 11;
  if (this->n_pucch_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_pucch_2());
  }

  // uint32 n_pucch_sr = 12;
  if (this->n_pucch_sr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_pucch_sr());
  }

  // .fs.mac_rrc.srsran_ack_nack_feedback_mode_t ack_nack_feedback_mode = 16;
  if (this->ack_nack_feedback_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ack_nack_feedback_mode());
  }

  // float threshold_format1 = 19;
  if (!(this->threshold_format1() <= 0 && this->threshold_format1() >= 0)) {
    total_size += 2 + 4;
  }

  // bool sps_enabled = 15;
  if (this->sps_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool meas_ta_en = 24;
  if (this->meas_ta_en() != 0) {
    total_size += 2 + 1;
  }

  // float threshold_data_valid_format1a = 20;
  if (!(this->threshold_data_valid_format1a() <= 0 && this->threshold_data_valid_format1a() >= 0)) {
    total_size += 2 + 4;
  }

  // float threshold_data_valid_format2 = 21;
  if (!(this->threshold_data_valid_format2() <= 0 && this->threshold_data_valid_format2() >= 0)) {
    total_size += 2 + 4;
  }

  // float threshold_data_valid_format3 = 22;
  if (!(this->threshold_data_valid_format3() <= 0 && this->threshold_data_valid_format3() >= 0)) {
    total_size += 2 + 4;
  }

  // float threshold_dmrs_detection = 23;
  if (!(this->threshold_dmrs_detection() <= 0 && this->threshold_dmrs_detection() >= 0)) {
    total_size += 2 + 4;
  }

  // .fs.mac_rrc.srsran_pucch_format_t format = 25;
  if (this->format() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // uint32 n_pucch = 26;
  if (this->n_pucch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_pucch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_pucch_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_pucch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_pucch_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_pucch_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_pucch_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_pucch_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_pucch_cfg_t::MergeFrom(const srsran_pucch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_pucch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n_pucch_1_.MergeFrom(from.n_pucch_1_);
  n1_pucch_an_cs_.MergeFrom(from.n1_pucch_an_cs_);
  n3_pucch_an_list_.MergeFrom(from.n3_pucch_an_list_);
  pucch2_drs_bits_.MergeFrom(from.pucch2_drs_bits_);
  if (from.has_uci_cfg()) {
    _internal_mutable_uci_cfg()->::fs::mac_rrc::srsran_uci_cfg_t::MergeFrom(from._internal_uci_cfg());
  }
  if (from.rnti() != 0) {
    _internal_set_rnti(from._internal_rnti());
  }
  if (from.delta_pucch_shift() != 0) {
    _internal_set_delta_pucch_shift(from._internal_delta_pucch_shift());
  }
  if (from.n_rb_2() != 0) {
    _internal_set_n_rb_2(from._internal_n_rb_2());
  }
  if (from.n_cs() != 0) {
    _internal_set_n_cs(from._internal_n_cs());
  }
  if (from.n_pucch_v() != 0) {
    _internal_set_n_pucch_v(from._internal_n_pucch_v());
  }
  if (from.i_sr() != 0) {
    _internal_set_i_sr(from._internal_i_sr());
  }
  if (from.group_hopping_en() != 0) {
    _internal_set_group_hopping_en(from._internal_group_hopping_en());
  }
  if (from.sr_configured() != 0) {
    _internal_set_sr_configured(from._internal_sr_configured());
  }
  if (from.simul_cqi_ack() != 0) {
    _internal_set_simul_cqi_ack(from._internal_simul_cqi_ack());
  }
  if (from.tdd_ack_multiplex() != 0) {
    _internal_set_tdd_ack_multiplex(from._internal_tdd_ack_multiplex());
  }
  if (from.n_pucch_2() != 0) {
    _internal_set_n_pucch_2(from._internal_n_pucch_2());
  }
  if (from.n_pucch_sr() != 0) {
    _internal_set_n_pucch_sr(from._internal_n_pucch_sr());
  }
  if (from.ack_nack_feedback_mode() != 0) {
    _internal_set_ack_nack_feedback_mode(from._internal_ack_nack_feedback_mode());
  }
  if (!(from.threshold_format1() <= 0 && from.threshold_format1() >= 0)) {
    _internal_set_threshold_format1(from._internal_threshold_format1());
  }
  if (from.sps_enabled() != 0) {
    _internal_set_sps_enabled(from._internal_sps_enabled());
  }
  if (from.meas_ta_en() != 0) {
    _internal_set_meas_ta_en(from._internal_meas_ta_en());
  }
  if (!(from.threshold_data_valid_format1a() <= 0 && from.threshold_data_valid_format1a() >= 0)) {
    _internal_set_threshold_data_valid_format1a(from._internal_threshold_data_valid_format1a());
  }
  if (!(from.threshold_data_valid_format2() <= 0 && from.threshold_data_valid_format2() >= 0)) {
    _internal_set_threshold_data_valid_format2(from._internal_threshold_data_valid_format2());
  }
  if (!(from.threshold_data_valid_format3() <= 0 && from.threshold_data_valid_format3() >= 0)) {
    _internal_set_threshold_data_valid_format3(from._internal_threshold_data_valid_format3());
  }
  if (!(from.threshold_dmrs_detection() <= 0 && from.threshold_dmrs_detection() >= 0)) {
    _internal_set_threshold_dmrs_detection(from._internal_threshold_dmrs_detection());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.n_pucch() != 0) {
    _internal_set_n_pucch(from._internal_n_pucch());
  }
}

void srsran_pucch_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_pucch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_pucch_cfg_t::CopyFrom(const srsran_pucch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_pucch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_pucch_cfg_t::IsInitialized() const {
  return true;
}

void srsran_pucch_cfg_t::InternalSwap(srsran_pucch_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  n_pucch_1_.InternalSwap(&other->n_pucch_1_);
  n1_pucch_an_cs_.InternalSwap(&other->n1_pucch_an_cs_);
  n3_pucch_an_list_.InternalSwap(&other->n3_pucch_an_list_);
  pucch2_drs_bits_.InternalSwap(&other->pucch2_drs_bits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_pucch_cfg_t, n_pucch_)
      + sizeof(srsran_pucch_cfg_t::n_pucch_)
      - PROTOBUF_FIELD_OFFSET(srsran_pucch_cfg_t, uci_cfg_)>(
          reinterpret_cast<char*>(&uci_cfg_),
          reinterpret_cast<char*>(&other->uci_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_pucch_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_uci_offset_cfg_t::InitAsDefaultInstance() {
}
class srsran_uci_offset_cfg_t::_Internal {
 public:
};

srsran_uci_offset_cfg_t::srsran_uci_offset_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_uci_offset_cfg_t)
}
srsran_uci_offset_cfg_t::srsran_uci_offset_cfg_t(const srsran_uci_offset_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&i_offset_cqi_, &from.i_offset_cqi_,
    static_cast<size_t>(reinterpret_cast<char*>(&i_offset_ack_) -
    reinterpret_cast<char*>(&i_offset_cqi_)) + sizeof(i_offset_ack_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_uci_offset_cfg_t)
}

void srsran_uci_offset_cfg_t::SharedCtor() {
  ::memset(&i_offset_cqi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_offset_ack_) -
      reinterpret_cast<char*>(&i_offset_cqi_)) + sizeof(i_offset_ack_));
}

srsran_uci_offset_cfg_t::~srsran_uci_offset_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_uci_offset_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_uci_offset_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_uci_offset_cfg_t::ArenaDtor(void* object) {
  srsran_uci_offset_cfg_t* _this = reinterpret_cast< srsran_uci_offset_cfg_t* >(object);
  (void)_this;
}
void srsran_uci_offset_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_uci_offset_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_uci_offset_cfg_t& srsran_uci_offset_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_uci_offset_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_uci_offset_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&i_offset_cqi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_offset_ack_) -
      reinterpret_cast<char*>(&i_offset_cqi_)) + sizeof(i_offset_ack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_uci_offset_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 I_offset_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          i_offset_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 I_offset_ri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          i_offset_ri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 I_offset_ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          i_offset_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_uci_offset_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 I_offset_cqi = 1;
  if (this->i_offset_cqi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_i_offset_cqi(), target);
  }

  // uint32 I_offset_ri = 2;
  if (this->i_offset_ri() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_i_offset_ri(), target);
  }

  // uint32 I_offset_ack = 3;
  if (this->i_offset_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_i_offset_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_uci_offset_cfg_t)
  return target;
}

size_t srsran_uci_offset_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 I_offset_cqi = 1;
  if (this->i_offset_cqi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_i_offset_cqi());
  }

  // uint32 I_offset_ri = 2;
  if (this->i_offset_ri() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_i_offset_ri());
  }

  // uint32 I_offset_ack = 3;
  if (this->i_offset_ack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_i_offset_ack());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_uci_offset_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_uci_offset_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_uci_offset_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_uci_offset_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_uci_offset_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_uci_offset_cfg_t::MergeFrom(const srsran_uci_offset_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.i_offset_cqi() != 0) {
    _internal_set_i_offset_cqi(from._internal_i_offset_cqi());
  }
  if (from.i_offset_ri() != 0) {
    _internal_set_i_offset_ri(from._internal_i_offset_ri());
  }
  if (from.i_offset_ack() != 0) {
    _internal_set_i_offset_ack(from._internal_i_offset_ack());
  }
}

void srsran_uci_offset_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_uci_offset_cfg_t::CopyFrom(const srsran_uci_offset_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_uci_offset_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_uci_offset_cfg_t::IsInitialized() const {
  return true;
}

void srsran_uci_offset_cfg_t::InternalSwap(srsran_uci_offset_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_uci_offset_cfg_t, i_offset_ack_)
      + sizeof(srsran_uci_offset_cfg_t::i_offset_ack_)
      - PROTOBUF_FIELD_OFFSET(srsran_uci_offset_cfg_t, i_offset_cqi_)>(
          reinterpret_cast<char*>(&i_offset_cqi_),
          reinterpret_cast<char*>(&other->i_offset_cqi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_uci_offset_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_dci_cfg_t::InitAsDefaultInstance() {
}
class srsran_dci_cfg_t::_Internal {
 public:
};

srsran_dci_cfg_t::srsran_dci_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_dci_cfg_t)
}
srsran_dci_cfg_t::srsran_dci_cfg_t(const srsran_dci_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&multiple_csi_request_enabled_, &from.multiple_csi_request_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_not_ue_ss_) -
    reinterpret_cast<char*>(&multiple_csi_request_enabled_)) + sizeof(is_not_ue_ss_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_dci_cfg_t)
}

void srsran_dci_cfg_t::SharedCtor() {
  ::memset(&multiple_csi_request_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_not_ue_ss_) -
      reinterpret_cast<char*>(&multiple_csi_request_enabled_)) + sizeof(is_not_ue_ss_));
}

srsran_dci_cfg_t::~srsran_dci_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_dci_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_dci_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_dci_cfg_t::ArenaDtor(void* object) {
  srsran_dci_cfg_t* _this = reinterpret_cast< srsran_dci_cfg_t* >(object);
  (void)_this;
}
void srsran_dci_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_dci_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_dci_cfg_t& srsran_dci_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_dci_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_dci_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_dci_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&multiple_csi_request_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_not_ue_ss_) -
      reinterpret_cast<char*>(&multiple_csi_request_enabled_)) + sizeof(is_not_ue_ss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_dci_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool multiple_csi_request_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          multiple_csi_request_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cif_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cif_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cif_present = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cif_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool srs_request_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          srs_request_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ra_format_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ra_format_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_not_ue_ss = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_not_ue_ss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_dci_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_dci_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool multiple_csi_request_enabled = 1;
  if (this->multiple_csi_request_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_multiple_csi_request_enabled(), target);
  }

  // bool cif_enabled = 2;
  if (this->cif_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cif_enabled(), target);
  }

  // bool cif_present = 3;
  if (this->cif_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cif_present(), target);
  }

  // bool srs_request_enabled = 4;
  if (this->srs_request_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_srs_request_enabled(), target);
  }

  // bool ra_format_enabled = 5;
  if (this->ra_format_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ra_format_enabled(), target);
  }

  // bool is_not_ue_ss = 6;
  if (this->is_not_ue_ss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_not_ue_ss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_dci_cfg_t)
  return target;
}

size_t srsran_dci_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_dci_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool multiple_csi_request_enabled = 1;
  if (this->multiple_csi_request_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool cif_enabled = 2;
  if (this->cif_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool cif_present = 3;
  if (this->cif_present() != 0) {
    total_size += 1 + 1;
  }

  // bool srs_request_enabled = 4;
  if (this->srs_request_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool ra_format_enabled = 5;
  if (this->ra_format_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_not_ue_ss = 6;
  if (this->is_not_ue_ss() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_dci_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_dci_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_dci_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_dci_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_dci_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_dci_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_dci_cfg_t::MergeFrom(const srsran_dci_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_dci_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.multiple_csi_request_enabled() != 0) {
    _internal_set_multiple_csi_request_enabled(from._internal_multiple_csi_request_enabled());
  }
  if (from.cif_enabled() != 0) {
    _internal_set_cif_enabled(from._internal_cif_enabled());
  }
  if (from.cif_present() != 0) {
    _internal_set_cif_present(from._internal_cif_present());
  }
  if (from.srs_request_enabled() != 0) {
    _internal_set_srs_request_enabled(from._internal_srs_request_enabled());
  }
  if (from.ra_format_enabled() != 0) {
    _internal_set_ra_format_enabled(from._internal_ra_format_enabled());
  }
  if (from.is_not_ue_ss() != 0) {
    _internal_set_is_not_ue_ss(from._internal_is_not_ue_ss());
  }
}

void srsran_dci_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_dci_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_dci_cfg_t::CopyFrom(const srsran_dci_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_dci_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_dci_cfg_t::IsInitialized() const {
  return true;
}

void srsran_dci_cfg_t::InternalSwap(srsran_dci_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_dci_cfg_t, is_not_ue_ss_)
      + sizeof(srsran_dci_cfg_t::is_not_ue_ss_)
      - PROTOBUF_FIELD_OFFSET(srsran_dci_cfg_t, multiple_csi_request_enabled_)>(
          reinterpret_cast<char*>(&multiple_csi_request_enabled_),
          reinterpret_cast<char*>(&other->multiple_csi_request_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_dci_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_ra_tb_t::InitAsDefaultInstance() {
}
class srsran_ra_tb_t::_Internal {
 public:
};

srsran_ra_tb_t::srsran_ra_tb_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_ra_tb_t)
}
srsran_ra_tb_t::srsran_ra_tb_t(const srsran_ra_tb_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mod_, &from.mod_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcs_idx_) -
    reinterpret_cast<char*>(&mod_)) + sizeof(mcs_idx_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_ra_tb_t)
}

void srsran_ra_tb_t::SharedCtor() {
  ::memset(&mod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcs_idx_) -
      reinterpret_cast<char*>(&mod_)) + sizeof(mcs_idx_));
}

srsran_ra_tb_t::~srsran_ra_tb_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_ra_tb_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_ra_tb_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_ra_tb_t::ArenaDtor(void* object) {
  srsran_ra_tb_t* _this = reinterpret_cast< srsran_ra_tb_t* >(object);
  (void)_this;
}
void srsran_ra_tb_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_ra_tb_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_ra_tb_t& srsran_ra_tb_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_ra_tb_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_ra_tb_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_ra_tb_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcs_idx_) -
      reinterpret_cast<char*>(&mod_)) + sizeof(mcs_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_ra_tb_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.srsran_mod_t mod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mod(static_cast<::fs::mac_rrc::srsran_mod_t>(val));
        } else goto handle_unusual;
        continue;
      // int32 tbs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_bits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nof_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cw_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mcs_idx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mcs_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_ra_tb_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_ra_tb_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_mod_t mod = 1;
  if (this->mod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mod(), target);
  }

  // int32 tbs = 2;
  if (this->tbs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tbs(), target);
  }

  // int32 rv = 3;
  if (this->rv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rv(), target);
  }

  // uint32 nof_bits = 4;
  if (this->nof_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nof_bits(), target);
  }

  // uint32 cw_idx = 5;
  if (this->cw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cw_idx(), target);
  }

  // bool enabled = 6;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // uint32 mcs_idx = 7;
  if (this->mcs_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mcs_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_ra_tb_t)
  return target;
}

size_t srsran_ra_tb_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_ra_tb_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_mod_t mod = 1;
  if (this->mod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mod());
  }

  // int32 tbs = 2;
  if (this->tbs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tbs());
  }

  // int32 rv = 3;
  if (this->rv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rv());
  }

  // uint32 nof_bits = 4;
  if (this->nof_bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_bits());
  }

  // uint32 cw_idx = 5;
  if (this->cw_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cw_idx());
  }

  // bool enabled = 6;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 mcs_idx = 7;
  if (this->mcs_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mcs_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_ra_tb_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_ra_tb_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_ra_tb_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_ra_tb_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_ra_tb_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_ra_tb_t)
    MergeFrom(*source);
  }
}

void srsran_ra_tb_t::MergeFrom(const srsran_ra_tb_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_ra_tb_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mod() != 0) {
    _internal_set_mod(from._internal_mod());
  }
  if (from.tbs() != 0) {
    _internal_set_tbs(from._internal_tbs());
  }
  if (from.rv() != 0) {
    _internal_set_rv(from._internal_rv());
  }
  if (from.nof_bits() != 0) {
    _internal_set_nof_bits(from._internal_nof_bits());
  }
  if (from.cw_idx() != 0) {
    _internal_set_cw_idx(from._internal_cw_idx());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.mcs_idx() != 0) {
    _internal_set_mcs_idx(from._internal_mcs_idx());
  }
}

void srsran_ra_tb_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_ra_tb_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_ra_tb_t::CopyFrom(const srsran_ra_tb_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_ra_tb_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_ra_tb_t::IsInitialized() const {
  return true;
}

void srsran_ra_tb_t::InternalSwap(srsran_ra_tb_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_ra_tb_t, mcs_idx_)
      + sizeof(srsran_ra_tb_t::mcs_idx_)
      - PROTOBUF_FIELD_OFFSET(srsran_ra_tb_t, mod_)>(
          reinterpret_cast<char*>(&mod_),
          reinterpret_cast<char*>(&other->mod_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_ra_tb_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_pdsch_grant_t::InitAsDefaultInstance() {
}
class srsran_pdsch_grant_t::_Internal {
 public:
};

srsran_pdsch_grant_t::srsran_pdsch_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prb_idx_(arena),
  nof_symb_slot_(arena),
  tb_(arena),
  last_tbs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_pdsch_grant_t)
}
srsran_pdsch_grant_t::srsran_pdsch_grant_t(const srsran_pdsch_grant_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prb_idx_(from.prb_idx_),
      nof_symb_slot_(from.nof_symb_slot_),
      tb_(from.tb_),
      last_tbs_(from.last_tbs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_scheme_, &from.tx_scheme_,
    static_cast<size_t>(reinterpret_cast<char*>(&nof_layers_) -
    reinterpret_cast<char*>(&tx_scheme_)) + sizeof(nof_layers_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_pdsch_grant_t)
}

void srsran_pdsch_grant_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&tx_scheme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_layers_) -
      reinterpret_cast<char*>(&tx_scheme_)) + sizeof(nof_layers_));
}

srsran_pdsch_grant_t::~srsran_pdsch_grant_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_pdsch_grant_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_pdsch_grant_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_pdsch_grant_t::ArenaDtor(void* object) {
  srsran_pdsch_grant_t* _this = reinterpret_cast< srsran_pdsch_grant_t* >(object);
  (void)_this;
}
void srsran_pdsch_grant_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_pdsch_grant_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_pdsch_grant_t& srsran_pdsch_grant_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_pdsch_grant_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_pdsch_grant_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_pdsch_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prb_idx_.Clear();
  nof_symb_slot_.Clear();
  tb_.Clear();
  last_tbs_.Clear();
  ::memset(&tx_scheme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_layers_) -
      reinterpret_cast<char*>(&tx_scheme_)) + sizeof(nof_layers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_pdsch_grant_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.srsran_tx_scheme_t tx_scheme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tx_scheme(static_cast<::fs::mac_rrc::srsran_tx_scheme_t>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pmi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool prb_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_prb_idx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_prb_idx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_prb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nof_prb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_re = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nof_re_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 nof_symb_slot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_nof_symb_slot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_nof_symb_slot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.srsran_ra_tb_t tb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 last_tbs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_last_tbs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_last_tbs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_tb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nof_tb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_layers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nof_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_pdsch_grant_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_pdsch_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_tx_scheme_t tx_scheme = 1;
  if (this->tx_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tx_scheme(), target);
  }

  // uint32 pmi = 2;
  if (this->pmi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pmi(), target);
  }

  // repeated bool prb_idx = 3;
  if (this->_internal_prb_idx_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_prb_idx(), target);
  }

  // uint32 nof_prb = 4;
  if (this->nof_prb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nof_prb(), target);
  }

  // uint32 nof_re = 5;
  if (this->nof_re() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nof_re(), target);
  }

  // repeated uint32 nof_symb_slot = 6;
  {
    int byte_size = _nof_symb_slot_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_nof_symb_slot(), byte_size, target);
    }
  }

  // repeated .fs.mac_rrc.srsran_ra_tb_t tb = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tb(i), target, stream);
  }

  // repeated int32 last_tbs = 8;
  {
    int byte_size = _last_tbs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_last_tbs(), byte_size, target);
    }
  }

  // uint32 nof_tb = 9;
  if (this->nof_tb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_nof_tb(), target);
  }

  // uint32 nof_layers = 10;
  if (this->nof_layers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_nof_layers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_pdsch_grant_t)
  return target;
}

size_t srsran_pdsch_grant_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_pdsch_grant_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool prb_idx = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_prb_idx_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _prb_idx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 nof_symb_slot = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->nof_symb_slot_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nof_symb_slot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .fs.mac_rrc.srsran_ra_tb_t tb = 7;
  total_size += 1UL * this->_internal_tb_size();
  for (const auto& msg : this->tb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 last_tbs = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->last_tbs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _last_tbs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .fs.mac_rrc.srsran_tx_scheme_t tx_scheme = 1;
  if (this->tx_scheme() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tx_scheme());
  }

  // uint32 pmi = 2;
  if (this->pmi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmi());
  }

  // uint32 nof_prb = 4;
  if (this->nof_prb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_prb());
  }

  // uint32 nof_re = 5;
  if (this->nof_re() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_re());
  }

  // uint32 nof_tb = 9;
  if (this->nof_tb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_tb());
  }

  // uint32 nof_layers = 10;
  if (this->nof_layers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_layers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_pdsch_grant_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_pdsch_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_pdsch_grant_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_pdsch_grant_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_pdsch_grant_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_pdsch_grant_t)
    MergeFrom(*source);
  }
}

void srsran_pdsch_grant_t::MergeFrom(const srsran_pdsch_grant_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_pdsch_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prb_idx_.MergeFrom(from.prb_idx_);
  nof_symb_slot_.MergeFrom(from.nof_symb_slot_);
  tb_.MergeFrom(from.tb_);
  last_tbs_.MergeFrom(from.last_tbs_);
  if (from.tx_scheme() != 0) {
    _internal_set_tx_scheme(from._internal_tx_scheme());
  }
  if (from.pmi() != 0) {
    _internal_set_pmi(from._internal_pmi());
  }
  if (from.nof_prb() != 0) {
    _internal_set_nof_prb(from._internal_nof_prb());
  }
  if (from.nof_re() != 0) {
    _internal_set_nof_re(from._internal_nof_re());
  }
  if (from.nof_tb() != 0) {
    _internal_set_nof_tb(from._internal_nof_tb());
  }
  if (from.nof_layers() != 0) {
    _internal_set_nof_layers(from._internal_nof_layers());
  }
}

void srsran_pdsch_grant_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_pdsch_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_pdsch_grant_t::CopyFrom(const srsran_pdsch_grant_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_pdsch_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_pdsch_grant_t::IsInitialized() const {
  return true;
}

void srsran_pdsch_grant_t::InternalSwap(srsran_pdsch_grant_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prb_idx_.InternalSwap(&other->prb_idx_);
  nof_symb_slot_.InternalSwap(&other->nof_symb_slot_);
  tb_.InternalSwap(&other->tb_);
  last_tbs_.InternalSwap(&other->last_tbs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_pdsch_grant_t, nof_layers_)
      + sizeof(srsran_pdsch_grant_t::nof_layers_)
      - PROTOBUF_FIELD_OFFSET(srsran_pdsch_grant_t, tx_scheme_)>(
          reinterpret_cast<char*>(&tx_scheme_),
          reinterpret_cast<char*>(&other->tx_scheme_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_pdsch_grant_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_cqi_report_cfg_t::InitAsDefaultInstance() {
}
class srsran_cqi_report_cfg_t::_Internal {
 public:
};

srsran_cqi_report_cfg_t::srsran_cqi_report_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_cqi_report_cfg_t)
}
srsran_cqi_report_cfg_t::srsran_cqi_report_cfg_t(const srsran_cqi_report_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pmi_idx_, &from.pmi_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&aperiodic_mode_) -
    reinterpret_cast<char*>(&pmi_idx_)) + sizeof(aperiodic_mode_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_cqi_report_cfg_t)
}

void srsran_cqi_report_cfg_t::SharedCtor() {
  ::memset(&pmi_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aperiodic_mode_) -
      reinterpret_cast<char*>(&pmi_idx_)) + sizeof(aperiodic_mode_));
}

srsran_cqi_report_cfg_t::~srsran_cqi_report_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_cqi_report_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_cqi_report_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_cqi_report_cfg_t::ArenaDtor(void* object) {
  srsran_cqi_report_cfg_t* _this = reinterpret_cast< srsran_cqi_report_cfg_t* >(object);
  (void)_this;
}
void srsran_cqi_report_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_cqi_report_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_cqi_report_cfg_t& srsran_cqi_report_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_cqi_report_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_cqi_report_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pmi_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aperiodic_mode_) -
      reinterpret_cast<char*>(&pmi_idx_)) + sizeof(aperiodic_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_cqi_report_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool periodic_configured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          periodic_configured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool aperiodic_configured = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aperiodic_configured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pmi_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pmi_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ri_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ri_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ri_idx_present = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ri_idx_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool format_is_subband = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          format_is_subband_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 subband_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          subband_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_cqi_report_mode_t periodic_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_periodic_mode(static_cast<::fs::mac_rrc::srsran_cqi_report_mode_t>(val));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_cqi_report_mode_t aperiodic_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aperiodic_mode(static_cast<::fs::mac_rrc::srsran_cqi_report_mode_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_cqi_report_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool periodic_configured = 1;
  if (this->periodic_configured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_periodic_configured(), target);
  }

  // bool aperiodic_configured = 2;
  if (this->aperiodic_configured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_aperiodic_configured(), target);
  }

  // uint32 pmi_idx = 3;
  if (this->pmi_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pmi_idx(), target);
  }

  // uint32 ri_idx = 4;
  if (this->ri_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ri_idx(), target);
  }

  // bool ri_idx_present = 5;
  if (this->ri_idx_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ri_idx_present(), target);
  }

  // bool format_is_subband = 6;
  if (this->format_is_subband() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_format_is_subband(), target);
  }

  // uint32 subband_size = 7;
  if (this->subband_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_subband_size(), target);
  }

  // .fs.mac_rrc.srsran_cqi_report_mode_t periodic_mode = 8;
  if (this->periodic_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_periodic_mode(), target);
  }

  // .fs.mac_rrc.srsran_cqi_report_mode_t aperiodic_mode = 9;
  if (this->aperiodic_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_aperiodic_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_cqi_report_cfg_t)
  return target;
}

size_t srsran_cqi_report_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pmi_idx = 3;
  if (this->pmi_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pmi_idx());
  }

  // bool periodic_configured = 1;
  if (this->periodic_configured() != 0) {
    total_size += 1 + 1;
  }

  // bool aperiodic_configured = 2;
  if (this->aperiodic_configured() != 0) {
    total_size += 1 + 1;
  }

  // bool ri_idx_present = 5;
  if (this->ri_idx_present() != 0) {
    total_size += 1 + 1;
  }

  // bool format_is_subband = 6;
  if (this->format_is_subband() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ri_idx = 4;
  if (this->ri_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ri_idx());
  }

  // uint32 subband_size = 7;
  if (this->subband_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subband_size());
  }

  // .fs.mac_rrc.srsran_cqi_report_mode_t periodic_mode = 8;
  if (this->periodic_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_periodic_mode());
  }

  // .fs.mac_rrc.srsran_cqi_report_mode_t aperiodic_mode = 9;
  if (this->aperiodic_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aperiodic_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_cqi_report_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_cqi_report_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_cqi_report_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_cqi_report_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_cqi_report_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_cqi_report_cfg_t::MergeFrom(const srsran_cqi_report_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pmi_idx() != 0) {
    _internal_set_pmi_idx(from._internal_pmi_idx());
  }
  if (from.periodic_configured() != 0) {
    _internal_set_periodic_configured(from._internal_periodic_configured());
  }
  if (from.aperiodic_configured() != 0) {
    _internal_set_aperiodic_configured(from._internal_aperiodic_configured());
  }
  if (from.ri_idx_present() != 0) {
    _internal_set_ri_idx_present(from._internal_ri_idx_present());
  }
  if (from.format_is_subband() != 0) {
    _internal_set_format_is_subband(from._internal_format_is_subband());
  }
  if (from.ri_idx() != 0) {
    _internal_set_ri_idx(from._internal_ri_idx());
  }
  if (from.subband_size() != 0) {
    _internal_set_subband_size(from._internal_subband_size());
  }
  if (from.periodic_mode() != 0) {
    _internal_set_periodic_mode(from._internal_periodic_mode());
  }
  if (from.aperiodic_mode() != 0) {
    _internal_set_aperiodic_mode(from._internal_aperiodic_mode());
  }
}

void srsran_cqi_report_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_cqi_report_cfg_t::CopyFrom(const srsran_cqi_report_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_cqi_report_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_cqi_report_cfg_t::IsInitialized() const {
  return true;
}

void srsran_cqi_report_cfg_t::InternalSwap(srsran_cqi_report_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_cqi_report_cfg_t, aperiodic_mode_)
      + sizeof(srsran_cqi_report_cfg_t::aperiodic_mode_)
      - PROTOBUF_FIELD_OFFSET(srsran_cqi_report_cfg_t, pmi_idx_)>(
          reinterpret_cast<char*>(&pmi_idx_),
          reinterpret_cast<char*>(&other->pmi_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_cqi_report_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_softbuffer_rx_t::InitAsDefaultInstance() {
}
class srsran_softbuffer_rx_t::_Internal {
 public:
};

srsran_softbuffer_rx_t::srsran_softbuffer_rx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buffer_f_(arena),
  data_(arena),
  cb_crc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_softbuffer_rx_t)
}
srsran_softbuffer_rx_t::srsran_softbuffer_rx_t(const srsran_softbuffer_rx_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_f_(from.buffer_f_),
      data_(from.data_),
      cb_crc_(from.cb_crc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_cb_, &from.max_cb_,
    static_cast<size_t>(reinterpret_cast<char*>(&tb_crc_) -
    reinterpret_cast<char*>(&max_cb_)) + sizeof(tb_crc_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_softbuffer_rx_t)
}

void srsran_softbuffer_rx_t::SharedCtor() {
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tb_crc_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(tb_crc_));
}

srsran_softbuffer_rx_t::~srsran_softbuffer_rx_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_softbuffer_rx_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_softbuffer_rx_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_softbuffer_rx_t::ArenaDtor(void* object) {
  srsran_softbuffer_rx_t* _this = reinterpret_cast< srsran_softbuffer_rx_t* >(object);
  (void)_this;
}
void srsran_softbuffer_rx_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_softbuffer_rx_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_softbuffer_rx_t& srsran_softbuffer_rx_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_softbuffer_rx_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_softbuffer_rx_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_f_.Clear();
  data_.Clear();
  cb_crc_.Clear();
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tb_crc_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(tb_crc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_softbuffer_rx_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_cb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_cb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_cb_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_cb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 buffer_f = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buffer_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_buffer_f(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool cb_crc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_cb_crc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_cb_crc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tb_crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tb_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_softbuffer_rx_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_cb(), target);
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_cb_size(), target);
  }

  // repeated int32 buffer_f = 3;
  {
    int byte_size = _buffer_f_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_buffer_f(), byte_size, target);
    }
  }

  // repeated uint32 data = 4;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_data(), byte_size, target);
    }
  }

  // repeated bool cb_crc = 5;
  if (this->_internal_cb_crc_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_cb_crc(), target);
  }

  // bool tb_crc = 6;
  if (this->tb_crc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_tb_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_softbuffer_rx_t)
  return target;
}

size_t srsran_softbuffer_rx_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 buffer_f = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buffer_f_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buffer_f_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 data = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool cb_crc = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cb_crc_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cb_crc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb());
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb_size());
  }

  // bool tb_crc = 6;
  if (this->tb_crc() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_softbuffer_rx_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_softbuffer_rx_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_softbuffer_rx_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_softbuffer_rx_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_softbuffer_rx_t)
    MergeFrom(*source);
  }
}

void srsran_softbuffer_rx_t::MergeFrom(const srsran_softbuffer_rx_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_f_.MergeFrom(from.buffer_f_);
  data_.MergeFrom(from.data_);
  cb_crc_.MergeFrom(from.cb_crc_);
  if (from.max_cb() != 0) {
    _internal_set_max_cb(from._internal_max_cb());
  }
  if (from.max_cb_size() != 0) {
    _internal_set_max_cb_size(from._internal_max_cb_size());
  }
  if (from.tb_crc() != 0) {
    _internal_set_tb_crc(from._internal_tb_crc());
  }
}

void srsran_softbuffer_rx_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_softbuffer_rx_t::CopyFrom(const srsran_softbuffer_rx_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_softbuffer_rx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_softbuffer_rx_t::IsInitialized() const {
  return true;
}

void srsran_softbuffer_rx_t::InternalSwap(srsran_softbuffer_rx_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buffer_f_.InternalSwap(&other->buffer_f_);
  data_.InternalSwap(&other->data_);
  cb_crc_.InternalSwap(&other->cb_crc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_softbuffer_rx_t, tb_crc_)
      + sizeof(srsran_softbuffer_rx_t::tb_crc_)
      - PROTOBUF_FIELD_OFFSET(srsran_softbuffer_rx_t, max_cb_)>(
          reinterpret_cast<char*>(&max_cb_),
          reinterpret_cast<char*>(&other->max_cb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_softbuffer_rx_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_softbuffer_tx_t::InitAsDefaultInstance() {
}
class srsran_softbuffer_tx_t::_Internal {
 public:
};

srsran_softbuffer_tx_t::srsran_softbuffer_tx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buffer_b_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_softbuffer_tx_t)
}
srsran_softbuffer_tx_t::srsran_softbuffer_tx_t(const srsran_softbuffer_tx_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_b_(from.buffer_b_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_cb_, &from.max_cb_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_cb_size_) -
    reinterpret_cast<char*>(&max_cb_)) + sizeof(max_cb_size_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_softbuffer_tx_t)
}

void srsran_softbuffer_tx_t::SharedCtor() {
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cb_size_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(max_cb_size_));
}

srsran_softbuffer_tx_t::~srsran_softbuffer_tx_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_softbuffer_tx_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_softbuffer_tx_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_softbuffer_tx_t::ArenaDtor(void* object) {
  srsran_softbuffer_tx_t* _this = reinterpret_cast< srsran_softbuffer_tx_t* >(object);
  (void)_this;
}
void srsran_softbuffer_tx_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_softbuffer_tx_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_softbuffer_tx_t& srsran_softbuffer_tx_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_softbuffer_tx_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_softbuffer_tx_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_b_.Clear();
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cb_size_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(max_cb_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_softbuffer_tx_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_cb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_cb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_cb_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_cb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 buffer_b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_buffer_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_buffer_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_softbuffer_tx_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_cb(), target);
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_cb_size(), target);
  }

  // repeated uint32 buffer_b = 3;
  {
    int byte_size = _buffer_b_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_buffer_b(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_softbuffer_tx_t)
  return target;
}

size_t srsran_softbuffer_tx_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 buffer_b = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->buffer_b_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buffer_b_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb());
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_softbuffer_tx_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_softbuffer_tx_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_softbuffer_tx_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_softbuffer_tx_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_softbuffer_tx_t)
    MergeFrom(*source);
  }
}

void srsran_softbuffer_tx_t::MergeFrom(const srsran_softbuffer_tx_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_b_.MergeFrom(from.buffer_b_);
  if (from.max_cb() != 0) {
    _internal_set_max_cb(from._internal_max_cb());
  }
  if (from.max_cb_size() != 0) {
    _internal_set_max_cb_size(from._internal_max_cb_size());
  }
}

void srsran_softbuffer_tx_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_softbuffer_tx_t::CopyFrom(const srsran_softbuffer_tx_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_softbuffer_tx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_softbuffer_tx_t::IsInitialized() const {
  return true;
}

void srsran_softbuffer_tx_t::InternalSwap(srsran_softbuffer_tx_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buffer_b_.InternalSwap(&other->buffer_b_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_softbuffer_tx_t, max_cb_size_)
      + sizeof(srsran_softbuffer_tx_t::max_cb_size_)
      - PROTOBUF_FIELD_OFFSET(srsran_softbuffer_tx_t, max_cb_)>(
          reinterpret_cast<char*>(&max_cb_),
          reinterpret_cast<char*>(&other->max_cb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_softbuffer_tx_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_pdsch_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_srsran_pdsch_cfg_t_default_instance_._instance.get_mutable()->grant_ = const_cast< ::fs::mac_rrc::srsran_pdsch_grant_t*>(
      ::fs::mac_rrc::srsran_pdsch_grant_t::internal_default_instance());
}
class srsran_pdsch_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_pdsch_grant_t& grant(const srsran_pdsch_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_pdsch_grant_t&
srsran_pdsch_cfg_t::_Internal::grant(const srsran_pdsch_cfg_t* msg) {
  return *msg->grant_;
}
srsran_pdsch_cfg_t::srsran_pdsch_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tx_(arena),
  rx_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_pdsch_cfg_t)
}
srsran_pdsch_cfg_t::srsran_pdsch_cfg_t(const srsran_pdsch_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tx_(from.tx_),
      rx_(from.rx_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grant()) {
    grant_ = new ::fs::mac_rrc::srsran_pdsch_grant_t(*from.grant_);
  } else {
    grant_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_time_value_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(meas_time_value_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_pdsch_cfg_t)
}

void srsran_pdsch_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&grant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_time_value_) -
      reinterpret_cast<char*>(&grant_)) + sizeof(meas_time_value_));
}

srsran_pdsch_cfg_t::~srsran_pdsch_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_pdsch_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_pdsch_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete grant_;
}

void srsran_pdsch_cfg_t::ArenaDtor(void* object) {
  srsran_pdsch_cfg_t* _this = reinterpret_cast< srsran_pdsch_cfg_t* >(object);
  (void)_this;
}
void srsran_pdsch_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_pdsch_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_pdsch_cfg_t& srsran_pdsch_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_pdsch_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_pdsch_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.Clear();
  rx_.Clear();
  if (GetArena() == nullptr && grant_ != nullptr) {
    delete grant_;
  }
  grant_ = nullptr;
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_time_value_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(meas_time_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_pdsch_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.srsran_pdsch_grant_t grant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rnti = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_nof_iterations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_nof_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_mimo_decoder_t decoder_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_decoder_type(static_cast<::fs::mac_rrc::srsran_mimo_decoder_t>(val));
        } else goto handle_unusual;
        continue;
      // float p_a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          p_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 p_b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          p_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rs_power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rs_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool power_scale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          power_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool csi_enable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          csi_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_tbs_index_alt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          use_tbs_index_alt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // bool meas_evm_en = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          meas_evm_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool meas_time_en = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          meas_time_en_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 meas_time_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          meas_time_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_pdsch_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_pdsch_grant_t grant = 1;
  if (this->has_grant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grant(this), target, stream);
  }

  // uint32 rnti = 2;
  if (this->rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rnti(), target);
  }

  // uint32 max_nof_iterations = 3;
  if (this->max_nof_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_nof_iterations(), target);
  }

  // .fs.mac_rrc.srsran_mimo_decoder_t decoder_type = 4;
  if (this->decoder_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_decoder_type(), target);
  }

  // float p_a = 5;
  if (!(this->p_a() <= 0 && this->p_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_p_a(), target);
  }

  // uint32 p_b = 6;
  if (this->p_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_p_b(), target);
  }

  // float rs_power = 7;
  if (!(this->rs_power() <= 0 && this->rs_power() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rs_power(), target);
  }

  // bool power_scale = 8;
  if (this->power_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_power_scale(), target);
  }

  // bool csi_enable = 9;
  if (this->csi_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_csi_enable(), target);
  }

  // bool use_tbs_index_alt = 10;
  if (this->use_tbs_index_alt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_tbs_index_alt(), target);
  }

  // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tx(i), target, stream);
  }

  // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_rx(i), target, stream);
  }

  // bool meas_evm_en = 13;
  if (this->meas_evm_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_meas_evm_en(), target);
  }

  // bool meas_time_en = 14;
  if (this->meas_time_en() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_meas_time_en(), target);
  }

  // uint32 meas_time_value = 15;
  if (this->meas_time_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_meas_time_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_pdsch_cfg_t)
  return target;
}

size_t srsran_pdsch_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.srsran_softbuffer_tx_t tx = 11;
  total_size += 1UL * this->_internal_tx_size();
  for (const auto& msg : this->tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_rrc.srsran_softbuffer_rx_t rx = 12;
  total_size += 1UL * this->_internal_rx_size();
  for (const auto& msg : this->rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.mac_rrc.srsran_pdsch_grant_t grant = 1;
  if (this->has_grant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grant_);
  }

  // uint32 rnti = 2;
  if (this->rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  // uint32 max_nof_iterations = 3;
  if (this->max_nof_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_nof_iterations());
  }

  // .fs.mac_rrc.srsran_mimo_decoder_t decoder_type = 4;
  if (this->decoder_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_decoder_type());
  }

  // float p_a = 5;
  if (!(this->p_a() <= 0 && this->p_a() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 p_b = 6;
  if (this->p_b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_b());
  }

  // float rs_power = 7;
  if (!(this->rs_power() <= 0 && this->rs_power() >= 0)) {
    total_size += 1 + 4;
  }

  // bool power_scale = 8;
  if (this->power_scale() != 0) {
    total_size += 1 + 1;
  }

  // bool csi_enable = 9;
  if (this->csi_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool use_tbs_index_alt = 10;
  if (this->use_tbs_index_alt() != 0) {
    total_size += 1 + 1;
  }

  // bool meas_evm_en = 13;
  if (this->meas_evm_en() != 0) {
    total_size += 1 + 1;
  }

  // bool meas_time_en = 14;
  if (this->meas_time_en() != 0) {
    total_size += 1 + 1;
  }

  // uint32 meas_time_value = 15;
  if (this->meas_time_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meas_time_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_pdsch_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_pdsch_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_pdsch_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_pdsch_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_pdsch_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_pdsch_cfg_t::MergeFrom(const srsran_pdsch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_.MergeFrom(from.tx_);
  rx_.MergeFrom(from.rx_);
  if (from.has_grant()) {
    _internal_mutable_grant()->::fs::mac_rrc::srsran_pdsch_grant_t::MergeFrom(from._internal_grant());
  }
  if (from.rnti() != 0) {
    _internal_set_rnti(from._internal_rnti());
  }
  if (from.max_nof_iterations() != 0) {
    _internal_set_max_nof_iterations(from._internal_max_nof_iterations());
  }
  if (from.decoder_type() != 0) {
    _internal_set_decoder_type(from._internal_decoder_type());
  }
  if (!(from.p_a() <= 0 && from.p_a() >= 0)) {
    _internal_set_p_a(from._internal_p_a());
  }
  if (from.p_b() != 0) {
    _internal_set_p_b(from._internal_p_b());
  }
  if (!(from.rs_power() <= 0 && from.rs_power() >= 0)) {
    _internal_set_rs_power(from._internal_rs_power());
  }
  if (from.power_scale() != 0) {
    _internal_set_power_scale(from._internal_power_scale());
  }
  if (from.csi_enable() != 0) {
    _internal_set_csi_enable(from._internal_csi_enable());
  }
  if (from.use_tbs_index_alt() != 0) {
    _internal_set_use_tbs_index_alt(from._internal_use_tbs_index_alt());
  }
  if (from.meas_evm_en() != 0) {
    _internal_set_meas_evm_en(from._internal_meas_evm_en());
  }
  if (from.meas_time_en() != 0) {
    _internal_set_meas_time_en(from._internal_meas_time_en());
  }
  if (from.meas_time_value() != 0) {
    _internal_set_meas_time_value(from._internal_meas_time_value());
  }
}

void srsran_pdsch_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_pdsch_cfg_t::CopyFrom(const srsran_pdsch_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_pdsch_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_pdsch_cfg_t::IsInitialized() const {
  return true;
}

void srsran_pdsch_cfg_t::InternalSwap(srsran_pdsch_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_.InternalSwap(&other->tx_);
  rx_.InternalSwap(&other->rx_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_pdsch_cfg_t, meas_time_value_)
      + sizeof(srsran_pdsch_cfg_t::meas_time_value_)
      - PROTOBUF_FIELD_OFFSET(srsran_pdsch_cfg_t, grant_)>(
          reinterpret_cast<char*>(&grant_),
          reinterpret_cast<char*>(&other->grant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_pdsch_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_dl_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_srsran_dl_cfg_t_default_instance_._instance.get_mutable()->cqi_report_ = const_cast< ::fs::mac_rrc::srsran_cqi_report_cfg_t*>(
      ::fs::mac_rrc::srsran_cqi_report_cfg_t::internal_default_instance());
  ::fs::mac_rrc::_srsran_dl_cfg_t_default_instance_._instance.get_mutable()->pdsch_ = const_cast< ::fs::mac_rrc::srsran_pdsch_cfg_t*>(
      ::fs::mac_rrc::srsran_pdsch_cfg_t::internal_default_instance());
  ::fs::mac_rrc::_srsran_dl_cfg_t_default_instance_._instance.get_mutable()->dci_ = const_cast< ::fs::mac_rrc::srsran_dci_cfg_t*>(
      ::fs::mac_rrc::srsran_dci_cfg_t::internal_default_instance());
}
class srsran_dl_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_cqi_report_cfg_t& cqi_report(const srsran_dl_cfg_t* msg);
  static const ::fs::mac_rrc::srsran_pdsch_cfg_t& pdsch(const srsran_dl_cfg_t* msg);
  static const ::fs::mac_rrc::srsran_dci_cfg_t& dci(const srsran_dl_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_cqi_report_cfg_t&
srsran_dl_cfg_t::_Internal::cqi_report(const srsran_dl_cfg_t* msg) {
  return *msg->cqi_report_;
}
const ::fs::mac_rrc::srsran_pdsch_cfg_t&
srsran_dl_cfg_t::_Internal::pdsch(const srsran_dl_cfg_t* msg) {
  return *msg->pdsch_;
}
const ::fs::mac_rrc::srsran_dci_cfg_t&
srsran_dl_cfg_t::_Internal::dci(const srsran_dl_cfg_t* msg) {
  return *msg->dci_;
}
srsran_dl_cfg_t::srsran_dl_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.srsran_dl_cfg_t)
}
srsran_dl_cfg_t::srsran_dl_cfg_t(const srsran_dl_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cqi_report()) {
    cqi_report_ = new ::fs::mac_rrc::srsran_cqi_report_cfg_t(*from.cqi_report_);
  } else {
    cqi_report_ = nullptr;
  }
  if (from._internal_has_pdsch()) {
    pdsch_ = new ::fs::mac_rrc::srsran_pdsch_cfg_t(*from.pdsch_);
  } else {
    pdsch_ = nullptr;
  }
  if (from._internal_has_dci()) {
    dci_ = new ::fs::mac_rrc::srsran_dci_cfg_t(*from.dci_);
  } else {
    dci_ = nullptr;
  }
  ::memcpy(&tm_, &from.tm_,
    static_cast<size_t>(reinterpret_cast<char*>(&dci_common_ss_) -
    reinterpret_cast<char*>(&tm_)) + sizeof(dci_common_ss_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.srsran_dl_cfg_t)
}

void srsran_dl_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&cqi_report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dci_common_ss_) -
      reinterpret_cast<char*>(&cqi_report_)) + sizeof(dci_common_ss_));
}

srsran_dl_cfg_t::~srsran_dl_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.srsran_dl_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_dl_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cqi_report_;
  if (this != internal_default_instance()) delete pdsch_;
  if (this != internal_default_instance()) delete dci_;
}

void srsran_dl_cfg_t::ArenaDtor(void* object) {
  srsran_dl_cfg_t* _this = reinterpret_cast< srsran_dl_cfg_t* >(object);
  (void)_this;
}
void srsran_dl_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_dl_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_dl_cfg_t& srsran_dl_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_dl_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void srsran_dl_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.srsran_dl_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cqi_report_ != nullptr) {
    delete cqi_report_;
  }
  cqi_report_ = nullptr;
  if (GetArena() == nullptr && pdsch_ != nullptr) {
    delete pdsch_;
  }
  pdsch_ = nullptr;
  if (GetArena() == nullptr && dci_ != nullptr) {
    delete dci_;
  }
  dci_ = nullptr;
  ::memset(&tm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dci_common_ss_) -
      reinterpret_cast<char*>(&tm_)) + sizeof(dci_common_ss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_dl_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_rrc.srsran_cqi_report_cfg_t cqi_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cqi_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_pdsch_cfg_t pdsch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pdsch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_dci_cfg_t dci = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_tm_t tm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tm(static_cast<::fs::mac_rrc::srsran_tm_t>(val));
        } else goto handle_unusual;
        continue;
      // bool dci_common_ss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dci_common_ss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_dl_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.srsran_dl_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_cqi_report_cfg_t cqi_report = 1;
  if (this->has_cqi_report()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cqi_report(this), target, stream);
  }

  // .fs.mac_rrc.srsran_pdsch_cfg_t pdsch = 2;
  if (this->has_pdsch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pdsch(this), target, stream);
  }

  // .fs.mac_rrc.srsran_dci_cfg_t dci = 3;
  if (this->has_dci()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dci(this), target, stream);
  }

  // .fs.mac_rrc.srsran_tm_t tm = 4;
  if (this->tm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tm(), target);
  }

  // bool dci_common_ss = 5;
  if (this->dci_common_ss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dci_common_ss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.srsran_dl_cfg_t)
  return target;
}

size_t srsran_dl_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.srsran_dl_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_cqi_report_cfg_t cqi_report = 1;
  if (this->has_cqi_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cqi_report_);
  }

  // .fs.mac_rrc.srsran_pdsch_cfg_t pdsch = 2;
  if (this->has_pdsch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pdsch_);
  }

  // .fs.mac_rrc.srsran_dci_cfg_t dci = 3;
  if (this->has_dci()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dci_);
  }

  // .fs.mac_rrc.srsran_tm_t tm = 4;
  if (this->tm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tm());
  }

  // bool dci_common_ss = 5;
  if (this->dci_common_ss() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_dl_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.srsran_dl_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_dl_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_dl_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.srsran_dl_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.srsran_dl_cfg_t)
    MergeFrom(*source);
  }
}

void srsran_dl_cfg_t::MergeFrom(const srsran_dl_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.srsran_dl_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cqi_report()) {
    _internal_mutable_cqi_report()->::fs::mac_rrc::srsran_cqi_report_cfg_t::MergeFrom(from._internal_cqi_report());
  }
  if (from.has_pdsch()) {
    _internal_mutable_pdsch()->::fs::mac_rrc::srsran_pdsch_cfg_t::MergeFrom(from._internal_pdsch());
  }
  if (from.has_dci()) {
    _internal_mutable_dci()->::fs::mac_rrc::srsran_dci_cfg_t::MergeFrom(from._internal_dci());
  }
  if (from.tm() != 0) {
    _internal_set_tm(from._internal_tm());
  }
  if (from.dci_common_ss() != 0) {
    _internal_set_dci_common_ss(from._internal_dci_common_ss());
  }
}

void srsran_dl_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.srsran_dl_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_dl_cfg_t::CopyFrom(const srsran_dl_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.srsran_dl_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_dl_cfg_t::IsInitialized() const {
  return true;
}

void srsran_dl_cfg_t::InternalSwap(srsran_dl_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_dl_cfg_t, dci_common_ss_)
      + sizeof(srsran_dl_cfg_t::dci_common_ss_)
      - PROTOBUF_FIELD_OFFSET(srsran_dl_cfg_t, cqi_report_)>(
          reinterpret_cast<char*>(&cqi_report_),
          reinterpret_cast<char*>(&other->cqi_report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_dl_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cc_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_cc_cfg_t_default_instance_._instance.get_mutable()->dl_cfg_ = const_cast< ::fs::mac_rrc::srsran_dl_cfg_t*>(
      ::fs::mac_rrc::srsran_dl_cfg_t::internal_default_instance());
}
class cc_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_dl_cfg_t& dl_cfg(const cc_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_dl_cfg_t&
cc_cfg_t::_Internal::dl_cfg(const cc_cfg_t* msg) {
  return *msg->dl_cfg_;
}
cc_cfg_t::cc_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.cc_cfg_t)
}
cc_cfg_t::cc_cfg_t(const cc_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dl_cfg()) {
    dl_cfg_ = new ::fs::mac_rrc::srsran_dl_cfg_t(*from.dl_cfg_);
  } else {
    dl_cfg_ = nullptr;
  }
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&aperiodic_cqi_period_) -
    reinterpret_cast<char*>(&active_)) + sizeof(aperiodic_cqi_period_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.cc_cfg_t)
}

void cc_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&dl_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aperiodic_cqi_period_) -
      reinterpret_cast<char*>(&dl_cfg_)) + sizeof(aperiodic_cqi_period_));
}

cc_cfg_t::~cc_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.cc_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cc_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dl_cfg_;
}

void cc_cfg_t::ArenaDtor(void* object) {
  cc_cfg_t* _this = reinterpret_cast< cc_cfg_t* >(object);
  (void)_this;
}
void cc_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cc_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cc_cfg_t& cc_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cc_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void cc_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.cc_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dl_cfg_ != nullptr) {
    delete dl_cfg_;
  }
  dl_cfg_ = nullptr;
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aperiodic_cqi_period_) -
      reinterpret_cast<char*>(&active_)) + sizeof(aperiodic_cqi_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cc_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enb_cc_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enb_cc_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 aperiodic_cqi_period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          aperiodic_cqi_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cc_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.cc_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // uint32 enb_cc_idx = 2;
  if (this->enb_cc_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enb_cc_idx(), target);
  }

  // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 3;
  if (this->has_dl_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dl_cfg(this), target, stream);
  }

  // uint32 aperiodic_cqi_period = 4;
  if (this->aperiodic_cqi_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_aperiodic_cqi_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.cc_cfg_t)
  return target;
}

size_t cc_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.cc_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.mac_rrc.srsran_dl_cfg_t dl_cfg = 3;
  if (this->has_dl_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dl_cfg_);
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // uint32 enb_cc_idx = 2;
  if (this->enb_cc_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enb_cc_idx());
  }

  // uint32 aperiodic_cqi_period = 4;
  if (this->aperiodic_cqi_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aperiodic_cqi_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cc_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.cc_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const cc_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cc_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.cc_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.cc_cfg_t)
    MergeFrom(*source);
  }
}

void cc_cfg_t::MergeFrom(const cc_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.cc_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dl_cfg()) {
    _internal_mutable_dl_cfg()->::fs::mac_rrc::srsran_dl_cfg_t::MergeFrom(from._internal_dl_cfg());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.enb_cc_idx() != 0) {
    _internal_set_enb_cc_idx(from._internal_enb_cc_idx());
  }
  if (from.aperiodic_cqi_period() != 0) {
    _internal_set_aperiodic_cqi_period(from._internal_aperiodic_cqi_period());
  }
}

void cc_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.cc_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cc_cfg_t::CopyFrom(const cc_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.cc_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cc_cfg_t::IsInitialized() const {
  return true;
}

void cc_cfg_t::InternalSwap(cc_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cc_cfg_t, aperiodic_cqi_period_)
      + sizeof(cc_cfg_t::aperiodic_cqi_period_)
      - PROTOBUF_FIELD_OFFSET(cc_cfg_t, dl_cfg_)>(
          reinterpret_cast<char*>(&dl_cfg_),
          reinterpret_cast<char*>(&other->dl_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cc_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ue_cfg_t::InitAsDefaultInstance() {
  ::fs::mac_rrc::_ue_cfg_t_default_instance_._instance.get_mutable()->uci_offset_ = const_cast< ::fs::mac_rrc::srsran_uci_offset_cfg_t*>(
      ::fs::mac_rrc::srsran_uci_offset_cfg_t::internal_default_instance());
  ::fs::mac_rrc::_ue_cfg_t_default_instance_._instance.get_mutable()->pucch_cfg_ = const_cast< ::fs::mac_rrc::srsran_pucch_cfg_t*>(
      ::fs::mac_rrc::srsran_pucch_cfg_t::internal_default_instance());
  ::fs::mac_rrc::_ue_cfg_t_default_instance_._instance.get_mutable()->dl_ant_info_ = const_cast< ::fs::mac_rrc::ant_info_ded_t*>(
      ::fs::mac_rrc::ant_info_ded_t::internal_default_instance());
}
class ue_cfg_t::_Internal {
 public:
  static const ::fs::mac_rrc::srsran_uci_offset_cfg_t& uci_offset(const ue_cfg_t* msg);
  static const ::fs::mac_rrc::srsran_pucch_cfg_t& pucch_cfg(const ue_cfg_t* msg);
  static const ::fs::mac_rrc::ant_info_ded_t& dl_ant_info(const ue_cfg_t* msg);
};

const ::fs::mac_rrc::srsran_uci_offset_cfg_t&
ue_cfg_t::_Internal::uci_offset(const ue_cfg_t* msg) {
  return *msg->uci_offset_;
}
const ::fs::mac_rrc::srsran_pucch_cfg_t&
ue_cfg_t::_Internal::pucch_cfg(const ue_cfg_t* msg) {
  return *msg->pucch_cfg_;
}
const ::fs::mac_rrc::ant_info_ded_t&
ue_cfg_t::_Internal::dl_ant_info(const ue_cfg_t* msg) {
  return *msg->dl_ant_info_;
}
ue_cfg_t::ue_cfg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ue_bearers_(arena),
  supported_cc_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_rrc.ue_cfg_t)
}
ue_cfg_t::ue_cfg_t(const ue_cfg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ue_bearers_(from.ue_bearers_),
      supported_cc_list_(from.supported_cc_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uci_offset()) {
    uci_offset_ = new ::fs::mac_rrc::srsran_uci_offset_cfg_t(*from.uci_offset_);
  } else {
    uci_offset_ = nullptr;
  }
  if (from._internal_has_pucch_cfg()) {
    pucch_cfg_ = new ::fs::mac_rrc::srsran_pucch_cfg_t(*from.pucch_cfg_);
  } else {
    pucch_cfg_ = nullptr;
  }
  if (from._internal_has_dl_ant_info()) {
    dl_ant_info_ = new ::fs::mac_rrc::ant_info_ded_t(*from.dl_ant_info_);
  } else {
    dl_ant_info_ = nullptr;
  }
  ::memcpy(&maxharq_tx_, &from.maxharq_tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&support_ul64qam_) -
    reinterpret_cast<char*>(&maxharq_tx_)) + sizeof(support_ul64qam_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_rrc.ue_cfg_t)
}

void ue_cfg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ue_cfg_t_ue_5fcfg_5ft_2eproto.base);
  ::memset(&uci_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&support_ul64qam_) -
      reinterpret_cast<char*>(&uci_offset_)) + sizeof(support_ul64qam_));
}

ue_cfg_t::~ue_cfg_t() {
  // @@protoc_insertion_point(destructor:fs.mac_rrc.ue_cfg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ue_cfg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uci_offset_;
  if (this != internal_default_instance()) delete pucch_cfg_;
  if (this != internal_default_instance()) delete dl_ant_info_;
}

void ue_cfg_t::ArenaDtor(void* object) {
  ue_cfg_t* _this = reinterpret_cast< ue_cfg_t* >(object);
  (void)_this;
}
void ue_cfg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ue_cfg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ue_cfg_t& ue_cfg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ue_cfg_t_ue_5fcfg_5ft_2eproto.base);
  return *internal_default_instance();
}


void ue_cfg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_rrc.ue_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_bearers_.Clear();
  supported_cc_list_.Clear();
  if (GetArena() == nullptr && uci_offset_ != nullptr) {
    delete uci_offset_;
  }
  uci_offset_ = nullptr;
  if (GetArena() == nullptr && pucch_cfg_ != nullptr) {
    delete pucch_cfg_;
  }
  pucch_cfg_ = nullptr;
  if (GetArena() == nullptr && dl_ant_info_ != nullptr) {
    delete dl_ant_info_;
  }
  dl_ant_info_ = nullptr;
  ::memset(&maxharq_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&support_ul64qam_) -
      reinterpret_cast<char*>(&maxharq_tx_)) + sizeof(support_ul64qam_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ue_cfg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 maxharq_tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxharq_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool continuous_pusch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          continuous_pusch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uci_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.srsran_pucch_cfg_t pucch_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pucch_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.ue_bearer_cfg_t ue_bearers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_bearers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_rrc.cc_cfg_t supported_cc_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supported_cc_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.ant_info_ded_t dl_ant_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl_ant_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_tbs_index_alt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          use_tbs_index_alt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 measgap_period = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          measgap_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 measgap_offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          measgap_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_rrc.UL64QAM_CAP support_ul64qam = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_support_ul64qam(static_cast<::fs::mac_rrc::UL64QAM_CAP>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ue_cfg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_rrc.ue_cfg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maxharq_tx = 1;
  if (this->maxharq_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxharq_tx(), target);
  }

  // bool continuous_pusch = 2;
  if (this->continuous_pusch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_continuous_pusch(), target);
  }

  // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 3;
  if (this->has_uci_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uci_offset(this), target, stream);
  }

  // .fs.mac_rrc.srsran_pucch_cfg_t pucch_cfg = 4;
  if (this->has_pucch_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pucch_cfg(this), target, stream);
  }

  // repeated .fs.mac_rrc.ue_bearer_cfg_t ue_bearers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ue_bearers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ue_bearers(i), target, stream);
  }

  // repeated .fs.mac_rrc.cc_cfg_t supported_cc_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supported_cc_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_supported_cc_list(i), target, stream);
  }

  // .fs.mac_rrc.ant_info_ded_t dl_ant_info = 7;
  if (this->has_dl_ant_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dl_ant_info(this), target, stream);
  }

  // bool use_tbs_index_alt = 8;
  if (this->use_tbs_index_alt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_tbs_index_alt(), target);
  }

  // uint32 measgap_period = 9;
  if (this->measgap_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_measgap_period(), target);
  }

  // uint32 measgap_offset = 10;
  if (this->measgap_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_measgap_offset(), target);
  }

  // .fs.mac_rrc.UL64QAM_CAP support_ul64qam = 11;
  if (this->support_ul64qam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_support_ul64qam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_rrc.ue_cfg_t)
  return target;
}

size_t ue_cfg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_rrc.ue_cfg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_rrc.ue_bearer_cfg_t ue_bearers = 5;
  total_size += 1UL * this->_internal_ue_bearers_size();
  for (const auto& msg : this->ue_bearers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_rrc.cc_cfg_t supported_cc_list = 6;
  total_size += 1UL * this->_internal_supported_cc_list_size();
  for (const auto& msg : this->supported_cc_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fs.mac_rrc.srsran_uci_offset_cfg_t uci_offset = 3;
  if (this->has_uci_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uci_offset_);
  }

  // .fs.mac_rrc.srsran_pucch_cfg_t pucch_cfg = 4;
  if (this->has_pucch_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pucch_cfg_);
  }

  // .fs.mac_rrc.ant_info_ded_t dl_ant_info = 7;
  if (this->has_dl_ant_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dl_ant_info_);
  }

  // uint32 maxharq_tx = 1;
  if (this->maxharq_tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxharq_tx());
  }

  // bool continuous_pusch = 2;
  if (this->continuous_pusch() != 0) {
    total_size += 1 + 1;
  }

  // bool use_tbs_index_alt = 8;
  if (this->use_tbs_index_alt() != 0) {
    total_size += 1 + 1;
  }

  // uint32 measgap_period = 9;
  if (this->measgap_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_measgap_period());
  }

  // uint32 measgap_offset = 10;
  if (this->measgap_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_measgap_offset());
  }

  // .fs.mac_rrc.UL64QAM_CAP support_ul64qam = 11;
  if (this->support_ul64qam() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_support_ul64qam());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ue_cfg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_rrc.ue_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ue_cfg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ue_cfg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_rrc.ue_cfg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_rrc.ue_cfg_t)
    MergeFrom(*source);
  }
}

void ue_cfg_t::MergeFrom(const ue_cfg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_rrc.ue_cfg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ue_bearers_.MergeFrom(from.ue_bearers_);
  supported_cc_list_.MergeFrom(from.supported_cc_list_);
  if (from.has_uci_offset()) {
    _internal_mutable_uci_offset()->::fs::mac_rrc::srsran_uci_offset_cfg_t::MergeFrom(from._internal_uci_offset());
  }
  if (from.has_pucch_cfg()) {
    _internal_mutable_pucch_cfg()->::fs::mac_rrc::srsran_pucch_cfg_t::MergeFrom(from._internal_pucch_cfg());
  }
  if (from.has_dl_ant_info()) {
    _internal_mutable_dl_ant_info()->::fs::mac_rrc::ant_info_ded_t::MergeFrom(from._internal_dl_ant_info());
  }
  if (from.maxharq_tx() != 0) {
    _internal_set_maxharq_tx(from._internal_maxharq_tx());
  }
  if (from.continuous_pusch() != 0) {
    _internal_set_continuous_pusch(from._internal_continuous_pusch());
  }
  if (from.use_tbs_index_alt() != 0) {
    _internal_set_use_tbs_index_alt(from._internal_use_tbs_index_alt());
  }
  if (from.measgap_period() != 0) {
    _internal_set_measgap_period(from._internal_measgap_period());
  }
  if (from.measgap_offset() != 0) {
    _internal_set_measgap_offset(from._internal_measgap_offset());
  }
  if (from.support_ul64qam() != 0) {
    _internal_set_support_ul64qam(from._internal_support_ul64qam());
  }
}

void ue_cfg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_rrc.ue_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ue_cfg_t::CopyFrom(const ue_cfg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_rrc.ue_cfg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ue_cfg_t::IsInitialized() const {
  return true;
}

void ue_cfg_t::InternalSwap(ue_cfg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ue_bearers_.InternalSwap(&other->ue_bearers_);
  supported_cc_list_.InternalSwap(&other->supported_cc_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ue_cfg_t, support_ul64qam_)
      + sizeof(ue_cfg_t::support_ul64qam_)
      - PROTOBUF_FIELD_OFFSET(ue_cfg_t, uci_offset_)>(
          reinterpret_cast<char*>(&uci_offset_),
          reinterpret_cast<char*>(&other->uci_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ue_cfg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mac_rrc
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::ant_info_ded_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::ant_info_ded_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::ant_info_ded_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::ue_bearer_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::ue_bearer_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::ue_bearer_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_cqi_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_cqi_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_cqi_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_uci_cfg_ack_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_uci_cfg_ack_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_uci_cfg_ack_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_uci_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_uci_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_uci_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_pucch_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_pucch_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_pucch_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_uci_offset_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_uci_offset_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_uci_offset_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_dci_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_dci_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_dci_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_ra_tb_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_ra_tb_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_ra_tb_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_pdsch_grant_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_pdsch_grant_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_pdsch_grant_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_cqi_report_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_cqi_report_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_cqi_report_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_softbuffer_rx_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_softbuffer_rx_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_softbuffer_rx_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_softbuffer_tx_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_softbuffer_tx_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_softbuffer_tx_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_pdsch_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_pdsch_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_pdsch_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::srsran_dl_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::srsran_dl_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::srsran_dl_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::cc_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::cc_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::cc_cfg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_rrc::ue_cfg_t* Arena::CreateMaybeMessage< ::fs::mac_rrc::ue_cfg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_rrc::ue_cfg_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
