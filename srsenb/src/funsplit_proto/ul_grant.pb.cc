// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ul_grant.proto

#include "srsenb/hdr/funsplit_proto/ul_grant.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_raw_buffer_ul_5fgrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_dci_ul_t_ul_5fgrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ul_sched_ack_t_ul_5fgrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ul_sched_grant_t_ul_5fgrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ul_5fgrant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ul_sched_t_ul_5fgrant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_location_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_dci_tb_t_phy_5fmac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phy_5fmac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_srsran_ra_type2_t_phy_5fmac_2eproto;
namespace fs {
namespace mac_phy {
class srsran_dci_ul_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_dci_ul_t> _instance;
} _srsran_dci_ul_t_default_instance_;
class ul_sched_ack_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ul_sched_ack_t> _instance;
} _ul_sched_ack_t_default_instance_;
class raw_bufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<raw_buffer> _instance;
} _raw_buffer_default_instance_;
class srsran_softbuffer_rx_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<srsran_softbuffer_rx_t> _instance;
} _srsran_softbuffer_rx_t_default_instance_;
class ul_sched_grant_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ul_sched_grant_t> _instance;
} _ul_sched_grant_t_default_instance_;
class ul_sched_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ul_sched_t> _instance;
} _ul_sched_t_default_instance_;
class ul_sched_list_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ul_sched_list_t> _instance;
} _ul_sched_list_t_default_instance_;
}  // namespace mac_phy
}  // namespace fs
static void InitDefaultsscc_info_raw_buffer_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_raw_buffer_default_instance_;
    new (ptr) ::fs::mac_phy::raw_buffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::raw_buffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_raw_buffer_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_raw_buffer_ul_5fgrant_2eproto}, {}};

static void InitDefaultsscc_info_srsran_dci_ul_t_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_srsran_dci_ul_t_default_instance_;
    new (ptr) ::fs::mac_phy::srsran_dci_ul_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::srsran_dci_ul_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_srsran_dci_ul_t_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_srsran_dci_ul_t_ul_5fgrant_2eproto}, {
      &scc_info_srsran_dci_location_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_ra_type2_t_phy_5fmac_2eproto.base,
      &scc_info_srsran_dci_tb_t_phy_5fmac_2eproto.base,}};

static void InitDefaultsscc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_srsran_softbuffer_rx_t_default_instance_;
    new (ptr) ::fs::mac_phy::srsran_softbuffer_rx_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::srsran_softbuffer_rx_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto}, {
      &scc_info_raw_buffer_ul_5fgrant_2eproto.base,}};

static void InitDefaultsscc_info_ul_sched_ack_t_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_ul_sched_ack_t_default_instance_;
    new (ptr) ::fs::mac_phy::ul_sched_ack_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::ul_sched_ack_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ul_sched_ack_t_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ul_sched_ack_t_ul_5fgrant_2eproto}, {}};

static void InitDefaultsscc_info_ul_sched_grant_t_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_ul_sched_grant_t_default_instance_;
    new (ptr) ::fs::mac_phy::ul_sched_grant_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::ul_sched_grant_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ul_sched_grant_t_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ul_sched_grant_t_ul_5fgrant_2eproto}, {
      &scc_info_srsran_dci_ul_t_ul_5fgrant_2eproto.base,
      &scc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto.base,}};

static void InitDefaultsscc_info_ul_sched_list_t_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_ul_sched_list_t_default_instance_;
    new (ptr) ::fs::mac_phy::ul_sched_list_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::ul_sched_list_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ul_sched_list_t_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ul_sched_list_t_ul_5fgrant_2eproto}, {
      &scc_info_ul_sched_t_ul_5fgrant_2eproto.base,}};

static void InitDefaultsscc_info_ul_sched_t_ul_5fgrant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::mac_phy::_ul_sched_t_default_instance_;
    new (ptr) ::fs::mac_phy::ul_sched_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::mac_phy::ul_sched_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ul_sched_t_ul_5fgrant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ul_sched_t_ul_5fgrant_2eproto}, {
      &scc_info_ul_sched_grant_t_ul_5fgrant_2eproto.base,
      &scc_info_ul_sched_ack_t_ul_5fgrant_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ul_5fgrant_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ul_5fgrant_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ul_5fgrant_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ul_5fgrant_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, cqi_request_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, is_tdd_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, cif_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, multiple_csi_request_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, srs_request_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, srs_request_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, ra_type_present_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, rnti_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, ue_cc_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, n_dmrs_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, dai_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, ul_idx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, tpc_pusch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, cif_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, multiple_csi_request_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, freq_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, format_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, location_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, type2_alloc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, tb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_dci_ul_t, ra_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_ack_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_ack_t, ack_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_ack_t, rnti_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::raw_buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::raw_buffer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, max_cb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, max_cb_size_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, buffer_f_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, data_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, cb_crc_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::srsran_softbuffer_rx_t, tb_crc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, dci_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, pid_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, current_tx_nb_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, data_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, needs_pdcch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, softbuffer_rx_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_grant_t, data_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_t, pusch_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_t, phich_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_t, nof_grants_),
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_t, nof_phich_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_list_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fs::mac_phy::ul_sched_list_t, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fs::mac_phy::srsran_dci_ul_t)},
  { 26, -1, sizeof(::fs::mac_phy::ul_sched_ack_t)},
  { 33, -1, sizeof(::fs::mac_phy::raw_buffer)},
  { 39, -1, sizeof(::fs::mac_phy::srsran_softbuffer_rx_t)},
  { 50, -1, sizeof(::fs::mac_phy::ul_sched_grant_t)},
  { 62, -1, sizeof(::fs::mac_phy::ul_sched_t)},
  { 71, -1, sizeof(::fs::mac_phy::ul_sched_list_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_srsran_dci_ul_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_ul_sched_ack_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_raw_buffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_srsran_softbuffer_rx_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_ul_sched_grant_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_ul_sched_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fs::mac_phy::_ul_sched_list_t_default_instance_),
};

const char descriptor_table_protodef_ul_5fgrant_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ul_grant.proto\022\nfs.mac_phy\032\rphy_mac.pr"
  "oto\"\211\004\n\017srsran_dci_ul_t\022\023\n\013cqi_request\030\001"
  " \001(\010\022\016\n\006is_tdd\030\002 \001(\010\022\023\n\013cif_present\030\003 \001("
  "\010\022$\n\034multiple_csi_request_present\030\004 \001(\010\022"
  "\023\n\013srs_request\030\005 \001(\010\022\033\n\023srs_request_pres"
  "ent\030\006 \001(\010\022\027\n\017ra_type_present\030\007 \001(\010\022\014\n\004rn"
  "ti\030\010 \001(\r\022\021\n\tue_cc_idx\030\t \001(\r\022\016\n\006n_dmrs\030\n "
  "\001(\r\022\013\n\003dai\030\013 \001(\r\022\016\n\006ul_idx\030\014 \001(\r\022\021\n\ttpc_"
  "pusch\030\r \001(\r\022\013\n\003cif\030\016 \001(\r\022\034\n\024multiple_csi"
  "_request\030\017 \001(\r\022\014\n\004freq\030\020 \001(\005\022\016\n\006format\030\021"
  " \001(\005\0223\n\010location\030\022 \001(\0132!.fs.phy_mac.srsr"
  "an_dci_location_t\0222\n\013type2_alloc\030\023 \001(\0132\035"
  ".fs.phy_mac.srsran_ra_type2_t\022\'\n\002tb\030\024 \001("
  "\0132\033.fs.phy_mac.srsran_dci_tb_t\022\017\n\007ra_typ"
  "e\030\025 \001(\005\"+\n\016ul_sched_ack_t\022\013\n\003ack\030\001 \001(\010\022\014"
  "\n\004rnti\030\002 \001(\r\"\032\n\nraw_buffer\022\014\n\004data\030\001 \001(\014"
  "\"\255\001\n\026srsran_softbuffer_rx_t\022\016\n\006max_cb\030\001 "
  "\001(\r\022\023\n\013max_cb_size\030\002 \001(\r\022(\n\010buffer_f\030\003 \003"
  "(\0132\026.fs.mac_phy.raw_buffer\022$\n\004data\030\004 \003(\013"
  "2\026.fs.mac_phy.raw_buffer\022\016\n\006cb_crc\030\005 \003(\010"
  "\022\016\n\006tb_crc\030\006 \001(\010\"\320\001\n\020ul_sched_grant_t\022(\n"
  "\003dci\030\001 \001(\0132\033.fs.mac_phy.srsran_dci_ul_t\022"
  "\013\n\003pid\030\002 \001(\r\022\025\n\rcurrent_tx_nb\030\003 \001(\r\022\014\n\004d"
  "ata\030\004 \001(\014\022\023\n\013needs_pdcch\030\005 \001(\010\0229\n\rsoftbu"
  "ffer_rx\030\006 \001(\0132\".fs.mac_phy.srsran_softbu"
  "ffer_rx_t\022\020\n\010data_len\030\007 \001(\r\"\213\001\n\nul_sched"
  "_t\022+\n\005pusch\030\001 \003(\0132\034.fs.mac_phy.ul_sched_"
  "grant_t\022)\n\005phich\030\002 \003(\0132\032.fs.mac_phy.ul_s"
  "ched_ack_t\022\022\n\nnof_grants\030\003 \001(\r\022\021\n\tnof_ph"
  "ich\030\004 \001(\r\"7\n\017ul_sched_list_t\022$\n\004list\030\001 \003"
  "(\0132\026.fs.mac_phy.ul_sched_tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ul_5fgrant_2eproto_deps[1] = {
  &::descriptor_table_phy_5fmac_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ul_5fgrant_2eproto_sccs[7] = {
  &scc_info_raw_buffer_ul_5fgrant_2eproto.base,
  &scc_info_srsran_dci_ul_t_ul_5fgrant_2eproto.base,
  &scc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto.base,
  &scc_info_ul_sched_ack_t_ul_5fgrant_2eproto.base,
  &scc_info_ul_sched_grant_t_ul_5fgrant_2eproto.base,
  &scc_info_ul_sched_list_t_ul_5fgrant_2eproto.base,
  &scc_info_ul_sched_t_ul_5fgrant_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ul_5fgrant_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ul_5fgrant_2eproto = {
  false, false, descriptor_table_protodef_ul_5fgrant_2eproto, "ul_grant.proto", 1234,
  &descriptor_table_ul_5fgrant_2eproto_once, descriptor_table_ul_5fgrant_2eproto_sccs, descriptor_table_ul_5fgrant_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_ul_5fgrant_2eproto::offsets,
  file_level_metadata_ul_5fgrant_2eproto, 7, file_level_enum_descriptors_ul_5fgrant_2eproto, file_level_service_descriptors_ul_5fgrant_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ul_5fgrant_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ul_5fgrant_2eproto)), true);
namespace fs {
namespace mac_phy {

// ===================================================================

void srsran_dci_ul_t::InitAsDefaultInstance() {
  ::fs::mac_phy::_srsran_dci_ul_t_default_instance_._instance.get_mutable()->location_ = const_cast< ::fs::phy_mac::srsran_dci_location_t*>(
      ::fs::phy_mac::srsran_dci_location_t::internal_default_instance());
  ::fs::mac_phy::_srsran_dci_ul_t_default_instance_._instance.get_mutable()->type2_alloc_ = const_cast< ::fs::phy_mac::srsran_ra_type2_t*>(
      ::fs::phy_mac::srsran_ra_type2_t::internal_default_instance());
  ::fs::mac_phy::_srsran_dci_ul_t_default_instance_._instance.get_mutable()->tb_ = const_cast< ::fs::phy_mac::srsran_dci_tb_t*>(
      ::fs::phy_mac::srsran_dci_tb_t::internal_default_instance());
}
class srsran_dci_ul_t::_Internal {
 public:
  static const ::fs::phy_mac::srsran_dci_location_t& location(const srsran_dci_ul_t* msg);
  static const ::fs::phy_mac::srsran_ra_type2_t& type2_alloc(const srsran_dci_ul_t* msg);
  static const ::fs::phy_mac::srsran_dci_tb_t& tb(const srsran_dci_ul_t* msg);
};

const ::fs::phy_mac::srsran_dci_location_t&
srsran_dci_ul_t::_Internal::location(const srsran_dci_ul_t* msg) {
  return *msg->location_;
}
const ::fs::phy_mac::srsran_ra_type2_t&
srsran_dci_ul_t::_Internal::type2_alloc(const srsran_dci_ul_t* msg) {
  return *msg->type2_alloc_;
}
const ::fs::phy_mac::srsran_dci_tb_t&
srsran_dci_ul_t::_Internal::tb(const srsran_dci_ul_t* msg) {
  return *msg->tb_;
}
void srsran_dci_ul_t::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
void srsran_dci_ul_t::clear_type2_alloc() {
  if (GetArena() == nullptr && type2_alloc_ != nullptr) {
    delete type2_alloc_;
  }
  type2_alloc_ = nullptr;
}
void srsran_dci_ul_t::clear_tb() {
  if (GetArena() == nullptr && tb_ != nullptr) {
    delete tb_;
  }
  tb_ = nullptr;
}
srsran_dci_ul_t::srsran_dci_ul_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.srsran_dci_ul_t)
}
srsran_dci_ul_t::srsran_dci_ul_t(const srsran_dci_ul_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::fs::phy_mac::srsran_dci_location_t(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_type2_alloc()) {
    type2_alloc_ = new ::fs::phy_mac::srsran_ra_type2_t(*from.type2_alloc_);
  } else {
    type2_alloc_ = nullptr;
  }
  if (from._internal_has_tb()) {
    tb_ = new ::fs::phy_mac::srsran_dci_tb_t(*from.tb_);
  } else {
    tb_ = nullptr;
  }
  ::memcpy(&cqi_request_, &from.cqi_request_,
    static_cast<size_t>(reinterpret_cast<char*>(&ra_type_) -
    reinterpret_cast<char*>(&cqi_request_)) + sizeof(ra_type_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.srsran_dci_ul_t)
}

void srsran_dci_ul_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_dci_ul_t_ul_5fgrant_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ra_type_) -
      reinterpret_cast<char*>(&location_)) + sizeof(ra_type_));
}

srsran_dci_ul_t::~srsran_dci_ul_t() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.srsran_dci_ul_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_dci_ul_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete type2_alloc_;
  if (this != internal_default_instance()) delete tb_;
}

void srsran_dci_ul_t::ArenaDtor(void* object) {
  srsran_dci_ul_t* _this = reinterpret_cast< srsran_dci_ul_t* >(object);
  (void)_this;
}
void srsran_dci_ul_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_dci_ul_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_dci_ul_t& srsran_dci_ul_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_dci_ul_t_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void srsran_dci_ul_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.srsran_dci_ul_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && type2_alloc_ != nullptr) {
    delete type2_alloc_;
  }
  type2_alloc_ = nullptr;
  if (GetArena() == nullptr && tb_ != nullptr) {
    delete tb_;
  }
  tb_ = nullptr;
  ::memset(&cqi_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ra_type_) -
      reinterpret_cast<char*>(&cqi_request_)) + sizeof(ra_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_dci_ul_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool cqi_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cqi_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_tdd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_tdd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cif_present = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cif_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool multiple_csi_request_present = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          multiple_csi_request_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool srs_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          srs_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool srs_request_present = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          srs_request_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ra_type_present = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ra_type_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rnti = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ue_cc_idx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ue_cc_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_dmrs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          n_dmrs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dai = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          dai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ul_idx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ul_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tpc_pusch = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          tpc_pusch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cif = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          cif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 multiple_csi_request = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          multiple_csi_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 freq = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_dci_location_t location = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_type2_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.phy_mac.srsran_dci_tb_t tb = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ra_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ra_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_dci_ul_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.srsran_dci_ul_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cqi_request = 1;
  if (this->cqi_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cqi_request(), target);
  }

  // bool is_tdd = 2;
  if (this->is_tdd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_tdd(), target);
  }

  // bool cif_present = 3;
  if (this->cif_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cif_present(), target);
  }

  // bool multiple_csi_request_present = 4;
  if (this->multiple_csi_request_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_multiple_csi_request_present(), target);
  }

  // bool srs_request = 5;
  if (this->srs_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_srs_request(), target);
  }

  // bool srs_request_present = 6;
  if (this->srs_request_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_srs_request_present(), target);
  }

  // bool ra_type_present = 7;
  if (this->ra_type_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ra_type_present(), target);
  }

  // uint32 rnti = 8;
  if (this->rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rnti(), target);
  }

  // uint32 ue_cc_idx = 9;
  if (this->ue_cc_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ue_cc_idx(), target);
  }

  // uint32 n_dmrs = 10;
  if (this->n_dmrs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_n_dmrs(), target);
  }

  // uint32 dai = 11;
  if (this->dai() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_dai(), target);
  }

  // uint32 ul_idx = 12;
  if (this->ul_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ul_idx(), target);
  }

  // uint32 tpc_pusch = 13;
  if (this->tpc_pusch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tpc_pusch(), target);
  }

  // uint32 cif = 14;
  if (this->cif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_cif(), target);
  }

  // uint32 multiple_csi_request = 15;
  if (this->multiple_csi_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_multiple_csi_request(), target);
  }

  // int32 freq = 16;
  if (this->freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_freq(), target);
  }

  // int32 format = 17;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_format(), target);
  }

  // .fs.phy_mac.srsran_dci_location_t location = 18;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::location(this), target, stream);
  }

  // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 19;
  if (this->has_type2_alloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::type2_alloc(this), target, stream);
  }

  // .fs.phy_mac.srsran_dci_tb_t tb = 20;
  if (this->has_tb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::tb(this), target, stream);
  }

  // int32 ra_type = 21;
  if (this->ra_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_ra_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.srsran_dci_ul_t)
  return target;
}

size_t srsran_dci_ul_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.srsran_dci_ul_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.phy_mac.srsran_dci_location_t location = 18;
  if (this->has_location()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .fs.phy_mac.srsran_ra_type2_t type2_alloc = 19;
  if (this->has_type2_alloc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type2_alloc_);
  }

  // .fs.phy_mac.srsran_dci_tb_t tb = 20;
  if (this->has_tb()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tb_);
  }

  // bool cqi_request = 1;
  if (this->cqi_request() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tdd = 2;
  if (this->is_tdd() != 0) {
    total_size += 1 + 1;
  }

  // bool cif_present = 3;
  if (this->cif_present() != 0) {
    total_size += 1 + 1;
  }

  // bool multiple_csi_request_present = 4;
  if (this->multiple_csi_request_present() != 0) {
    total_size += 1 + 1;
  }

  // bool srs_request = 5;
  if (this->srs_request() != 0) {
    total_size += 1 + 1;
  }

  // bool srs_request_present = 6;
  if (this->srs_request_present() != 0) {
    total_size += 1 + 1;
  }

  // bool ra_type_present = 7;
  if (this->ra_type_present() != 0) {
    total_size += 1 + 1;
  }

  // uint32 rnti = 8;
  if (this->rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  // uint32 ue_cc_idx = 9;
  if (this->ue_cc_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ue_cc_idx());
  }

  // uint32 n_dmrs = 10;
  if (this->n_dmrs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_dmrs());
  }

  // uint32 dai = 11;
  if (this->dai() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dai());
  }

  // uint32 ul_idx = 12;
  if (this->ul_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ul_idx());
  }

  // uint32 tpc_pusch = 13;
  if (this->tpc_pusch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tpc_pusch());
  }

  // uint32 cif = 14;
  if (this->cif() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cif());
  }

  // uint32 multiple_csi_request = 15;
  if (this->multiple_csi_request() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_multiple_csi_request());
  }

  // int32 freq = 16;
  if (this->freq() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_freq());
  }

  // int32 format = 17;
  if (this->format() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // int32 ra_type = 21;
  if (this->ra_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ra_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_dci_ul_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.srsran_dci_ul_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_dci_ul_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_dci_ul_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.srsran_dci_ul_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.srsran_dci_ul_t)
    MergeFrom(*source);
  }
}

void srsran_dci_ul_t::MergeFrom(const srsran_dci_ul_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.srsran_dci_ul_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::fs::phy_mac::srsran_dci_location_t::MergeFrom(from._internal_location());
  }
  if (from.has_type2_alloc()) {
    _internal_mutable_type2_alloc()->::fs::phy_mac::srsran_ra_type2_t::MergeFrom(from._internal_type2_alloc());
  }
  if (from.has_tb()) {
    _internal_mutable_tb()->::fs::phy_mac::srsran_dci_tb_t::MergeFrom(from._internal_tb());
  }
  if (from.cqi_request() != 0) {
    _internal_set_cqi_request(from._internal_cqi_request());
  }
  if (from.is_tdd() != 0) {
    _internal_set_is_tdd(from._internal_is_tdd());
  }
  if (from.cif_present() != 0) {
    _internal_set_cif_present(from._internal_cif_present());
  }
  if (from.multiple_csi_request_present() != 0) {
    _internal_set_multiple_csi_request_present(from._internal_multiple_csi_request_present());
  }
  if (from.srs_request() != 0) {
    _internal_set_srs_request(from._internal_srs_request());
  }
  if (from.srs_request_present() != 0) {
    _internal_set_srs_request_present(from._internal_srs_request_present());
  }
  if (from.ra_type_present() != 0) {
    _internal_set_ra_type_present(from._internal_ra_type_present());
  }
  if (from.rnti() != 0) {
    _internal_set_rnti(from._internal_rnti());
  }
  if (from.ue_cc_idx() != 0) {
    _internal_set_ue_cc_idx(from._internal_ue_cc_idx());
  }
  if (from.n_dmrs() != 0) {
    _internal_set_n_dmrs(from._internal_n_dmrs());
  }
  if (from.dai() != 0) {
    _internal_set_dai(from._internal_dai());
  }
  if (from.ul_idx() != 0) {
    _internal_set_ul_idx(from._internal_ul_idx());
  }
  if (from.tpc_pusch() != 0) {
    _internal_set_tpc_pusch(from._internal_tpc_pusch());
  }
  if (from.cif() != 0) {
    _internal_set_cif(from._internal_cif());
  }
  if (from.multiple_csi_request() != 0) {
    _internal_set_multiple_csi_request(from._internal_multiple_csi_request());
  }
  if (from.freq() != 0) {
    _internal_set_freq(from._internal_freq());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.ra_type() != 0) {
    _internal_set_ra_type(from._internal_ra_type());
  }
}

void srsran_dci_ul_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.srsran_dci_ul_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_dci_ul_t::CopyFrom(const srsran_dci_ul_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.srsran_dci_ul_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_dci_ul_t::IsInitialized() const {
  return true;
}

void srsran_dci_ul_t::InternalSwap(srsran_dci_ul_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_dci_ul_t, ra_type_)
      + sizeof(srsran_dci_ul_t::ra_type_)
      - PROTOBUF_FIELD_OFFSET(srsran_dci_ul_t, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_dci_ul_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ul_sched_ack_t::InitAsDefaultInstance() {
}
class ul_sched_ack_t::_Internal {
 public:
};

ul_sched_ack_t::ul_sched_ack_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.ul_sched_ack_t)
}
ul_sched_ack_t::ul_sched_ack_t(const ul_sched_ack_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ack_, &from.ack_,
    static_cast<size_t>(reinterpret_cast<char*>(&rnti_) -
    reinterpret_cast<char*>(&ack_)) + sizeof(rnti_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.ul_sched_ack_t)
}

void ul_sched_ack_t::SharedCtor() {
  ::memset(&ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rnti_) -
      reinterpret_cast<char*>(&ack_)) + sizeof(rnti_));
}

ul_sched_ack_t::~ul_sched_ack_t() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.ul_sched_ack_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ul_sched_ack_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ul_sched_ack_t::ArenaDtor(void* object) {
  ul_sched_ack_t* _this = reinterpret_cast< ul_sched_ack_t* >(object);
  (void)_this;
}
void ul_sched_ack_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ul_sched_ack_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ul_sched_ack_t& ul_sched_ack_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ul_sched_ack_t_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void ul_sched_ack_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.ul_sched_ack_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rnti_) -
      reinterpret_cast<char*>(&ack_)) + sizeof(rnti_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ul_sched_ack_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rnti = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ul_sched_ack_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.ul_sched_ack_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ack = 1;
  if (this->ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ack(), target);
  }

  // uint32 rnti = 2;
  if (this->rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rnti(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.ul_sched_ack_t)
  return target;
}

size_t ul_sched_ack_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.ul_sched_ack_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ack = 1;
  if (this->ack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 rnti = 2;
  if (this->rnti() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ul_sched_ack_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.ul_sched_ack_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ul_sched_ack_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ul_sched_ack_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.ul_sched_ack_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.ul_sched_ack_t)
    MergeFrom(*source);
  }
}

void ul_sched_ack_t::MergeFrom(const ul_sched_ack_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.ul_sched_ack_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ack() != 0) {
    _internal_set_ack(from._internal_ack());
  }
  if (from.rnti() != 0) {
    _internal_set_rnti(from._internal_rnti());
  }
}

void ul_sched_ack_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.ul_sched_ack_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ul_sched_ack_t::CopyFrom(const ul_sched_ack_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.ul_sched_ack_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ul_sched_ack_t::IsInitialized() const {
  return true;
}

void ul_sched_ack_t::InternalSwap(ul_sched_ack_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ul_sched_ack_t, rnti_)
      + sizeof(ul_sched_ack_t::rnti_)
      - PROTOBUF_FIELD_OFFSET(ul_sched_ack_t, ack_)>(
          reinterpret_cast<char*>(&ack_),
          reinterpret_cast<char*>(&other->ack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ul_sched_ack_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void raw_buffer::InitAsDefaultInstance() {
}
class raw_buffer::_Internal {
 public:
};

raw_buffer::raw_buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.raw_buffer)
}
raw_buffer::raw_buffer(const raw_buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.raw_buffer)
}

void raw_buffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_raw_buffer_ul_5fgrant_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

raw_buffer::~raw_buffer() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.raw_buffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void raw_buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void raw_buffer::ArenaDtor(void* object) {
  raw_buffer* _this = reinterpret_cast< raw_buffer* >(object);
  (void)_this;
}
void raw_buffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void raw_buffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const raw_buffer& raw_buffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_raw_buffer_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void raw_buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.raw_buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* raw_buffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* raw_buffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.raw_buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.raw_buffer)
  return target;
}

size_t raw_buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.raw_buffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void raw_buffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.raw_buffer)
  GOOGLE_DCHECK_NE(&from, this);
  const raw_buffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<raw_buffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.raw_buffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.raw_buffer)
    MergeFrom(*source);
  }
}

void raw_buffer::MergeFrom(const raw_buffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.raw_buffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void raw_buffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.raw_buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raw_buffer::CopyFrom(const raw_buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.raw_buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raw_buffer::IsInitialized() const {
  return true;
}

void raw_buffer::InternalSwap(raw_buffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata raw_buffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void srsran_softbuffer_rx_t::InitAsDefaultInstance() {
}
class srsran_softbuffer_rx_t::_Internal {
 public:
};

srsran_softbuffer_rx_t::srsran_softbuffer_rx_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buffer_f_(arena),
  data_(arena),
  cb_crc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.srsran_softbuffer_rx_t)
}
srsran_softbuffer_rx_t::srsran_softbuffer_rx_t(const srsran_softbuffer_rx_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_f_(from.buffer_f_),
      data_(from.data_),
      cb_crc_(from.cb_crc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_cb_, &from.max_cb_,
    static_cast<size_t>(reinterpret_cast<char*>(&tb_crc_) -
    reinterpret_cast<char*>(&max_cb_)) + sizeof(tb_crc_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.srsran_softbuffer_rx_t)
}

void srsran_softbuffer_rx_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto.base);
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tb_crc_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(tb_crc_));
}

srsran_softbuffer_rx_t::~srsran_softbuffer_rx_t() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.srsran_softbuffer_rx_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void srsran_softbuffer_rx_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void srsran_softbuffer_rx_t::ArenaDtor(void* object) {
  srsran_softbuffer_rx_t* _this = reinterpret_cast< srsran_softbuffer_rx_t* >(object);
  (void)_this;
}
void srsran_softbuffer_rx_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void srsran_softbuffer_rx_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const srsran_softbuffer_rx_t& srsran_softbuffer_rx_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_srsran_softbuffer_rx_t_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void srsran_softbuffer_rx_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.srsran_softbuffer_rx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_f_.Clear();
  data_.Clear();
  cb_crc_.Clear();
  ::memset(&max_cb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tb_crc_) -
      reinterpret_cast<char*>(&max_cb_)) + sizeof(tb_crc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srsran_softbuffer_rx_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_cb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_cb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_cb_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_cb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_phy.raw_buffer buffer_f = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer_f(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_phy.raw_buffer data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bool cb_crc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_cb_crc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_cb_crc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tb_crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tb_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* srsran_softbuffer_rx_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.srsran_softbuffer_rx_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_cb(), target);
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_cb_size(), target);
  }

  // repeated .fs.mac_phy.raw_buffer buffer_f = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buffer_f_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buffer_f(i), target, stream);
  }

  // repeated .fs.mac_phy.raw_buffer data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data(i), target, stream);
  }

  // repeated bool cb_crc = 5;
  if (this->_internal_cb_crc_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_cb_crc(), target);
  }

  // bool tb_crc = 6;
  if (this->tb_crc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_tb_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.srsran_softbuffer_rx_t)
  return target;
}

size_t srsran_softbuffer_rx_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.srsran_softbuffer_rx_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_phy.raw_buffer buffer_f = 3;
  total_size += 1UL * this->_internal_buffer_f_size();
  for (const auto& msg : this->buffer_f_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_phy.raw_buffer data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool cb_crc = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cb_crc_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cb_crc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 max_cb = 1;
  if (this->max_cb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb());
  }

  // uint32 max_cb_size = 2;
  if (this->max_cb_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cb_size());
  }

  // bool tb_crc = 6;
  if (this->tb_crc() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srsran_softbuffer_rx_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.srsran_softbuffer_rx_t)
  GOOGLE_DCHECK_NE(&from, this);
  const srsran_softbuffer_rx_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<srsran_softbuffer_rx_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.srsran_softbuffer_rx_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.srsran_softbuffer_rx_t)
    MergeFrom(*source);
  }
}

void srsran_softbuffer_rx_t::MergeFrom(const srsran_softbuffer_rx_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.srsran_softbuffer_rx_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_f_.MergeFrom(from.buffer_f_);
  data_.MergeFrom(from.data_);
  cb_crc_.MergeFrom(from.cb_crc_);
  if (from.max_cb() != 0) {
    _internal_set_max_cb(from._internal_max_cb());
  }
  if (from.max_cb_size() != 0) {
    _internal_set_max_cb_size(from._internal_max_cb_size());
  }
  if (from.tb_crc() != 0) {
    _internal_set_tb_crc(from._internal_tb_crc());
  }
}

void srsran_softbuffer_rx_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.srsran_softbuffer_rx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srsran_softbuffer_rx_t::CopyFrom(const srsran_softbuffer_rx_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.srsran_softbuffer_rx_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srsran_softbuffer_rx_t::IsInitialized() const {
  return true;
}

void srsran_softbuffer_rx_t::InternalSwap(srsran_softbuffer_rx_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buffer_f_.InternalSwap(&other->buffer_f_);
  data_.InternalSwap(&other->data_);
  cb_crc_.InternalSwap(&other->cb_crc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srsran_softbuffer_rx_t, tb_crc_)
      + sizeof(srsran_softbuffer_rx_t::tb_crc_)
      - PROTOBUF_FIELD_OFFSET(srsran_softbuffer_rx_t, max_cb_)>(
          reinterpret_cast<char*>(&max_cb_),
          reinterpret_cast<char*>(&other->max_cb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srsran_softbuffer_rx_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ul_sched_grant_t::InitAsDefaultInstance() {
  ::fs::mac_phy::_ul_sched_grant_t_default_instance_._instance.get_mutable()->dci_ = const_cast< ::fs::mac_phy::srsran_dci_ul_t*>(
      ::fs::mac_phy::srsran_dci_ul_t::internal_default_instance());
  ::fs::mac_phy::_ul_sched_grant_t_default_instance_._instance.get_mutable()->softbuffer_rx_ = const_cast< ::fs::mac_phy::srsran_softbuffer_rx_t*>(
      ::fs::mac_phy::srsran_softbuffer_rx_t::internal_default_instance());
}
class ul_sched_grant_t::_Internal {
 public:
  static const ::fs::mac_phy::srsran_dci_ul_t& dci(const ul_sched_grant_t* msg);
  static const ::fs::mac_phy::srsran_softbuffer_rx_t& softbuffer_rx(const ul_sched_grant_t* msg);
};

const ::fs::mac_phy::srsran_dci_ul_t&
ul_sched_grant_t::_Internal::dci(const ul_sched_grant_t* msg) {
  return *msg->dci_;
}
const ::fs::mac_phy::srsran_softbuffer_rx_t&
ul_sched_grant_t::_Internal::softbuffer_rx(const ul_sched_grant_t* msg) {
  return *msg->softbuffer_rx_;
}
ul_sched_grant_t::ul_sched_grant_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.ul_sched_grant_t)
}
ul_sched_grant_t::ul_sched_grant_t(const ul_sched_grant_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_dci()) {
    dci_ = new ::fs::mac_phy::srsran_dci_ul_t(*from.dci_);
  } else {
    dci_ = nullptr;
  }
  if (from._internal_has_softbuffer_rx()) {
    softbuffer_rx_ = new ::fs::mac_phy::srsran_softbuffer_rx_t(*from.softbuffer_rx_);
  } else {
    softbuffer_rx_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_len_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(data_len_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.ul_sched_grant_t)
}

void ul_sched_grant_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ul_sched_grant_t_ul_5fgrant_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dci_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&dci_)) + sizeof(data_len_));
}

ul_sched_grant_t::~ul_sched_grant_t() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.ul_sched_grant_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ul_sched_grant_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dci_;
  if (this != internal_default_instance()) delete softbuffer_rx_;
}

void ul_sched_grant_t::ArenaDtor(void* object) {
  ul_sched_grant_t* _this = reinterpret_cast< ul_sched_grant_t* >(object);
  (void)_this;
}
void ul_sched_grant_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ul_sched_grant_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ul_sched_grant_t& ul_sched_grant_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ul_sched_grant_t_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void ul_sched_grant_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.ul_sched_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && dci_ != nullptr) {
    delete dci_;
  }
  dci_ = nullptr;
  if (GetArena() == nullptr && softbuffer_rx_ != nullptr) {
    delete softbuffer_rx_;
  }
  softbuffer_rx_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(data_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ul_sched_grant_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fs.mac_phy.srsran_dci_ul_t dci = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_tx_nb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_tx_nb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool needs_pdcch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          needs_pdcch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fs.mac_phy.srsran_softbuffer_rx_t softbuffer_rx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_softbuffer_rx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_len = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ul_sched_grant_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.ul_sched_grant_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.mac_phy.srsran_dci_ul_t dci = 1;
  if (this->has_dci()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dci(this), target, stream);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 current_tx_nb = 3;
  if (this->current_tx_nb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_tx_nb(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // bool needs_pdcch = 5;
  if (this->needs_pdcch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_needs_pdcch(), target);
  }

  // .fs.mac_phy.srsran_softbuffer_rx_t softbuffer_rx = 6;
  if (this->has_softbuffer_rx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::softbuffer_rx(this), target, stream);
  }

  // uint32 data_len = 7;
  if (this->data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.ul_sched_grant_t)
  return target;
}

size_t ul_sched_grant_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.ul_sched_grant_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .fs.mac_phy.srsran_dci_ul_t dci = 1;
  if (this->has_dci()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dci_);
  }

  // .fs.mac_phy.srsran_softbuffer_rx_t softbuffer_rx = 6;
  if (this->has_softbuffer_rx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *softbuffer_rx_);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 current_tx_nb = 3;
  if (this->current_tx_nb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_tx_nb());
  }

  // bool needs_pdcch = 5;
  if (this->needs_pdcch() != 0) {
    total_size += 1 + 1;
  }

  // uint32 data_len = 7;
  if (this->data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ul_sched_grant_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.ul_sched_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ul_sched_grant_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ul_sched_grant_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.ul_sched_grant_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.ul_sched_grant_t)
    MergeFrom(*source);
  }
}

void ul_sched_grant_t::MergeFrom(const ul_sched_grant_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.ul_sched_grant_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_dci()) {
    _internal_mutable_dci()->::fs::mac_phy::srsran_dci_ul_t::MergeFrom(from._internal_dci());
  }
  if (from.has_softbuffer_rx()) {
    _internal_mutable_softbuffer_rx()->::fs::mac_phy::srsran_softbuffer_rx_t::MergeFrom(from._internal_softbuffer_rx());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.current_tx_nb() != 0) {
    _internal_set_current_tx_nb(from._internal_current_tx_nb());
  }
  if (from.needs_pdcch() != 0) {
    _internal_set_needs_pdcch(from._internal_needs_pdcch());
  }
  if (from.data_len() != 0) {
    _internal_set_data_len(from._internal_data_len());
  }
}

void ul_sched_grant_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.ul_sched_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ul_sched_grant_t::CopyFrom(const ul_sched_grant_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.ul_sched_grant_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ul_sched_grant_t::IsInitialized() const {
  return true;
}

void ul_sched_grant_t::InternalSwap(ul_sched_grant_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ul_sched_grant_t, data_len_)
      + sizeof(ul_sched_grant_t::data_len_)
      - PROTOBUF_FIELD_OFFSET(ul_sched_grant_t, dci_)>(
          reinterpret_cast<char*>(&dci_),
          reinterpret_cast<char*>(&other->dci_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ul_sched_grant_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ul_sched_t::InitAsDefaultInstance() {
}
class ul_sched_t::_Internal {
 public:
};

ul_sched_t::ul_sched_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pusch_(arena),
  phich_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.ul_sched_t)
}
ul_sched_t::ul_sched_t(const ul_sched_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pusch_(from.pusch_),
      phich_(from.phich_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nof_grants_, &from.nof_grants_,
    static_cast<size_t>(reinterpret_cast<char*>(&nof_phich_) -
    reinterpret_cast<char*>(&nof_grants_)) + sizeof(nof_phich_));
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.ul_sched_t)
}

void ul_sched_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ul_sched_t_ul_5fgrant_2eproto.base);
  ::memset(&nof_grants_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_phich_) -
      reinterpret_cast<char*>(&nof_grants_)) + sizeof(nof_phich_));
}

ul_sched_t::~ul_sched_t() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.ul_sched_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ul_sched_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ul_sched_t::ArenaDtor(void* object) {
  ul_sched_t* _this = reinterpret_cast< ul_sched_t* >(object);
  (void)_this;
}
void ul_sched_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ul_sched_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ul_sched_t& ul_sched_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ul_sched_t_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void ul_sched_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.ul_sched_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pusch_.Clear();
  phich_.Clear();
  ::memset(&nof_grants_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nof_phich_) -
      reinterpret_cast<char*>(&nof_grants_)) + sizeof(nof_phich_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ul_sched_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fs.mac_phy.ul_sched_grant_t pusch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pusch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fs.mac_phy.ul_sched_ack_t phich = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phich(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 nof_grants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nof_grants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nof_phich = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nof_phich_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ul_sched_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.ul_sched_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.mac_phy.ul_sched_grant_t pusch = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pusch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pusch(i), target, stream);
  }

  // repeated .fs.mac_phy.ul_sched_ack_t phich = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phich_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_phich(i), target, stream);
  }

  // uint32 nof_grants = 3;
  if (this->nof_grants() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nof_grants(), target);
  }

  // uint32 nof_phich = 4;
  if (this->nof_phich() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nof_phich(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.ul_sched_t)
  return target;
}

size_t ul_sched_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.ul_sched_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_phy.ul_sched_grant_t pusch = 1;
  total_size += 1UL * this->_internal_pusch_size();
  for (const auto& msg : this->pusch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fs.mac_phy.ul_sched_ack_t phich = 2;
  total_size += 1UL * this->_internal_phich_size();
  for (const auto& msg : this->phich_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 nof_grants = 3;
  if (this->nof_grants() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_grants());
  }

  // uint32 nof_phich = 4;
  if (this->nof_phich() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nof_phich());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ul_sched_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.ul_sched_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ul_sched_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ul_sched_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.ul_sched_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.ul_sched_t)
    MergeFrom(*source);
  }
}

void ul_sched_t::MergeFrom(const ul_sched_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.ul_sched_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pusch_.MergeFrom(from.pusch_);
  phich_.MergeFrom(from.phich_);
  if (from.nof_grants() != 0) {
    _internal_set_nof_grants(from._internal_nof_grants());
  }
  if (from.nof_phich() != 0) {
    _internal_set_nof_phich(from._internal_nof_phich());
  }
}

void ul_sched_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.ul_sched_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ul_sched_t::CopyFrom(const ul_sched_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.ul_sched_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ul_sched_t::IsInitialized() const {
  return true;
}

void ul_sched_t::InternalSwap(ul_sched_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pusch_.InternalSwap(&other->pusch_);
  phich_.InternalSwap(&other->phich_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ul_sched_t, nof_phich_)
      + sizeof(ul_sched_t::nof_phich_)
      - PROTOBUF_FIELD_OFFSET(ul_sched_t, nof_grants_)>(
          reinterpret_cast<char*>(&nof_grants_),
          reinterpret_cast<char*>(&other->nof_grants_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ul_sched_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ul_sched_list_t::InitAsDefaultInstance() {
}
class ul_sched_list_t::_Internal {
 public:
};

ul_sched_list_t::ul_sched_list_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fs.mac_phy.ul_sched_list_t)
}
ul_sched_list_t::ul_sched_list_t(const ul_sched_list_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.mac_phy.ul_sched_list_t)
}

void ul_sched_list_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ul_sched_list_t_ul_5fgrant_2eproto.base);
}

ul_sched_list_t::~ul_sched_list_t() {
  // @@protoc_insertion_point(destructor:fs.mac_phy.ul_sched_list_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ul_sched_list_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ul_sched_list_t::ArenaDtor(void* object) {
  ul_sched_list_t* _this = reinterpret_cast< ul_sched_list_t* >(object);
  (void)_this;
}
void ul_sched_list_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ul_sched_list_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ul_sched_list_t& ul_sched_list_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ul_sched_list_t_ul_5fgrant_2eproto.base);
  return *internal_default_instance();
}


void ul_sched_list_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.mac_phy.ul_sched_list_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ul_sched_list_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fs.mac_phy.ul_sched_t list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ul_sched_list_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.mac_phy.ul_sched_list_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.mac_phy.ul_sched_t list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.mac_phy.ul_sched_list_t)
  return target;
}

size_t ul_sched_list_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.mac_phy.ul_sched_list_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fs.mac_phy.ul_sched_t list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ul_sched_list_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.mac_phy.ul_sched_list_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ul_sched_list_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ul_sched_list_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.mac_phy.ul_sched_list_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.mac_phy.ul_sched_list_t)
    MergeFrom(*source);
  }
}

void ul_sched_list_t::MergeFrom(const ul_sched_list_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.mac_phy.ul_sched_list_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ul_sched_list_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.mac_phy.ul_sched_list_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ul_sched_list_t::CopyFrom(const ul_sched_list_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.mac_phy.ul_sched_list_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ul_sched_list_t::IsInitialized() const {
  return true;
}

void ul_sched_list_t::InternalSwap(ul_sched_list_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ul_sched_list_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mac_phy
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::mac_phy::srsran_dci_ul_t* Arena::CreateMaybeMessage< ::fs::mac_phy::srsran_dci_ul_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::srsran_dci_ul_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_phy::ul_sched_ack_t* Arena::CreateMaybeMessage< ::fs::mac_phy::ul_sched_ack_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::ul_sched_ack_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_phy::raw_buffer* Arena::CreateMaybeMessage< ::fs::mac_phy::raw_buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::raw_buffer >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_phy::srsran_softbuffer_rx_t* Arena::CreateMaybeMessage< ::fs::mac_phy::srsran_softbuffer_rx_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::srsran_softbuffer_rx_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_phy::ul_sched_grant_t* Arena::CreateMaybeMessage< ::fs::mac_phy::ul_sched_grant_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::ul_sched_grant_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_phy::ul_sched_t* Arena::CreateMaybeMessage< ::fs::mac_phy::ul_sched_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::ul_sched_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::mac_phy::ul_sched_list_t* Arena::CreateMaybeMessage< ::fs::mac_phy::ul_sched_list_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::mac_phy::ul_sched_list_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
